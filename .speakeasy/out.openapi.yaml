openapi: "3.1.0"
info:
  title: "Mix REST API"
  description: "REST API for the Mix application - session management, messaging, and system operations"
  version: "1.0.0"
servers:
  - url: "http://localhost:8088"
    description: "Development server"
x-speakeasy-retries: {"backoff": {"exponent": 1.5, "initialInterval": 500, "maxElapsedTime": 600000, "maxInterval": 60000}, "retryConnectionErrors": true, "statusCodes": ["5XX", "408", "429"], "strategy": "backoff"}
paths:
  "/api/auth/api-key":
    post:
      description: "Store API key for direct authentication with a specific provider"
      operationId: "storeApiKey"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "api_key":
                  description: "API key for authentication"
                  type: "string"
                "provider":
                  description: "Provider name (anthropic, openai, openrouter, gemini, brave)"
                  enum:
                    - "anthropic"
                    - "openai"
                    - "openrouter"
                    - "gemini"
                    - "brave"
                  type: "string"
              required:
                - "provider"
                - "api_key"
              type: "object"
        required: true
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "message":
                    description: "Success message"
                    type: "string"
                  "provider":
                    description: "Provider name"
                    type: "string"
                  "status":
                    description: "Operation status (success)"
                    type: "string"
                type: "object"
          description: "API key stored status"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request data or API key format"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Store API key"
      tags:
        - "Authentication"
  "/api/auth/oauth-callback":
    post:
      description: "Process OAuth callback and exchange code for access token"
      operationId: "handleOAuthCallback"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "code":
                  description: "Authorization code from OAuth provider"
                  type: "string"
                "provider":
                  description: "Provider name (anthropic)"
                  type: "string"
                "state":
                  description: "OAuth state for verification"
                  type: "string"
              required:
                - "provider"
                - "code"
                - "state"
              type: "object"
        required: true
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "expires_in":
                    description: "Seconds until token expiration"
                    type: "integer"
                  "message":
                    description: "Status message"
                    type: "string"
                  "provider":
                    description: "Provider name"
                    type: "string"
                  "status":
                    description: "Operation status"
                    type: "string"
                type: "object"
          description: "OAuth completion status"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request parameters"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Handle OAuth callback"
      tags:
        - "Authentication"
  "/api/auth/oauth/{provider}":
    post:
      description: "Initiate OAuth authentication flow for a specific provider"
      operationId: "startOAuthFlow"
      parameters:
        - description: "Provider name (currently only 'anthropic')"
          in: "path"
          name: "provider"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "auth_url":
                    description: "OAuth authorization URL to redirect to"
                    type: "string"
                  "message":
                    description: "Instructions for completing OAuth flow"
                    type: "string"
                  "state":
                    description: "OAuth state token for verification"
                    type: "string"
                type: "object"
          description: "OAuth authorization information"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid provider or OAuth not supported"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Start OAuth authentication"
      tags:
        - "Authentication"
  "/api/auth/status":
    get:
      description: "Get authentication status for all supported providers"
      operationId: "getAuthStatus"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "providers":
                    additionalProperties:
                      properties:
                        "auth_method":
                          description: "Authentication method (oauth, api_key, none)"
                          enum:
                            - "oauth"
                            - "api_key"
                            - "none"
                          type: "string"
                        "authenticated":
                          description: "Whether provider is authenticated"
                          type: "boolean"
                        "display_name":
                          description: "User-friendly provider name"
                          type: "string"
                      type: "object"
                    description: "Map of provider authentication status"
                    type: "object"
                type: "object"
          description: "Authentication status for all providers"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get authentication status"
      tags:
        - "Authentication"
  "/api/auth/validate":
    get:
      description: "Check if the user's preferred provider is authenticated"
      operationId: "validatePreferredProvider"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "auth_method":
                    description: "Authentication method used"
                    enum:
                      - "oauth"
                      - "api_key"
                      - "none"
                    type: "string"
                  "message":
                    description: "Status message"
                    type: "string"
                  "provider":
                    description: "Preferred provider name"
                    type: "string"
                  "valid":
                    description: "Whether preferred provider is authenticated"
                    type: "boolean"
                type: "object"
          description: "Preferred provider validation status"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Validate preferred provider"
      tags:
        - "Authentication"
  "/api/auth/{provider}":
    delete:
      description: "Delete stored API key and/or OAuth credentials for a provider"
      operationId: "deleteCredentials"
      parameters:
        - description: "Provider name (anthropic, openai, openrouter, gemini, brave)"
          in: "path"
          name: "provider"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "message":
                    description: "Status message"
                    type: "string"
                  "provider":
                    description: "Provider name"
                    type: "string"
                  "status":
                    description: "Operation status"
                    type: "string"
                type: "object"
          description: "Credentials deletion status"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid provider"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Delete provider credentials"
      tags:
        - "Authentication"
  "/api/commands":
    get:
      description: "Retrieve list of all available commands"
      operationId: "listCommands"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items:
                  properties:
                    "description":
                      description: "Command description"
                      type: "string"
                    "name":
                      description: "Command name"
                      type: "string"
                  type: "object"
                type: "array"
          description: "List of commands"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "List available commands"
      tags:
        - "System"
  "/api/commands/{name}":
    get:
      description: "Retrieve details about a specific command"
      operationId: "getCommand"
      parameters:
        - description: "Command name"
          in: "path"
          name: "name"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "description":
                    description: "Command description"
                    type: "string"
                  "name":
                    description: "Command name"
                    type: "string"
                  "usage":
                    description: "Command usage instructions"
                    type: "string"
                type: "object"
          description: "Command details"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Command not found"
      summary: "Get specific command"
      tags:
        - "System"
  "/api/mcp":
    get:
      description: "Retrieve list of available Model Context Protocol (MCP) servers"
      operationId: "listMcpServers"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items:
                  properties:
                    "connected":
                      description: "Whether the MCP server is currently connected"
                      type: "boolean"
                    "name":
                      description: "MCP server name"
                      type: "string"
                    "status":
                      description: "Server connection status (e.g., 'connected', 'failed', 'disconnected')"
                      type: "string"
                    "tools":
                      description: "List of tools provided by this MCP server (null if server is not connected)"
                      items:
                        properties:
                          "description":
                            description: "Tool description"
                            type: "string"
                          "name":
                            description: "Tool name"
                            type: "string"
                        required:
                          - "name"
                          - "description"
                        type: "object"
                      nullable: true
                      type: "array"
                  required:
                    - "name"
                    - "connected"
                    - "status"
                  type: "object"
                type: "array"
          description: "List of MCP servers"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "List MCP servers"
      tags:
        - "System"
  "/api/messages/history":
    get:
      description: "Retrieve message history across all sessions with optional pagination"
      operationId: "getMessageHistory"
      parameters:
        - description: "Maximum number of messages to return"
          in: "query"
          name: "limit"
          schema:
            default: 50
            maximum: 1000
            minimum: 1
            type: "integer"
        - description: "Number of messages to skip"
          in: "query"
          name: "offset"
          schema:
            default: 0
            minimum: 0
            type: "integer"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/BackendMessage"}
                type: "array"
          description: "Message history"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get global message history"
      tags:
        - "Messages"
      x-speakeasy-name-override: "getHistory"
  "/api/permissions/{id}/deny":
    post:
      description: "Deny a specific permission"
      operationId: "denyPermission"
      parameters:
        - description: "Permission ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "denied":
                    description: "Whether permission was denied"
                    type: "boolean"
                type: "object"
          description: "Permission deny status"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Permission not found"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Deny permission"
      tags:
        - "Permissions"
      x-speakeasy-name-override: "deny"
  "/api/permissions/{id}/grant":
    post:
      description: "Grant a specific permission"
      operationId: "grantPermission"
      parameters:
        - description: "Permission ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "granted":
                    description: "Whether permission was granted"
                    type: "boolean"
                type: "object"
          description: "Permission grant status"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Permission not found"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Grant permission"
      tags:
        - "Permissions"
      x-speakeasy-name-override: "grant"
  "/api/preferences":
    get:
      description: "Retrieve current user preferences including model and provider settings"
      operationId: "getPreferences"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "available_providers":
                    additionalProperties:
                      properties:
                        "display_name":
                          description: "User-friendly provider name"
                          type: "string"
                        "models":
                          description: "Available models from this provider"
                          items:
                            type: "string"
                          type: "array"
                      type: "object"
                    description: "Map of available AI providers and their models"
                    type: "object"
                  "preferences":
                    description: "User preferences (null if no preferences exist)"
                    nullable: true
                    properties:
                      "created_at":
                        description: "Unix timestamp when preferences were created"
                        type: "integer"
                      "main_agent_max_tokens":
                        description: "Maximum tokens for main agent responses"
                        type: "integer"
                      "main_agent_model":
                        description: "Main agent model ID"
                        type: "string"
                      "main_agent_reasoning_effort":
                        description: "Reasoning effort setting for main agent"
                        type: "string"
                      "preferred_provider":
                        description: "Preferred AI provider (anthropic, openai, openrouter)"
                        type: "string"
                      "sub_agent_max_tokens":
                        description: "Maximum tokens for sub agent responses"
                        type: "integer"
                      "sub_agent_model":
                        description: "Sub agent model ID"
                        type: "string"
                      "sub_agent_reasoning_effort":
                        description: "Reasoning effort setting for sub agent"
                        type: "string"
                      "updated_at":
                        description: "Unix timestamp of last update"
                        type: "integer"
                    type: "object"
                required:
                  - "available_providers"
                type: "object"
          description: "User preferences and available providers"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get user preferences"
      tags:
        - "Preferences"
      x-speakeasy-name-override: get
    post:
      description: "Update user preferences including model and provider settings"
      operationId: "updatePreferences"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "main_agent_max_tokens":
                  description: "Maximum tokens for main agent responses"
                  type: "integer"
                "main_agent_model":
                  description: "Main agent model ID"
                  type: "string"
                "main_agent_reasoning_effort":
                  description: "Reasoning effort setting for main agent"
                  type: "string"
                "preferred_provider":
                  description: "Preferred AI provider (anthropic, openai, openrouter)"
                  type: "string"
                "sub_agent_max_tokens":
                  description: "Maximum tokens for sub agent responses"
                  type: "integer"
                "sub_agent_model":
                  description: "Sub agent model ID"
                  type: "string"
                "sub_agent_reasoning_effort":
                  description: "Reasoning effort setting for sub agent"
                  type: "string"
              type: "object"
        required: true
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "created_at":
                    description: "Creation timestamp"
                    type: "integer"
                  "main_agent_max_tokens":
                    description: "Maximum tokens for main agent"
                    type: "integer"
                  "main_agent_model":
                    description: "Main agent model ID"
                    type: "string"
                  "main_agent_reasoning_effort":
                    description: "Reasoning effort for main agent"
                    type: "string"
                  "preferred_provider":
                    description: "Preferred AI provider"
                    type: "string"
                  "sub_agent_max_tokens":
                    description: "Maximum tokens for sub agent"
                    type: "integer"
                  "sub_agent_model":
                    description: "Sub agent model ID"
                    type: "string"
                  "sub_agent_reasoning_effort":
                    description: "Reasoning effort for sub agent"
                    type: "string"
                  "updated_at":
                    description: "Last update timestamp"
                    type: "integer"
                type: "object"
          description: "Updated preferences"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request parameters"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Update user preferences"
      tags:
        - "Preferences"
      x-speakeasy-name-override: update
  "/api/preferences/providers":
    get:
      description: "Retrieve list of available AI providers and their supported models"
      operationId: "getAvailableProviders"
      responses:
        "200":
          content:
            "application/json":
              schema:
                additionalProperties:
                  properties:
                    "display_name":
                      description: "Provider display name"
                      type: "string"
                    "models":
                      description: "Available models for this provider"
                      items:
                        type: "string"
                      type: "array"
                  type: "object"
                description: "Map of available providers and their models"
                type: "object"
          description: "Available providers"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get available providers"
      tags:
        - "Preferences"
      x-speakeasy-name-override: getProviders
  "/api/preferences/reset":
    post:
      description: "Reset user preferences to default values"
      operationId: "resetPreferences"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "created_at":
                    description: "Creation timestamp"
                    type: "integer"
                  "main_agent_max_tokens":
                    description: "Reset main agent max tokens"
                    type: "integer"
                  "main_agent_model":
                    description: "Reset main agent model"
                    type: "string"
                  "main_agent_reasoning_effort":
                    description: "Reset main agent reasoning effort"
                    type: "string"
                  "preferred_provider":
                    description: "Reset preferred provider"
                    type: "string"
                  "sub_agent_max_tokens":
                    description: "Reset sub agent max tokens"
                    type: "integer"
                  "sub_agent_model":
                    description: "Reset sub agent model"
                    type: "string"
                  "sub_agent_reasoning_effort":
                    description: "Reset sub agent reasoning effort"
                    type: "string"
                  "updated_at":
                    description: "Reset timestamp"
                    type: "integer"
                type: "object"
          description: "Reset preferences"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Reset preferences"
      tags:
        - "Preferences"
      x-speakeasy-name-override: reset
  "/api/sessions":
    get:
      description: "Retrieve a list of all available sessions with their metadata"
      operationId: "listSessions"
      parameters:
        - description: "Include subagent sessions in response (default: false, subagent sessions are hidden)"
          in: "query"
          name: "includeSubagents"
          required: false
          schema:
            default: false
            type: "boolean"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/SessionData"}
                type: "array"
          description: "List of sessions"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "List all sessions"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "list"
    post:
      description: "Create a new session with required title and optional custom system prompt. Session automatically gets isolated storage directory. Supports session-level callbacks for automated actions after tool execution."
      operationId: "createSession"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "callbacks":
                  description: "Session-level callbacks that execute after tool completion. Environment variables available: CALLBACK_TOOL_RESULT, CALLBACK_TOOL_NAME, CALLBACK_TOOL_ID, CALLBACK_SESSION_ID"
                  items: {"$ref": "#/components/schemas/Callback"}
                  type: "array"
                "customSystemPrompt":
                  description: "Custom system prompt content. Size limits apply based on promptMode: 100KB (102,400 bytes) for replace mode, 50KB (51,200 bytes) for append mode. Ignored in default mode. Supports environment variable substitution with $<variable> syntax."
                  example: "You are a helpful assistant specialized in $<domain>. Always be concise and accurate."
                  maxLength: 102400
                  type: "string"
                "promptMode":
                  default: "default"
                  description: "Custom prompt handling mode:\n- 'default': Use base system prompt only (customSystemPrompt ignored)\n- 'append': Append customSystemPrompt to base system prompt (50KB limit)\n- 'replace': Replace base system prompt with customSystemPrompt (100KB limit)"
                  enum:
                    - "default"
                    - "append"
                    - "replace"
                  example: "append"
                  type: "string"
                "sessionType":
                  default: "main"
                  description: "Session type. API can only create 'main' sessions. Forked sessions are created via /fork endpoint. Subagent sessions are created automatically by the task delegation system."
                  enum:
                    - "main"
                  example: "main"
                  type: "string"
                "subagentType":
                  description: "Subagent type - must not be set for API-created sessions. This field is reserved for programmatic subagent creation."
                  example: ""
                  type: "string"
                "title":
                  description: "Title for the session"
                  type: "string"
              required:
                - "title"
              type: "object"
        required: true
      responses:
        "201":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Created session"
        "400":
          content:
            "application/json":
              examples:
                "invalid_prompt_mode":
                  summary: "Invalid prompt mode"
                  value: {"error": {"code": 400, "message": "promptMode must be 'default', 'append', or 'replace'", "type": "validation_error"}}
                "invalid_session_type":
                  summary: "Invalid session type"
                  value: {"error": {"code": 400, "message": "API can only create main sessions. Use /fork endpoint for forked sessions. Subagent sessions are created automatically.", "type": "validation_error"}}
                "missing_title":
                  summary: "Missing required title"
                  value: {"error": {"code": 400, "message": "title is required", "type": "validation_error"}}
                "prompt_size_exceeded_append":
                  summary: "Custom prompt size exceeds append mode limit"
                  value: {"error": {"code": 400, "message": "Custom prompt size (75KB) exceeds append mode limit of 50KB", "type": "validation_error"}}
                "prompt_size_exceeded_replace":
                  summary: "Custom prompt size exceeds replace mode limit"
                  value: {"error": {"code": 400, "message": "Custom prompt size (150KB) exceeds replace mode limit of 100KB", "type": "validation_error"}}
                "subagent_type_not_allowed":
                  summary: "Subagent type not allowed for API-created sessions"
                  value: {"error": {"code": 400, "message": "subagentType cannot be set for API-created sessions. Subagent sessions are created programmatically by the task delegation system.", "type": "validation_error"}}
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request data"
      summary: "Create a new session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "create"
  "/api/sessions/{id}":
    delete:
      description: "Permanently delete a session and all its data"
      operationId: "deleteSession"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "Session deleted successfully"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Delete a session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "delete"
    get:
      description: "Retrieve detailed information about a specific session"
      operationId: "getSession"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Session details"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Get a specific session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "get"
  "/api/sessions/{id}/callbacks":
    patch:
      description: "Update the callback configurations for a session. Callbacks execute automatically after tool completion. Pass an empty array to clear all callbacks."
      operationId: "updateSessionCallbacks"
      parameters:
        - description: "Session ID to update"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "callbacks":
                  description: "Session-level callbacks that execute after tool completion. Environment variables available: CALLBACK_TOOL_RESULT, CALLBACK_TOOL_NAME, CALLBACK_TOOL_ID, CALLBACK_SESSION_ID"
                  items: {"$ref": "#/components/schemas/Callback"}
                  type: "array"
              required:
                - "callbacks"
              type: "object"
        required: true
      responses:
        "200":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Session callbacks updated successfully"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request - validation error in callbacks array"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Update session callbacks"
      tags:
        - "Sessions"
  "/api/sessions/{id}/cancel":
    post:
      description: "Cancel any ongoing agent processing in the specified session"
      operationId: "cancelSessionProcessing"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "cancelled":
                    description: "Whether cancellation was successful"
                    type: "boolean"
                type: "object"
          description: "Cancellation status"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Cancel agent processing"
      tags:
        - "Messages"
      x-speakeasy-name-override: "cancelProcessing"
  "/api/sessions/{id}/export":
    get:
      description: "Export complete session transcript with all messages, tool calls, reasoning, and metadata as JSON"
      operationId: "exportSession"
      parameters:
        - description: "Session ID to export"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ExportSession"}
          description: "Session transcript exported successfully"
          headers:
            "Content-Disposition":
              description: "Suggests filename for download"
              schema:
                example: "attachment; filename=session_abc123_transcript.json"
                type: "string"
              example: "attachment; filename=session_abc123_transcript.json"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Export session transcript"
      tags:
        - "Sessions"
  "/api/sessions/{id}/files":
    get:
      description: "List all files in session storage directory"
      operationId: "listSessionFiles"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/FileInfo"}
                type: "array"
          description: "List of files in session"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "List session files"
      tags:
        - "Files"
      x-speakeasy-name-override: list
  "/api/sessions/{id}/files/upload":
    post:
      description: "Upload a file to session-specific storage directory"
      operationId: "uploadSessionFile"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "multipart/form-data":
            schema:
              properties:
                "file":
                  description: "File to upload"
                  format: "binary"
                  type: "string"
              required:
                - "file"
              type: "object"
        required: true
      responses:
        "201":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FileInfo"}
          description: "File uploaded successfully"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid file or session ID"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
        "413":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "File too large (max 32MB)"
      summary: "Upload file to session"
      tags:
        - "Files"
      x-speakeasy-name-override: upload
  "/api/sessions/{id}/files/{filename}":
    delete:
      description: "Delete a specific file from session storage. Only files are supported - directories cannot be deleted."
      operationId: "deleteSessionFile"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
        - description: "Filename to delete"
          in: "path"
          name: "filename"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "File deleted successfully"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Bad request - attempted to delete a directory"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session or file not found"
      summary: "Delete session file"
      tags:
        - "Files"
      x-speakeasy-name-override: delete
    get:
      description: "Download or serve a specific file from session storage. Supports thumbnail generation with ?thumb parameter."
      operationId: "getSessionFile"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
        - description: "Filename to retrieve"
          in: "path"
          name: "filename"
          required: true
          schema:
            type: "string"
        - description: "Thumbnail specification: '100' (box), 'w100' (width), 'h100' (height)"
          in: "query"
          name: "thumb"
          schema:
            pattern: "^(\\d+|w\\d+|h\\d+)$"
            type: "string"
        - description: "Time offset in seconds for video thumbnails (default: 1.0)"
          in: "query"
          name: "time"
          schema:
            maximum: 86400
            minimum: 0
            type: "number"
      responses:
        "200":
          content:
            "*/*":
              schema:
                description: "File content with appropriate MIME type"
                format: "binary"
                type: "string"
          description: "File content"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid filename or thumbnail parameters"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session or file not found"
      summary: "Get session file"
      tags:
        - "Files"
      x-speakeasy-name-override: get
  "/api/sessions/{id}/fork":
    post:
      description: "Create a new session based on an existing session, copying messages up to a specified index"
      operationId: "forkSession"
      parameters:
        - description: "Source session ID to fork from"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "messageIndex":
                  description: "Index of the last message to include in the fork (0-based)"
                  minimum: 0
                  type: "integer"
                "title":
                  description: "Optional title for the forked session (defaults to 'Forked Session')"
                  type: "string"
              required:
                - "messageIndex"
              type: "object"
        required: true
      responses:
        "201":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Forked session"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request - messageIndex must be >= 0"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Source session not found"
      summary: "Fork a session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "fork"
  "/api/sessions/{id}/messages":
    get:
      description: "Retrieve all messages from a specific session"
      operationId: "getSessionMessages"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/BackendMessage"}
                type: "array"
          description: "List of session messages"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "List session messages"
      tags:
        - "Messages"
      x-speakeasy-name-override: "getSession"
    post:
      description: "Send a user message to a specific session for AI processing. Returns immediately with 202 Accepted. All results stream via Server-Sent Events (SSE) connection."
      operationId: "sendMessage"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "plan_mode":
                  default: false
                  description: "Whether the message is in planning mode"
                  type: "boolean"
                "text":
                  description: "The text content of the message"
                  type: "string"
              required:
                - "text"
              type: "object"
        required: true
      responses:
        "202":
          content:
            "application/json":
              schema:
                properties:
                  "sessionId":
                    description: "Session ID for the processing task"
                    type: "string"
                  "status":
                    description: "Processing status"
                    example: "processing"
                    type: "string"
                required:
                  - "status"
                  - "sessionId"
                type: "object"
          description: "Message accepted for processing. Agent runs asynchronously and streams results via SSE."
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid message data"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Send a message to session (async)"
      tags:
        - "Messages"
      x-speakeasy-name-override: "send"
  "/api/sessions/{id}/rewind":
    post:
      description: "Delete messages after a specified message in the current session, optionally cleaning up media files created after that point"
      operationId: "rewindSession"
      parameters:
        - description: "Session ID to rewind"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "cleanupMedia":
                  default: true
                  description: "Whether to clean up media files created after the rewind point (based on file timestamp)"
                  type: "boolean"
                "messageId":
                  description: "ID of the last message to keep. All messages after this message will be deleted."
                  type: "string"
              required:
                - "messageId"
              type: "object"
        required: true
      responses:
        "200":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Session rewound successfully"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request - messageId is required"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session or message not found"
      summary: "Rewind a session"
      tags:
        - "Sessions"
  "/api/system/info":
    get:
      description: "Retrieve system information including storage configuration"
      operationId: "getSystemInfo"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "storageBasePath":
                    description: "Absolute path to the storage base directory"
                    type: "string"
                required:
                  - "storageBasePath"
                type: "object"
          description: "System information"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get system information"
      tags:
        - "System"
  "/api/tools":
    get:
      description: "Returns the list of all LLM tools that Claude can invoke. The list is dynamically extracted from the actual tools registered in CoderAgentTools() (agent/tools.go), ensuring it always reflects the current tool availability. Typical tools include: Bash, Edit, Read, Write, Grep, Glob, WebFetch, WebSearch, ReadMedia, TodoWrite, ExitPlanMode, and Task. This endpoint is useful for creating tool callbacks or understanding available agent capabilities."
      operationId: "listLLMTools"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "tools":
                    items:
                      properties:
                        "description":
                          description: "Tool description"
                          example: "Execute bash commands in a persistent shell session"
                          type: "string"
                        "name":
                          description: "Tool name"
                          example: "Bash"
                          type: "string"
                        "parameters":
                          description: "Tool parameter schema"
                          type: "object"
                        "required":
                          description: "Required parameters"
                          items:
                            type: "string"
                          type: "array"
                      type: "object"
                    type: "array"
                type: "object"
          description: "List of LLM tools"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "List LLM tools"
      tags:
        - "Tools"
  "/api/tools/credentials-status":
    get:
      description: "Returns authentication/credential status for external tool integrations (Brave Search, Gemini Vision, etc.). This endpoint checks if API keys are configured for tools that require external service credentials."
      operationId: "getToolCredentialsStatus"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "categories":
                    additionalProperties:
                      properties:
                        "description":
                          description: "Category description"
                          example: "Search the web for real-time information"
                          type: "string"
                        "display_name":
                          description: "Category display name"
                          example: "Web Search"
                          type: "string"
                        "icon":
                          description: "Category icon"
                          example: "\U0001F50D"
                          type: "string"
                        "tools":
                          description: "Tools in this category"
                          items:
                            properties:
                              "api_key_format":
                                description: "Expected API key format"
                                example: "BSA..."
                                type: "string"
                              "api_key_required":
                                description: "Whether an API key is required"
                                example: true
                                type: "boolean"
                              "authenticated":
                                description: "Whether the tool has valid credentials"
                                example: true
                                type: "boolean"
                              "description":
                                description: "Tool description"
                                example: "Privacy-focused web search with real-time results"
                                type: "string"
                              "display_name":
                                description: "Tool display name"
                                example: "Brave Search"
                                type: "string"
                              "provider":
                                description: "Provider identifier"
                                example: "brave"
                                type: "string"
                            type: "object"
                          type: "array"
                      type: "object"
                    description: "Tool categories grouped by type"
                    type: "object"
                type: "object"
          description: "Tool credentials status"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get tool credentials status"
      tags:
        - "Tools"
  "/api/tools/status":
    get:
      description: "Get status and authentication information for all available tools and categories"
      operationId: "getToolsStatus"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "categories":
                    additionalProperties:
                      properties:
                        "display_name":
                          description: "User-friendly category name"
                          type: "string"
                        "tools":
                          description: "Available tools in this category"
                          items:
                            properties:
                              "api_key_required":
                                description: "Whether tool requires API key authentication"
                                type: "boolean"
                              "authenticated":
                                description: "Whether tool is authenticated and ready to use"
                                type: "boolean"
                              "description":
                                description: "Tool description"
                                type: "string"
                              "display_name":
                                description: "User-friendly tool name"
                                type: "string"
                              "provider":
                                description: "Tool provider name"
                                type: "string"
                            type: "object"
                          type: "array"
                      type: "object"
                    description: "Map of tool categories and their tools"
                    type: "object"
                type: "object"
          description: "Tools status and authentication information"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get tools status"
      tags:
        - "Tools"
  "/health":
    get:
      description: "Check server health and status"
      operationId: "healthCheck"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "status":
                    description: "Health status"
                    type: "string"
                  "timestamp":
                    description: "Current timestamp"
                    type: "string"
                  "version":
                    description: "Application version"
                    type: "string"
                type: "object"
          description: "Health information"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Health check"
      tags:
        - "System"
  "/health/auth":
    get:
      description: "Get health status of all OAuth credentials. Background service refreshes tokens 35 minutes before expiry. API calls mark tokens expired 5 minutes before expiry. Health statuses: 'healthy' (tokens valid, >5min remaining), 'degraded' (some tokens within 5min of expiry but refreshable), 'unhealthy' (tokens expired without refresh capability)"
      operationId: "getOAuthHealth"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "providers":
                    additionalProperties:
                      properties:
                        "error":
                          description: "Error message if status is 'error'"
                          type: "string"
                        "expires_at":
                          description: "Token expiration time"
                          format: "date-time"
                          type: "string"
                        "expires_in":
                          description: "Human-readable time until expiration"
                          example: "2h30m15s"
                          type: "string"
                        "last_refresh":
                          description: "Last time token was refreshed"
                          format: "date-time"
                          type: "string"
                        "provider":
                          description: "Provider name"
                          type: "string"
                        "status":
                          description: "Token status"
                          enum:
                            - "active"
                            - "expired"
                            - "expired_no_refresh"
                            - "error"
                            - "not_found"
                          type: "string"
                      required:
                        - "provider"
                        - "status"
                      type: "object"
                    description: "Map of provider OAuth health status"
                    type: "object"
                  "status":
                    description: "Overall health status"
                    enum:
                      - "healthy"
                      - "degraded"
                      - "unhealthy"
                    example: "healthy"
                    type: "string"
                  "timestamp":
                    description: "Health check timestamp"
                    format: "date-time"
                    type: "string"
                required:
                  - "status"
                  - "providers"
                  - "timestamp"
                type: "object"
          description: "OAuth health status"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Health check service not available or internal error"
      summary: "Get OAuth authentication health"
      tags:
        - "Health"
        - "Authentication"
  "/internal/auth/refresh-tokens":
    post:
      description: "Manually trigger OAuth token refresh for all expired tokens. Normally tokens are refreshed automatically by the background service every 30 minutes."
      operationId: "refreshOAuthTokens"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "message":
                    description: "Status message"
                    example: "Token refresh triggered successfully"
                    type: "string"
                  "status":
                    description: "Operation status"
                    example: "success"
                    type: "string"
                type: "object"
          description: "Token refresh triggered"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Token refresh service not available or internal error"
      summary: "Manually refresh OAuth tokens"
      tags:
        - "Authentication"
        - "Internal"
  "/stream":
    get:
      description: "Establishes a persistent SSE connection for receiving real-time updates during message processing. Connection remains open for multiple messages and includes proper reconnection support with Last-Event-ID header."
      operationId: "streamEvents"
      parameters:
        - description: "Session ID to stream events for"
          in: "query"
          name: "sessionId"
          required: true
          schema:
            type: "string"
        - description: "Last received event ID for reconnection and event replay"
          in: "header"
          name: "Last-Event-ID"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          content:
            "text/event-stream":
              schema: {"$ref": "#/components/schemas/SSEEventStream"}
          description: "SSE event stream"
          headers:
            "Cache-Control":
              description: "Prevents caching of the event stream"
              schema:
                example: "no-cache"
                type: "string"
              example: "no-cache"
            "Connection":
              description: "Keep connection alive for streaming"
              schema:
                example: "keep-alive"
                type: "string"
              example: "keep-alive"
            "Content-Type":
              description: "Server-sent events MIME type"
              schema:
                example: "text/event-stream"
                type: "string"
              example: "text/event-stream"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Server-Sent Events stream for real-time updates"
      tags:
        - "Streaming"
components:
  schemas:
    "BackendMessage":
      description: "Backend message structure representing a complete message exchange"
      properties:
        "assistantResponse":
          description: "Assistant's response message (optional)"
          type: "string"
        "callbackResults":
          description: "Callback execution results (optional)"
          items: {"$ref": "#/components/schemas/CallbackResultData"}
          type: "array"
        "id":
          description: "Unique message identifier"
          type: "string"
        "reasoning":
          description: "Reasoning process (optional)"
          type: "string"
        "reasoningDuration":
          description: "Reasoning duration in milliseconds (optional)"
          type: "integer"
        "role":
          description: "Message role (user, assistant, tool)"
          type: "string"
        "sessionId":
          description: "Session identifier"
          type: "string"
        "toolCalls":
          description: "Tool calls made during message processing"
          items: {"$ref": "#/components/schemas/ToolCallData"}
          type: "array"
        "userInput":
          description: "User's input message"
          type: "string"
      required:
        - "id"
        - "sessionId"
        - "role"
        - "userInput"
      type: "object"
    "Callback":
      description: "Session-level callback configuration that executes after tool completion"
      properties:
        "bashCommand":
          description: "Bash command to execute (required for bash_script type). Has access to environment variables."
          type: "string"
        "bashTimeout":
          default: 120000
          description: "Timeout in milliseconds for bash execution (default: 120000)"
          type: "integer"
        "excludeFromContext":
          default: false
          description: "Exclude callback results from agent context. Only applies to bash_script and sub_agent types. Not allowed for send_message."
          type: "boolean"
        "includeFullHistory":
          default: false
          description: "Include full conversation history in sub-agent context (not yet implemented)"
          type: "boolean"
        "messageContent":
          description: "Message content to inject into the conversation (required for send_message type). Will be sent as a User message."
          example: "Please review the changes and run tests"
          type: "string"
        "name":
          description: "Human-readable name for this callback (optional, defaults to 'Callback #XXXX')"
          example: "Log Output"
          type: "string"
        "subAgentPrompt":
          description: "Prompt for the sub-agent (required for sub_agent type). Tool execution context is automatically appended."
          type: "string"
        "subAgentType":
          default: "general-purpose"
          description: "Type of sub-agent to spawn (default: 'general-purpose')"
          type: "string"
        "toolName":
          description: "Tool to attach callback to (e.g., 'show_media', 'bash', '*' for all tools)"
          example: "*"
          type: "string"
        "type":
          description: "Callback type: 'bash_script' for shell commands, 'sub_agent' for spawning sub-agents, 'send_message' for injecting messages"
          enum:
            - "bash_script"
            - "sub_agent"
            - "send_message"
          type: "string"
      required:
        - "toolName"
        - "type"
      type: "object"
    "CallbackResultData":
      description: "Callback execution result information"
      properties:
        "callback_name":
          description: "Human-readable name of the callback (optional)"
          type: "string"
        "callback_type":
          description: "Type of callback executed"
          enum:
            - "bash_script"
            - "sub_agent"
            - "send_message"
          type: "string"
        "error":
          description: "Error message if callback failed (optional)"
          type: "string"
        "exclude_from_context":
          description: "Whether this callback result is excluded from agent context (optional)"
          type: "boolean"
        "exit_code":
          description: "Exit code from bash callback (optional)"
          type: "integer"
        "stderr":
          description: "Standard error from bash callback (optional)"
          type: "string"
        "stdout":
          description: "Standard output from bash callback (optional)"
          type: "string"
        "subagent_id":
          description: "ID of spawned sub-agent session (optional)"
          type: "string"
        "subagent_result":
          description: "Result from sub-agent execution (optional)"
          type: "string"
        "success":
          description: "Whether callback executed successfully"
          type: "boolean"
        "tool_call_id":
          description: "ID of the tool call that triggered this callback"
          type: "string"
        "tool_name":
          description: "Name of the tool that triggered callback"
          type: "string"
      required:
        - "tool_call_id"
        - "tool_name"
        - "callback_type"
        - "success"
      type: "object"
    "CoreToolName":
      description: "Core built-in tool names"
      enum:
        - "Bash"
        - "ReadText"
        - "Glob"
        - "ReadMedia"
        - "Grep"
        - "Write"
        - "Edit"
        - "python_execution"
        - "Search"
        - "TodoWrite"
        - "ExitPlanMode"
        - "ShowMedia"
        - "Task"
      type: "string"
    "ErrorResponse":
      properties:
        "error": {"$ref": "#/components/schemas/RESTError"}
      required:
        - "error"
      type: "object"
    "ExportMessage":
      description: "Complete message information for export"
      properties:
        "content":
          description: "Message content"
          type: "string"
        "createdAt":
          description: "Message creation timestamp"
          format: "date-time"
          type: "string"
        "finishReason":
          description: "Completion finish reason (optional)"
          type: "string"
        "id":
          description: "Message identifier"
          type: "string"
        "model":
          description: "Model used for this message (optional)"
          type: "string"
        "reasoning":
          description: "Reasoning content (optional)"
          type: "string"
        "reasoningDuration":
          description: "Reasoning duration in milliseconds (optional)"
          type: "integer"
        "role":
          description: "Message role (user, assistant, tool)"
          type: "string"
        "toolCalls":
          description: "Tool calls with complete information"
          items: {"$ref": "#/components/schemas/ExportToolCall"}
          type: "array"
        "updatedAt":
          description: "Message update timestamp"
          format: "date-time"
          type: "string"
      required:
        - "id"
        - "role"
        - "content"
        - "createdAt"
        - "updatedAt"
      type: "object"
    "ExportSession":
      description: "Comprehensive session export with all messages, tool calls, and metadata"
      properties:
        "assistantMessageCount":
          description: "Number of assistant messages"
          type: "integer"
        "completionTokens":
          description: "Total completion tokens used"
          type: "integer"
        "cost":
          description: "Total cost of session"
          format: "double"
          type: "number"
        "createdAt":
          description: "Session creation timestamp"
          format: "date-time"
          type: "string"
        "id":
          description: "Session identifier"
          type: "string"
        "messages":
          description: "Complete list of messages with full details"
          items: {"$ref": "#/components/schemas/ExportMessage"}
          type: "array"
        "promptTokens":
          description: "Total prompt tokens used"
          type: "integer"
        "title":
          description: "Session title"
          type: "string"
        "toolCallCount":
          description: "Total number of tool calls"
          type: "integer"
        "updatedAt":
          description: "Session last update timestamp"
          format: "date-time"
          type: "string"
        "userMessageCount":
          description: "Number of user messages"
          type: "integer"
      required:
        - "id"
        - "title"
        - "messages"
      type: "object"
    "ExportToolCall":
      description: "Complete tool call information for export"
      properties:
        "finished":
          description: "Whether tool execution finished"
          type: "boolean"
        "id":
          description: "Tool call identifier"
          type: "string"
        "input":
          description: "Tool input as JSON string"
          type: "string"
        "inputJson":
          description: "Parsed tool input (optional)"
          type: "object"
        "isError":
          description: "Whether execution resulted in error (optional)"
          type: "boolean"
        "metadata":
          description: "Additional tool metadata (optional)"
          type: "string"
        "name":
          description: "Tool name"
          type: "string"
        "result":
          description: "Tool execution result (optional)"
          type: "string"
        "type":
          description: "Tool type"
          type: "string"
      required:
        - "id"
        - "name"
        - "input"
        - "type"
        - "finished"
      type: "object"
    "FileInfo":
      properties:
        "isDir":
          description: "Whether this is a directory"
          type: "boolean"
        "modified":
          description: "Last modified timestamp (Unix time)"
          format: "int64"
          type: "integer"
        "name":
          description: "File name"
          type: "string"
        "size":
          description: "File size in bytes"
          format: "int64"
          type: "integer"
        "url":
          description: "Static URL to access the file"
          type: "string"
      required:
        - "name"
        - "size"
        - "modified"
        - "isDir"
        - "url"
      type: "object"
    "MessageData":
      description: "Message data structure for user input"
      properties:
        "plan_mode":
          default: false
          description: "Whether the message is in planning mode"
          type: "boolean"
        "text":
          description: "The text content of the message"
          type: "string"
      required:
        - "text"
      type: "object"
    "MessageRole":
      description: "Message role"
      enum:
        - "user"
        - "assistant"
        - "tool"
      type: "string"
    "RESTError":
      properties:
        "code":
          description: "HTTP status code"
          type: "integer"
        "message":
          description: "Error message"
          type: "string"
        "type":
          description: "Error type"
          enum:
            - "bad_request"
            - "not_found"
            - "internal_error"
            - "unauthorized"
            - "validation_error"
          type: "string"
      required:
        - "code"
        - "message"
        - "type"
      type: "object"
    "SSEBaseEvent":
      description: "Base SSE event with standard fields"
      properties:
        "event":
          description: "Event type identifier"
          enum:
            - "connected"
            - "heartbeat"
            - "error"
            - "complete"
            - "thinking"
            - "content"
            - "tool"
            - "tool_parameter_delta"
            - "tool_execution_start"
            - "tool_execution_complete"
            - "permission"
            - "session_created"
            - "session_deleted"
          type: "string"
        "id":
          description: "Unique sequential event identifier for ordering and reconnection"
          example: "1234567890"
          type: "string"
        "retry":
          description: "Client retry interval in milliseconds"
          example: 30000
          type: "integer"
      required:
        - "id"
        - "event"
      type: "object"
    "SSECompleteEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "content":
                  description: "Final response content"
                  type: "string"
                "done":
                  description: "Indicates message processing completion"
                  type: "boolean"
                "messageId":
                  description: "Completed message identifier"
                  type: "string"
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "reasoning":
                  description: "Optional reasoning content"
                  type: "string"
                "reasoningDuration":
                  description: "Duration of reasoning process in milliseconds"
                  type: "integer"
                "type":
                  description: "Completion type"
                  type: "string"
              required:
                - "type"
                - "done"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEConnectedEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "sessionId":
                  description: "Session identifier for the connected stream"
                  type: "string"
              required:
                - "sessionId"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEContentEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "content":
                  description: "Streaming content delta"
                  type: "string"
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "type":
                  description: "Content event type"
                  type: "string"
              required:
                - "type"
                - "content"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEErrorEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "attempt":
                  description: "Current retry attempt number"
                  type: "integer"
                "error":
                  description: "Error message description"
                  type: "string"
                "maxAttempts":
                  description: "Maximum number of retry attempts"
                  type: "integer"
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "retryAfter":
                  description: "Milliseconds to wait before retry"
                  type: "integer"
                "type":
                  description: "Error type classification"
                  type: "string"
              required:
                - "error"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEEventStream":
      description: "Server-Sent Event stream with discriminated event types"
      discriminator:
        mapping:
          "complete": "#/components/schemas/SSECompleteEvent"
          "connected": "#/components/schemas/SSEConnectedEvent"
          "content": "#/components/schemas/SSEContentEvent"
          "error": "#/components/schemas/SSEErrorEvent"
          "heartbeat": "#/components/schemas/SSEHeartbeatEvent"
          "permission": "#/components/schemas/SSEPermissionEvent"
          "session_created": "#/components/schemas/SSESessionCreatedEvent"
          "session_deleted": "#/components/schemas/SSESessionDeletedEvent"
          "thinking": "#/components/schemas/SSEThinkingEvent"
          "tool": "#/components/schemas/SSEToolEvent"
          "tool_execution_complete": "#/components/schemas/SSEToolExecutionCompleteEvent"
          "tool_execution_start": "#/components/schemas/SSEToolExecutionStartEvent"
          "tool_parameter_delta": "#/components/schemas/SSEToolParameterDeltaEvent"
        propertyName: "event"
      oneOf:
        - {"$ref": "#/components/schemas/SSEConnectedEvent"}
        - {"$ref": "#/components/schemas/SSEHeartbeatEvent"}
        - {"$ref": "#/components/schemas/SSEErrorEvent"}
        - {"$ref": "#/components/schemas/SSECompleteEvent"}
        - {"$ref": "#/components/schemas/SSEThinkingEvent"}
        - {"$ref": "#/components/schemas/SSEContentEvent"}
        - {"$ref": "#/components/schemas/SSEToolEvent"}
        - {"$ref": "#/components/schemas/SSEToolParameterDeltaEvent"}
        - {"$ref": "#/components/schemas/SSEToolExecutionStartEvent"}
        - {"$ref": "#/components/schemas/SSEToolExecutionCompleteEvent"}
        - {"$ref": "#/components/schemas/SSEPermissionEvent"}
        - {"$ref": "#/components/schemas/SSESessionCreatedEvent"}
        - {"$ref": "#/components/schemas/SSESessionDeletedEvent"}
      type: "object"
    "SSEHeartbeatEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "type":
                  description: "Heartbeat type"
                  example: "ping"
                  type: "string"
              required:
                - "type"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEPermissionEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "action":
                  description: "Requested action description"
                  type: "string"
                "description":
                  description: "Human-readable permission description"
                  type: "string"
                "id":
                  description: "Permission request identifier"
                  type: "string"
                "params":
                  description: "Additional parameters for the permission request"
                  type: "object"
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "path":
                  description: "File path for permission request"
                  type: "string"
                "sessionId":
                  description: "Session identifier for the permission request"
                  type: "string"
                "toolName": {"$ref": "#/components/schemas/ToolName", "description": "Tool requiring permission"}
                "type":
                  description: "Permission event type"
                  type: "string"
              required:
                - "type"
                - "id"
                - "sessionId"
                - "toolName"
                - "description"
                - "action"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSESessionCreatedEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "createdAt":
                  description: "Unix timestamp when the session was created"
                  format: "int64"
                  type: "integer"
                "sessionId":
                  description: "ID of the newly created session"
                  type: "string"
                "title":
                  description: "Title of the newly created session"
                  type: "string"
                "type":
                  description: "Event type"
                  example: "session_created"
                  type: "string"
              required:
                - "type"
                - "sessionId"
                - "title"
                - "createdAt"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSESessionDeletedEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "sessionId":
                  description: "ID of the deleted session"
                  type: "string"
                "type":
                  description: "Event type"
                  example: "session_deleted"
                  type: "string"
              required:
                - "type"
                - "sessionId"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEThinkingEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "content":
                  description: "Thinking or reasoning content"
                  type: "string"
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "type":
                  description: "Thinking event type"
                  type: "string"
              required:
                - "type"
                - "content"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEToolEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "id":
                  description: "Tool execution identifier"
                  type: "string"
                "input":
                  description: "Tool input parameters"
                  type: "string"
                "name": {"$ref": "#/components/schemas/ToolName", "description": "Tool name being executed"}
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "status":
                  description: "Tool execution status"
                  type: "string"
                "type":
                  description: "Tool event type"
                  type: "string"
              required:
                - "type"
                - "name"
                - "input"
                - "id"
                - "status"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEToolExecutionCompleteEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "progress":
                  description: "Final execution progress description"
                  type: "string"
                "success":
                  description: "Indicates if tool execution succeeded"
                  type: "boolean"
                "toolCallId":
                  description: "Tool call identifier"
                  type: "string"
                "toolName": {"$ref": "#/components/schemas/ToolName", "description": "Name of the completed tool"}
                "type":
                  description: "Tool execution complete event type"
                  type: "string"
              required:
                - "type"
                - "toolName"
                - "progress"
                - "success"
                - "toolCallId"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEToolExecutionStartEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "progress":
                  description: "Execution progress description"
                  type: "string"
                "toolCallId":
                  description: "Tool call identifier"
                  type: "string"
                "toolName": {"$ref": "#/components/schemas/ToolName", "description": "Name of the tool being executed"}
                "type":
                  description: "Tool execution start event type"
                  type: "string"
              required:
                - "type"
                - "toolName"
                - "progress"
                - "toolCallId"
              type: "object"
          required:
            - "data"
          type: "object"
    "SSEToolParameterDeltaEvent":
      allOf:
        - {"$ref": "#/components/schemas/SSEBaseEvent"}
        - properties:
            "data":
              properties:
                "input":
                  description: "Partial JSON parameter delta - may not be parseable until complete"
                  type: "string"
                "parentToolCallId":
                  description: "ID of the parent tool call that spawned this subagent (for nested events)"
                  type: "string"
                "toolCallId":
                  description: "Tool call identifier for correlation"
                  type: "string"
                "type":
                  description: "Tool parameter delta event type"
                  type: "string"
              required:
                - "type"
                - "toolCallId"
                - "input"
              type: "object"
          required:
            - "data"
          type: "object"
    "SessionData":
      properties:
        "assistantMessageCount":
          description: "Number of assistant messages in session"
          type: "integer"
        "callbacks":
          description: "Session-level callback configurations (optional)"
          items: {"$ref": "#/components/schemas/Callback"}
          type: "array"
        "completionTokens":
          description: "Total completion tokens used"
          type: "integer"
        "cost":
          description: "Total cost of session (for subagent sessions, costs are also accumulated in parent session)"
          format: "double"
          type: "number"
        "createdAt":
          description: "Session creation timestamp"
          format: "date-time"
          type: "string"
        "firstUserMessage":
          description: "First user message (optional)"
          type: "string"
        "id":
          description: "Unique session identifier"
          type: "string"
        "parentSessionId":
          description: "Parent session ID for forked and subagent sessions (null for main sessions)"
          type: "string"
        "parentToolCallId":
          description: "ID of the tool call that spawned this subagent session (null for non-subagent sessions)"
          type: "string"
        "promptTokens":
          description: "Total prompt tokens used"
          type: "integer"
        "sessionType":
          description: "Session type:\n- 'main': Root-level user interactions\n- 'forked': User-created conversation branches\n- 'subagent': Delegated task workers"
          enum:
            - "main"
            - "forked"
            - "subagent"
          type: "string"
        "subagentType":
          description: "Subagent specialization type (only present for subagent sessions)"
          enum:
            - "general-purpose"
          type: "string"
        "title":
          description: "Session title"
          type: "string"
        "toolCallCount":
          description: "Number of tool calls made in session"
          type: "integer"
        "userMessageCount":
          description: "Number of user messages in session"
          type: "integer"
      required:
        - "id"
        - "title"
        - "sessionType"
        - "userMessageCount"
        - "assistantMessageCount"
        - "toolCallCount"
        - "promptTokens"
        - "completionTokens"
        - "cost"
        - "createdAt"
      type: "object"
    "ToolCallData":
      properties:
        "finished":
          description: "Whether tool call has finished"
          type: "boolean"
        "id":
          description: "Unique tool call identifier"
          type: "string"
        "input":
          description: "Tool input parameters"
          type: "string"
        "isError":
          description: "Whether tool call resulted in error (optional)"
          type: "boolean"
        "name": {"$ref": "#/components/schemas/ToolName", "description": "Tool name"}
        "result":
          description: "Tool execution result (optional)"
          type: "string"
        "type":
          description: "Tool type"
          type: "string"
      required:
        - "id"
        - "name"
        - "input"
        - "type"
        - "finished"
      type: "object"
    "ToolName":
      anyOf:
        - {"$ref": "#/components/schemas/CoreToolName"}
        - description: "MCP tool names following pattern: {serverName}_{toolName}"
          example: "brave_search"
          pattern: "^[a-zA-Z0-9_]+_[a-zA-Z0-9_]+$"
          type: "string"
      description: "Tool name - either a core tool or MCP tool following {serverName}_{toolName} pattern"
