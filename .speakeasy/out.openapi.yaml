openapi: "3.1.0"
info:
  title: "Mix REST API"
  description: "REST API for the Mix application - session management, messaging, and system operations"
  version: "1.0.0"
servers:
  - url: "http://localhost:8088"
    description: "Development server"
x-speakeasy-retries: {"backoff": {"exponent": 1.5, "initialInterval": 500, "maxElapsedTime": 600000, "maxInterval": 60000}, "retryConnectionErrors": true, "statusCodes": ["5XX", "408", "429"], "strategy": "backoff"}
paths:
  "/api/auth/apikey":
    post:
      description: "Set API key for direct authentication"
      operationId: "setApiKey"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "apiKey":
                  description: "API key for authentication"
                  type: "string"
              required:
                - "apiKey"
              type: "object"
        required: true
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "success":
                    description: "Whether API key was set successfully"
                    type: "boolean"
                type: "object"
          description: "API key set status"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid API key"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication failed"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Set API key"
      tags:
        - "Authentication"
      x-speakeasy-group: auth
  "/api/auth/login":
    post:
      description: "Initiate OAuth authentication flow"
      operationId: "initiateOAuthLogin"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "authUrl":
                    description: "OAuth authorization URL"
                    type: "string"
                type: "object"
          description: "Authentication URL"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication failed"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "OAuth authentication"
      tags:
        - "Authentication"
      x-speakeasy-name-override: "login"
  "/api/commands":
    get:
      description: "Retrieve list of all available commands"
      operationId: "listCommands"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items:
                  properties:
                    "description":
                      description: "Command description"
                      type: "string"
                    "name":
                      description: "Command name"
                      type: "string"
                  type: "object"
                type: "array"
          description: "List of commands"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "List available commands"
      tags:
        - "System"
  "/api/commands/{name}":
    get:
      description: "Retrieve details about a specific command"
      operationId: "getCommand"
      parameters:
        - description: "Command name"
          in: "path"
          name: "name"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "description":
                    description: "Command description"
                    type: "string"
                  "name":
                    description: "Command name"
                    type: "string"
                  "usage":
                    description: "Command usage instructions"
                    type: "string"
                type: "object"
          description: "Command details"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Command not found"
      summary: "Get specific command"
      tags:
        - "System"
  "/api/mcp":
    get:
      description: "Retrieve list of available Model Context Protocol (MCP) servers"
      operationId: "listMcpServers"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items:
                  properties:
                    "connected":
                      description: "Whether the MCP server is currently connected"
                      type: "boolean"
                    "name":
                      description: "MCP server name"
                      type: "string"
                    "status":
                      description: "Server connection status (e.g., 'connected', 'failed', 'disconnected')"
                      type: "string"
                    "tools":
                      description: "List of tools provided by this MCP server (null if server is not connected)"
                      items:
                        properties:
                          "description":
                            description: "Tool description"
                            type: "string"
                          "name":
                            description: "Tool name"
                            type: "string"
                        required:
                          - "name"
                          - "description"
                        type: "object"
                      nullable: true
                      type: "array"
                  required:
                    - "name"
                    - "connected"
                    - "status"
                  type: "object"
                type: "array"
          description: "List of MCP servers"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "List MCP servers"
      tags:
        - "System"
  "/api/messages/history":
    get:
      description: "Retrieve message history across all sessions with optional pagination"
      operationId: "getMessageHistory"
      parameters:
        - description: "Maximum number of messages to return"
          in: "query"
          name: "limit"
          schema:
            default: 50
            maximum: 1000
            minimum: 1
            type: "integer"
        - description: "Number of messages to skip"
          in: "query"
          name: "offset"
          schema:
            default: 0
            minimum: 0
            type: "integer"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/MessageData"}
                type: "array"
          description: "Message history"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Get global message history"
      tags:
        - "Messages"
      x-speakeasy-name-override: "getHistory"
  "/api/permissions/{id}/deny":
    post:
      description: "Deny a specific permission"
      operationId: "denyPermission"
      parameters:
        - description: "Permission ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "denied":
                    description: "Whether permission was denied"
                    type: "boolean"
                type: "object"
          description: "Permission deny status"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Permission not found"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Deny permission"
      tags:
        - "Permissions"
      x-speakeasy-name-override: "deny"
  "/api/permissions/{id}/grant":
    post:
      description: "Grant a specific permission"
      operationId: "grantPermission"
      parameters:
        - description: "Permission ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "granted":
                    description: "Whether permission was granted"
                    type: "boolean"
                type: "object"
          description: "Permission grant status"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Permission not found"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Grant permission"
      tags:
        - "Permissions"
      x-speakeasy-name-override: "grant"
  "/api/sessions":
    get:
      description: "Retrieve a list of all available sessions with their metadata"
      operationId: "listSessions"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/SessionData"}
                type: "array"
          description: "List of sessions"
        "401":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Unauthorized - authentication required"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "List all sessions"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "list"
    post:
      description: "Create a new session with required title and optional working directory"
      operationId: "createSession"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "title":
                  description: "Title for the session"
                  type: "string"
                "workingDirectory":
                  description: "Optional working directory path"
                  type: "string"
              required:
                - "title"
              type: "object"
        required: true
      responses:
        "201":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Created session"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request data"
      summary: "Create a new session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "create"
  "/api/sessions/{id}":
    delete:
      description: "Permanently delete a session and all its data"
      operationId: "deleteSession"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "Session deleted successfully"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Delete a session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "delete"
    get:
      description: "Retrieve detailed information about a specific session"
      operationId: "getSession"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Session details"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Get a specific session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "get"
  "/api/sessions/{id}/cancel":
    post:
      description: "Cancel any ongoing agent processing in the specified session"
      operationId: "cancelSessionProcessing"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "cancelled":
                    description: "Whether cancellation was successful"
                    type: "boolean"
                type: "object"
          description: "Cancellation status"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Cancel agent processing"
      tags:
        - "Messages"
      x-speakeasy-name-override: "cancelProcessing"
  "/api/sessions/{id}/fork":
    post:
      description: "Create a new session based on an existing session, copying messages up to a specified index"
      operationId: "forkSession"
      parameters:
        - description: "Source session ID to fork from"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "messageIndex":
                  description: "Index of the last message to include in the fork (1-based)"
                  minimum: 1
                  type: "integer"
                "title":
                  description: "Optional title for the forked session (defaults to 'Forked Session')"
                  type: "string"
              required:
                - "messageIndex"
              type: "object"
        required: true
      responses:
        "201":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SessionData"}
          description: "Forked session"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid request - messageIndex must be > 0"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Source session not found"
      summary: "Fork a session"
      tags:
        - "Sessions"
      x-speakeasy-name-override: "fork"
  "/api/sessions/{id}/messages":
    get:
      description: "Retrieve all messages from a specific session"
      operationId: "getSessionMessages"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          content:
            "application/json":
              schema:
                items: {"$ref": "#/components/schemas/MessageData"}
                type: "array"
          description: "List of session messages"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "List session messages"
      tags:
        - "Messages"
      x-speakeasy-name-override: "getSession"
    post:
      description: "Send a user message to a specific session for AI processing"
      operationId: "sendMessage"
      parameters:
        - description: "Session ID"
          in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema:
              properties:
                "content":
                  description: "Message content to send"
                  type: "string"
              required:
                - "content"
              type: "object"
        required: true
      responses:
        "200":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MessageData"}
          description: "Message sent and processed"
        "400":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Invalid message data"
        "404":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Session not found"
      summary: "Send a message to session"
      tags:
        - "Messages"
      x-speakeasy-name-override: "send"
  "/health":
    get:
      description: "Check server health and status"
      operationId: "healthCheck"
      responses:
        "200":
          content:
            "application/json":
              schema:
                properties:
                  "status":
                    description: "Health status"
                    type: "string"
                  "timestamp":
                    description: "Current timestamp"
                    type: "string"
                  "version":
                    description: "Application version"
                    type: "string"
                type: "object"
          description: "Health information"
        "500":
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ErrorResponse"}
          description: "Internal server error"
      summary: "Health check"
      tags:
        - "System"
components:
  schemas:
    "ErrorResponse":
      properties:
        "error": {"$ref": "#/components/schemas/RESTError"}
      required:
        - "error"
      type: "object"
    "MessageData":
      properties:
        "assistantResponse":
          description: "Assistant's response message (optional)"
          type: "string"
        "id":
          description: "Unique message identifier"
          type: "string"
        "reasoning":
          description: "Reasoning process (optional)"
          type: "string"
        "reasoningDuration":
          description: "Reasoning duration in milliseconds (optional)"
          type: "integer"
        "role": {"$ref": "#/components/schemas/MessageRole"}
        "sessionId":
          description: "Session identifier"
          type: "string"
        "toolCalls":
          description: "Tool calls made during message processing"
          items: {"$ref": "#/components/schemas/ToolCallData"}
          type: "array"
        "userInput":
          description: "User's input message"
          type: "string"
      required:
        - "id"
        - "sessionId"
        - "role"
        - "userInput"
      type: "object"
    "MessageRole":
      description: "Message role"
      enum:
        - "user"
        - "assistant"
        - "tool"
      type: "string"
    "RESTError":
      properties:
        "code":
          description: "HTTP status code"
          type: "integer"
        "message":
          description: "Error message"
          type: "string"
        "type":
          description: "Error type"
          enum:
            - "bad_request"
            - "not_found"
            - "internal_error"
            - "unauthorized"
            - "validation_error"
          type: "string"
      required:
        - "code"
        - "message"
        - "type"
      type: "object"
    "SessionData":
      properties:
        "assistantMessageCount":
          description: "Number of assistant messages in session"
          type: "integer"
        "completionTokens":
          description: "Total completion tokens used"
          type: "integer"
        "cost":
          description: "Total cost of session"
          format: "double"
          type: "number"
        "createdAt":
          description: "Session creation timestamp"
          format: "date-time"
          type: "string"
        "firstUserMessage":
          description: "First user message (optional)"
          type: "string"
        "id":
          description: "Unique session identifier"
          type: "string"
        "promptTokens":
          description: "Total prompt tokens used"
          type: "integer"
        "title":
          description: "Session title"
          type: "string"
        "toolCallCount":
          description: "Number of tool calls made in session"
          type: "integer"
        "userMessageCount":
          description: "Number of user messages in session"
          type: "integer"
        "workingDirectory":
          description: "Working directory path (optional)"
          type: "string"
      required:
        - "id"
        - "title"
        - "userMessageCount"
        - "assistantMessageCount"
        - "toolCallCount"
        - "promptTokens"
        - "completionTokens"
        - "cost"
        - "createdAt"
      type: "object"
    "ToolCallData":
      properties:
        "finished":
          description: "Whether tool call has finished"
          type: "boolean"
        "id":
          description: "Unique tool call identifier"
          type: "string"
        "input":
          description: "Tool input parameters"
          type: "string"
        "isError":
          description: "Whether tool call resulted in error (optional)"
          type: "boolean"
        "name":
          description: "Tool name"
          type: "string"
        "result":
          description: "Tool execution result (optional)"
          type: "string"
        "type":
          description: "Tool type"
          type: "string"
      required:
        - "id"
        - "name"
        - "input"
        - "type"
        - "finished"
      type: "object"
