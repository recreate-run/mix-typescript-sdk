/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Callback type: 'bash_script' for shell commands, 'sub_agent' for spawning sub-agents
 */
export const CallbackType = {
  BashScript: "bash_script",
  SubAgent: "sub_agent",
} as const;
/**
 * Callback type: 'bash_script' for shell commands, 'sub_agent' for spawning sub-agents
 */
export type CallbackType = ClosedEnum<typeof CallbackType>;

/**
 * Session-level callback configuration that executes after tool completion
 */
export type Callback = {
  /**
   * Bash command to execute (required for bash_script type). Has access to environment variables.
   */
  bashCommand?: string | undefined;
  /**
   * Timeout in milliseconds for bash execution (default: 120000)
   */
  bashTimeout?: number | undefined;
  /**
   * Include full conversation history in sub-agent context (not yet implemented)
   */
  includeFullHistory?: boolean | undefined;
  /**
   * Human-readable name for this callback (optional, defaults to 'Callback #XXXX')
   */
  name?: string | undefined;
  /**
   * Run callback asynchronously without waiting for completion
   */
  nonBlocking?: boolean | undefined;
  /**
   * Prompt for the sub-agent (required for sub_agent type). Tool execution context is automatically appended.
   */
  subAgentPrompt?: string | undefined;
  /**
   * Type of sub-agent to spawn (default: 'general-purpose')
   */
  subAgentType?: string | undefined;
  /**
   * Tool to attach callback to (e.g., 'show_media', 'bash', '*' for all tools)
   */
  toolName: string;
  /**
   * Callback type: 'bash_script' for shell commands, 'sub_agent' for spawning sub-agents
   */
  type: CallbackType;
};

/** @internal */
export const CallbackType$inboundSchema: z.ZodNativeEnum<typeof CallbackType> =
  z.nativeEnum(CallbackType);

/** @internal */
export const CallbackType$outboundSchema: z.ZodNativeEnum<typeof CallbackType> =
  CallbackType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallbackType$ {
  /** @deprecated use `CallbackType$inboundSchema` instead. */
  export const inboundSchema = CallbackType$inboundSchema;
  /** @deprecated use `CallbackType$outboundSchema` instead. */
  export const outboundSchema = CallbackType$outboundSchema;
}

/** @internal */
export const Callback$inboundSchema: z.ZodType<
  Callback,
  z.ZodTypeDef,
  unknown
> = z.object({
  bashCommand: z.string().optional(),
  bashTimeout: z.number().int().default(120000),
  includeFullHistory: z.boolean().default(false),
  name: z.string().optional(),
  nonBlocking: z.boolean().default(false),
  subAgentPrompt: z.string().optional(),
  subAgentType: z.string().default("general-purpose"),
  toolName: z.string(),
  type: CallbackType$inboundSchema,
});

/** @internal */
export type Callback$Outbound = {
  bashCommand?: string | undefined;
  bashTimeout: number;
  includeFullHistory: boolean;
  name?: string | undefined;
  nonBlocking: boolean;
  subAgentPrompt?: string | undefined;
  subAgentType: string;
  toolName: string;
  type: string;
};

/** @internal */
export const Callback$outboundSchema: z.ZodType<
  Callback$Outbound,
  z.ZodTypeDef,
  Callback
> = z.object({
  bashCommand: z.string().optional(),
  bashTimeout: z.number().int().default(120000),
  includeFullHistory: z.boolean().default(false),
  name: z.string().optional(),
  nonBlocking: z.boolean().default(false),
  subAgentPrompt: z.string().optional(),
  subAgentType: z.string().default("general-purpose"),
  toolName: z.string(),
  type: CallbackType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Callback$ {
  /** @deprecated use `Callback$inboundSchema` instead. */
  export const inboundSchema = Callback$inboundSchema;
  /** @deprecated use `Callback$outboundSchema` instead. */
  export const outboundSchema = Callback$outboundSchema;
  /** @deprecated use `Callback$Outbound` instead. */
  export type Outbound = Callback$Outbound;
}

export function callbackToJSON(callback: Callback): string {
  return JSON.stringify(Callback$outboundSchema.parse(callback));
}

export function callbackFromJSON(
  jsonString: string,
): SafeParseResult<Callback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Callback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Callback' from JSON`,
  );
}
