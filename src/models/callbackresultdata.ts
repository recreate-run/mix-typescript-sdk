/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of callback executed
 */
export const CallbackResultDataCallbackType = {
  BashScript: "bash_script",
  SubAgent: "sub_agent",
  SendMessage: "send_message",
} as const;
/**
 * Type of callback executed
 */
export type CallbackResultDataCallbackType = ClosedEnum<
  typeof CallbackResultDataCallbackType
>;

/**
 * Callback execution result information
 */
export type CallbackResultData = {
  /**
   * Human-readable name of the callback (optional)
   */
  callbackName?: string | undefined;
  /**
   * Type of callback executed
   */
  callbackType: CallbackResultDataCallbackType;
  /**
   * Error message if callback failed (optional)
   */
  error?: string | undefined;
  /**
   * Whether this callback result is excluded from agent context (optional)
   */
  excludeFromContext?: boolean | undefined;
  /**
   * Exit code from bash callback (optional)
   */
  exitCode?: number | undefined;
  /**
   * Standard error from bash callback (optional)
   */
  stderr?: string | undefined;
  /**
   * Standard output from bash callback (optional)
   */
  stdout?: string | undefined;
  /**
   * ID of spawned sub-agent session (optional)
   */
  subagentId?: string | undefined;
  /**
   * Result from sub-agent execution (optional)
   */
  subagentResult?: string | undefined;
  /**
   * Whether callback executed successfully
   */
  success: boolean;
  /**
   * ID of the tool call that triggered this callback
   */
  toolCallId: string;
  /**
   * Name of the tool that triggered callback
   */
  toolName: string;
};

/** @internal */
export const CallbackResultDataCallbackType$inboundSchema: z.ZodNativeEnum<
  typeof CallbackResultDataCallbackType
> = z.nativeEnum(CallbackResultDataCallbackType);

/** @internal */
export const CallbackResultDataCallbackType$outboundSchema: z.ZodNativeEnum<
  typeof CallbackResultDataCallbackType
> = CallbackResultDataCallbackType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallbackResultDataCallbackType$ {
  /** @deprecated use `CallbackResultDataCallbackType$inboundSchema` instead. */
  export const inboundSchema = CallbackResultDataCallbackType$inboundSchema;
  /** @deprecated use `CallbackResultDataCallbackType$outboundSchema` instead. */
  export const outboundSchema = CallbackResultDataCallbackType$outboundSchema;
}

/** @internal */
export const CallbackResultData$inboundSchema: z.ZodType<
  CallbackResultData,
  z.ZodTypeDef,
  unknown
> = z.object({
  callback_name: z.string().optional(),
  callback_type: CallbackResultDataCallbackType$inboundSchema,
  error: z.string().optional(),
  exclude_from_context: z.boolean().optional(),
  exit_code: z.number().int().optional(),
  stderr: z.string().optional(),
  stdout: z.string().optional(),
  subagent_id: z.string().optional(),
  subagent_result: z.string().optional(),
  success: z.boolean(),
  tool_call_id: z.string(),
  tool_name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "callback_name": "callbackName",
    "callback_type": "callbackType",
    "exclude_from_context": "excludeFromContext",
    "exit_code": "exitCode",
    "subagent_id": "subagentId",
    "subagent_result": "subagentResult",
    "tool_call_id": "toolCallId",
    "tool_name": "toolName",
  });
});

/** @internal */
export type CallbackResultData$Outbound = {
  callback_name?: string | undefined;
  callback_type: string;
  error?: string | undefined;
  exclude_from_context?: boolean | undefined;
  exit_code?: number | undefined;
  stderr?: string | undefined;
  stdout?: string | undefined;
  subagent_id?: string | undefined;
  subagent_result?: string | undefined;
  success: boolean;
  tool_call_id: string;
  tool_name: string;
};

/** @internal */
export const CallbackResultData$outboundSchema: z.ZodType<
  CallbackResultData$Outbound,
  z.ZodTypeDef,
  CallbackResultData
> = z.object({
  callbackName: z.string().optional(),
  callbackType: CallbackResultDataCallbackType$outboundSchema,
  error: z.string().optional(),
  excludeFromContext: z.boolean().optional(),
  exitCode: z.number().int().optional(),
  stderr: z.string().optional(),
  stdout: z.string().optional(),
  subagentId: z.string().optional(),
  subagentResult: z.string().optional(),
  success: z.boolean(),
  toolCallId: z.string(),
  toolName: z.string(),
}).transform((v) => {
  return remap$(v, {
    callbackName: "callback_name",
    callbackType: "callback_type",
    excludeFromContext: "exclude_from_context",
    exitCode: "exit_code",
    subagentId: "subagent_id",
    subagentResult: "subagent_result",
    toolCallId: "tool_call_id",
    toolName: "tool_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallbackResultData$ {
  /** @deprecated use `CallbackResultData$inboundSchema` instead. */
  export const inboundSchema = CallbackResultData$inboundSchema;
  /** @deprecated use `CallbackResultData$outboundSchema` instead. */
  export const outboundSchema = CallbackResultData$outboundSchema;
  /** @deprecated use `CallbackResultData$Outbound` instead. */
  export type Outbound = CallbackResultData$Outbound;
}

export function callbackResultDataToJSON(
  callbackResultData: CallbackResultData,
): string {
  return JSON.stringify(
    CallbackResultData$outboundSchema.parse(callbackResultData),
  );
}

export function callbackResultDataFromJSON(
  jsonString: string,
): SafeParseResult<CallbackResultData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallbackResultData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallbackResultData' from JSON`,
  );
}
