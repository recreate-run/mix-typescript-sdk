/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { MixError } from "./mixerror.js";

export type RESTResponseErrorData = {
  /**
   * Response data
   */
  data?: any | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

export class RESTResponseError extends MixError {
  /**
   * Response data
   */
  data?: any | undefined;
  error?: models.RESTError | undefined;

  /** The original data that was passed to this error instance. */
  data$: RESTResponseErrorData;

  constructor(
    err: RESTResponseErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.data != null) this.data = err.data;
    if (err.error != null) this.error = err.error;

    this.name = "RESTResponseError";
  }
}

/** @internal */
export const RESTResponseError$inboundSchema: z.ZodType<
  RESTResponseError,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.any().optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new RESTResponseError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type RESTResponseError$Outbound = {
  data?: any | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const RESTResponseError$outboundSchema: z.ZodType<
  RESTResponseError$Outbound,
  z.ZodTypeDef,
  RESTResponseError
> = z.instanceof(RESTResponseError)
  .transform(v => v.data$)
  .pipe(z.object({
    data: z.any().optional(),
    error: models.RESTError$outboundSchema.optional(),
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RESTResponseError$ {
  /** @deprecated use `RESTResponseError$inboundSchema` instead. */
  export const inboundSchema = RESTResponseError$inboundSchema;
  /** @deprecated use `RESTResponseError$outboundSchema` instead. */
  export const outboundSchema = RESTResponseError$outboundSchema;
  /** @deprecated use `RESTResponseError$Outbound` instead. */
  export type Outbound = RESTResponseError$Outbound;
}
