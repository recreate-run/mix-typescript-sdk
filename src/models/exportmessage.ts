/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExportToolCall,
  ExportToolCall$inboundSchema,
  ExportToolCall$Outbound,
  ExportToolCall$outboundSchema,
} from "./exporttoolcall.js";

/**
 * Complete message information for export
 */
export type ExportMessage = {
  /**
   * Message content
   */
  content: string;
  /**
   * Message creation timestamp
   */
  createdAt: Date;
  /**
   * Completion finish reason (optional)
   */
  finishReason?: string | undefined;
  /**
   * Message identifier
   */
  id: string;
  /**
   * Model used for this message (optional)
   */
  model?: string | undefined;
  /**
   * Reasoning content (optional)
   */
  reasoning?: string | undefined;
  /**
   * Reasoning duration in milliseconds (optional)
   */
  reasoningDuration?: number | undefined;
  /**
   * Message role (user, assistant, tool)
   */
  role: string;
  /**
   * Tool calls with complete information
   */
  toolCalls?: Array<ExportToolCall> | undefined;
  /**
   * Message update timestamp
   */
  updatedAt: Date;
};

/** @internal */
export const ExportMessage$inboundSchema: z.ZodType<
  ExportMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finishReason: z.string().optional(),
  id: z.string(),
  model: z.string().optional(),
  reasoning: z.string().optional(),
  reasoningDuration: z.number().int().optional(),
  role: z.string(),
  toolCalls: z.array(ExportToolCall$inboundSchema).optional(),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type ExportMessage$Outbound = {
  content: string;
  createdAt: string;
  finishReason?: string | undefined;
  id: string;
  model?: string | undefined;
  reasoning?: string | undefined;
  reasoningDuration?: number | undefined;
  role: string;
  toolCalls?: Array<ExportToolCall$Outbound> | undefined;
  updatedAt: string;
};

/** @internal */
export const ExportMessage$outboundSchema: z.ZodType<
  ExportMessage$Outbound,
  z.ZodTypeDef,
  ExportMessage
> = z.object({
  content: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  finishReason: z.string().optional(),
  id: z.string(),
  model: z.string().optional(),
  reasoning: z.string().optional(),
  reasoningDuration: z.number().int().optional(),
  role: z.string(),
  toolCalls: z.array(ExportToolCall$outboundSchema).optional(),
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportMessage$ {
  /** @deprecated use `ExportMessage$inboundSchema` instead. */
  export const inboundSchema = ExportMessage$inboundSchema;
  /** @deprecated use `ExportMessage$outboundSchema` instead. */
  export const outboundSchema = ExportMessage$outboundSchema;
  /** @deprecated use `ExportMessage$Outbound` instead. */
  export type Outbound = ExportMessage$Outbound;
}

export function exportMessageToJSON(exportMessage: ExportMessage): string {
  return JSON.stringify(ExportMessage$outboundSchema.parse(exportMessage));
}

export function exportMessageFromJSON(
  jsonString: string,
): SafeParseResult<ExportMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportMessage' from JSON`,
  );
}
