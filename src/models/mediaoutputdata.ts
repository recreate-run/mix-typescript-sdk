/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Media configuration (optional)
 */
export type Config = {};

/**
 * Media output information from show_media tool calls
 */
export type MediaOutputData = {
  /**
   * Media configuration (optional)
   */
  config?: Config | undefined;
  /**
   * Media description (optional)
   */
  description?: string | undefined;
  /**
   * Duration in milliseconds for video/audio (optional)
   */
  duration?: number | undefined;
  /**
   * Path to the media file
   */
  path: string;
  /**
   * Start time in milliseconds for video/audio (optional)
   */
  startTime?: number | undefined;
  /**
   * Media title
   */
  title: string;
  /**
   * Media type (image, video, audio, gsap_animation, pdf, csv)
   */
  type: string;
};

/** @internal */
export const Config$inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Config$Outbound = {};

/** @internal */
export const Config$outboundSchema: z.ZodType<
  Config$Outbound,
  z.ZodTypeDef,
  Config
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Config$ {
  /** @deprecated use `Config$inboundSchema` instead. */
  export const inboundSchema = Config$inboundSchema;
  /** @deprecated use `Config$outboundSchema` instead. */
  export const outboundSchema = Config$outboundSchema;
  /** @deprecated use `Config$Outbound` instead. */
  export type Outbound = Config$Outbound;
}

export function configToJSON(config: Config): string {
  return JSON.stringify(Config$outboundSchema.parse(config));
}

export function configFromJSON(
  jsonString: string,
): SafeParseResult<Config, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Config$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Config' from JSON`,
  );
}

/** @internal */
export const MediaOutputData$inboundSchema: z.ZodType<
  MediaOutputData,
  z.ZodTypeDef,
  unknown
> = z.object({
  config: z.lazy(() => Config$inboundSchema).optional(),
  description: z.string().optional(),
  duration: z.number().int().optional(),
  path: z.string(),
  startTime: z.number().int().optional(),
  title: z.string(),
  type: z.string(),
});

/** @internal */
export type MediaOutputData$Outbound = {
  config?: Config$Outbound | undefined;
  description?: string | undefined;
  duration?: number | undefined;
  path: string;
  startTime?: number | undefined;
  title: string;
  type: string;
};

/** @internal */
export const MediaOutputData$outboundSchema: z.ZodType<
  MediaOutputData$Outbound,
  z.ZodTypeDef,
  MediaOutputData
> = z.object({
  config: z.lazy(() => Config$outboundSchema).optional(),
  description: z.string().optional(),
  duration: z.number().int().optional(),
  path: z.string(),
  startTime: z.number().int().optional(),
  title: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MediaOutputData$ {
  /** @deprecated use `MediaOutputData$inboundSchema` instead. */
  export const inboundSchema = MediaOutputData$inboundSchema;
  /** @deprecated use `MediaOutputData$outboundSchema` instead. */
  export const outboundSchema = MediaOutputData$outboundSchema;
  /** @deprecated use `MediaOutputData$Outbound` instead. */
  export type Outbound = MediaOutputData$Outbound;
}

export function mediaOutputDataToJSON(
  mediaOutputData: MediaOutputData,
): string {
  return JSON.stringify(MediaOutputData$outboundSchema.parse(mediaOutputData));
}

export function mediaOutputDataFromJSON(
  jsonString: string,
): SafeParseResult<MediaOutputData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MediaOutputData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MediaOutputData' from JSON`,
  );
}
