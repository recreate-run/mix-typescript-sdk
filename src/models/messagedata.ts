/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MessageRole,
  MessageRole$inboundSchema,
  MessageRole$outboundSchema,
} from "./messagerole.js";
import {
  ToolCallData,
  ToolCallData$inboundSchema,
  ToolCallData$Outbound,
  ToolCallData$outboundSchema,
} from "./toolcalldata.js";

export type MessageData = {
  /**
   * Message content
   */
  content: string;
  /**
   * Unique message identifier
   */
  id: string;
  /**
   * Reasoning process (optional)
   */
  reasoning?: string | undefined;
  /**
   * Reasoning duration in milliseconds (optional)
   */
  reasoningDuration?: number | undefined;
  /**
   * Assistant response (optional)
   */
  response?: string | undefined;
  /**
   * Message role
   */
  role: MessageRole;
  /**
   * Session identifier
   */
  sessionId: string;
  /**
   * Tool calls made during message processing
   */
  toolCalls?: Array<ToolCallData> | undefined;
};

/** @internal */
export const MessageData$inboundSchema: z.ZodType<
  MessageData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  id: z.string(),
  reasoning: z.string().optional(),
  reasoningDuration: z.number().int().optional(),
  response: z.string().optional(),
  role: MessageRole$inboundSchema,
  sessionId: z.string(),
  toolCalls: z.array(ToolCallData$inboundSchema).optional(),
});

/** @internal */
export type MessageData$Outbound = {
  content: string;
  id: string;
  reasoning?: string | undefined;
  reasoningDuration?: number | undefined;
  response?: string | undefined;
  role: string;
  sessionId: string;
  toolCalls?: Array<ToolCallData$Outbound> | undefined;
};

/** @internal */
export const MessageData$outboundSchema: z.ZodType<
  MessageData$Outbound,
  z.ZodTypeDef,
  MessageData
> = z.object({
  content: z.string(),
  id: z.string(),
  reasoning: z.string().optional(),
  reasoningDuration: z.number().int().optional(),
  response: z.string().optional(),
  role: MessageRole$outboundSchema,
  sessionId: z.string(),
  toolCalls: z.array(ToolCallData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageData$ {
  /** @deprecated use `MessageData$inboundSchema` instead. */
  export const inboundSchema = MessageData$inboundSchema;
  /** @deprecated use `MessageData$outboundSchema` instead. */
  export const outboundSchema = MessageData$outboundSchema;
  /** @deprecated use `MessageData$Outbound` instead. */
  export type Outbound = MessageData$Outbound;
}

export function messageDataToJSON(messageData: MessageData): string {
  return JSON.stringify(MessageData$outboundSchema.parse(messageData));
}

export function messageDataFromJSON(
  jsonString: string,
): SafeParseResult<MessageData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageData' from JSON`,
  );
}
