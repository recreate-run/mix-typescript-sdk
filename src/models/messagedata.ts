/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Message data structure for user input
 */
export type MessageData = {
  /**
   * Array of app identifiers or references
   */
  apps?: Array<string> | undefined;
  /**
   * Array of media file references or URLs
   */
  media?: Array<string> | undefined;
  /**
   * Whether the message is in planning mode
   */
  planMode?: boolean | undefined;
  /**
   * The text content of the message
   */
  text: string;
};

/** @internal */
export const MessageData$inboundSchema: z.ZodType<
  MessageData,
  z.ZodTypeDef,
  unknown
> = z.object({
  apps: z.array(z.string()).optional(),
  media: z.array(z.string()).optional(),
  plan_mode: z.boolean().optional(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    "plan_mode": "planMode",
  });
});

/** @internal */
export type MessageData$Outbound = {
  apps?: Array<string> | undefined;
  media?: Array<string> | undefined;
  plan_mode?: boolean | undefined;
  text: string;
};

/** @internal */
export const MessageData$outboundSchema: z.ZodType<
  MessageData$Outbound,
  z.ZodTypeDef,
  MessageData
> = z.object({
  apps: z.array(z.string()).optional(),
  media: z.array(z.string()).optional(),
  planMode: z.boolean().optional(),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    planMode: "plan_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageData$ {
  /** @deprecated use `MessageData$inboundSchema` instead. */
  export const inboundSchema = MessageData$inboundSchema;
  /** @deprecated use `MessageData$outboundSchema` instead. */
  export const outboundSchema = MessageData$outboundSchema;
  /** @deprecated use `MessageData$Outbound` instead. */
  export type Outbound = MessageData$Outbound;
}

export function messageDataToJSON(messageData: MessageData): string {
  return JSON.stringify(MessageData$outboundSchema.parse(messageData));
}

export function messageDataFromJSON(
  jsonString: string,
): SafeParseResult<MessageData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageData' from JSON`,
  );
}
