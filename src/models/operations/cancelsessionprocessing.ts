/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CancelSessionProcessingRequest = {
  /**
   * Session ID
   */
  id: string;
};

export type CancelSessionProcessingData = {
  /**
   * Whether cancellation was successful
   */
  cancelled?: boolean | undefined;
};

/**
 * Cancellation status
 */
export type CancelSessionProcessingResponse = {
  data?: CancelSessionProcessingData | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const CancelSessionProcessingRequest$inboundSchema: z.ZodType<
  CancelSessionProcessingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CancelSessionProcessingRequest$Outbound = {
  id: string;
};

/** @internal */
export const CancelSessionProcessingRequest$outboundSchema: z.ZodType<
  CancelSessionProcessingRequest$Outbound,
  z.ZodTypeDef,
  CancelSessionProcessingRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelSessionProcessingRequest$ {
  /** @deprecated use `CancelSessionProcessingRequest$inboundSchema` instead. */
  export const inboundSchema = CancelSessionProcessingRequest$inboundSchema;
  /** @deprecated use `CancelSessionProcessingRequest$outboundSchema` instead. */
  export const outboundSchema = CancelSessionProcessingRequest$outboundSchema;
  /** @deprecated use `CancelSessionProcessingRequest$Outbound` instead. */
  export type Outbound = CancelSessionProcessingRequest$Outbound;
}

export function cancelSessionProcessingRequestToJSON(
  cancelSessionProcessingRequest: CancelSessionProcessingRequest,
): string {
  return JSON.stringify(
    CancelSessionProcessingRequest$outboundSchema.parse(
      cancelSessionProcessingRequest,
    ),
  );
}

export function cancelSessionProcessingRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelSessionProcessingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelSessionProcessingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelSessionProcessingRequest' from JSON`,
  );
}

/** @internal */
export const CancelSessionProcessingData$inboundSchema: z.ZodType<
  CancelSessionProcessingData,
  z.ZodTypeDef,
  unknown
> = z.object({
  cancelled: z.boolean().optional(),
});

/** @internal */
export type CancelSessionProcessingData$Outbound = {
  cancelled?: boolean | undefined;
};

/** @internal */
export const CancelSessionProcessingData$outboundSchema: z.ZodType<
  CancelSessionProcessingData$Outbound,
  z.ZodTypeDef,
  CancelSessionProcessingData
> = z.object({
  cancelled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelSessionProcessingData$ {
  /** @deprecated use `CancelSessionProcessingData$inboundSchema` instead. */
  export const inboundSchema = CancelSessionProcessingData$inboundSchema;
  /** @deprecated use `CancelSessionProcessingData$outboundSchema` instead. */
  export const outboundSchema = CancelSessionProcessingData$outboundSchema;
  /** @deprecated use `CancelSessionProcessingData$Outbound` instead. */
  export type Outbound = CancelSessionProcessingData$Outbound;
}

export function cancelSessionProcessingDataToJSON(
  cancelSessionProcessingData: CancelSessionProcessingData,
): string {
  return JSON.stringify(
    CancelSessionProcessingData$outboundSchema.parse(
      cancelSessionProcessingData,
    ),
  );
}

export function cancelSessionProcessingDataFromJSON(
  jsonString: string,
): SafeParseResult<CancelSessionProcessingData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelSessionProcessingData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelSessionProcessingData' from JSON`,
  );
}

/** @internal */
export const CancelSessionProcessingResponse$inboundSchema: z.ZodType<
  CancelSessionProcessingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CancelSessionProcessingData$inboundSchema).optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type CancelSessionProcessingResponse$Outbound = {
  data?: CancelSessionProcessingData$Outbound | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const CancelSessionProcessingResponse$outboundSchema: z.ZodType<
  CancelSessionProcessingResponse$Outbound,
  z.ZodTypeDef,
  CancelSessionProcessingResponse
> = z.object({
  data: z.lazy(() => CancelSessionProcessingData$outboundSchema).optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelSessionProcessingResponse$ {
  /** @deprecated use `CancelSessionProcessingResponse$inboundSchema` instead. */
  export const inboundSchema = CancelSessionProcessingResponse$inboundSchema;
  /** @deprecated use `CancelSessionProcessingResponse$outboundSchema` instead. */
  export const outboundSchema = CancelSessionProcessingResponse$outboundSchema;
  /** @deprecated use `CancelSessionProcessingResponse$Outbound` instead. */
  export type Outbound = CancelSessionProcessingResponse$Outbound;
}

export function cancelSessionProcessingResponseToJSON(
  cancelSessionProcessingResponse: CancelSessionProcessingResponse,
): string {
  return JSON.stringify(
    CancelSessionProcessingResponse$outboundSchema.parse(
      cancelSessionProcessingResponse,
    ),
  );
}

export function cancelSessionProcessingResponseFromJSON(
  jsonString: string,
): SafeParseResult<CancelSessionProcessingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelSessionProcessingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelSessionProcessingResponse' from JSON`,
  );
}
