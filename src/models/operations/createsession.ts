/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateSessionRequest = {
  /**
   * Optional title for the session
   */
  title?: string | undefined;
  /**
   * Optional working directory path
   */
  workingDirectory?: string | undefined;
};

/**
 * Created session
 */
export type CreateSessionResponse = {
  data?: models.SessionData | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const CreateSessionRequest$inboundSchema: z.ZodType<
  CreateSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  workingDirectory: z.string().optional(),
});

/** @internal */
export type CreateSessionRequest$Outbound = {
  title?: string | undefined;
  workingDirectory?: string | undefined;
};

/** @internal */
export const CreateSessionRequest$outboundSchema: z.ZodType<
  CreateSessionRequest$Outbound,
  z.ZodTypeDef,
  CreateSessionRequest
> = z.object({
  title: z.string().optional(),
  workingDirectory: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSessionRequest$ {
  /** @deprecated use `CreateSessionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSessionRequest$inboundSchema;
  /** @deprecated use `CreateSessionRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSessionRequest$outboundSchema;
  /** @deprecated use `CreateSessionRequest$Outbound` instead. */
  export type Outbound = CreateSessionRequest$Outbound;
}

export function createSessionRequestToJSON(
  createSessionRequest: CreateSessionRequest,
): string {
  return JSON.stringify(
    CreateSessionRequest$outboundSchema.parse(createSessionRequest),
  );
}

export function createSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSessionRequest' from JSON`,
  );
}

/** @internal */
export const CreateSessionResponse$inboundSchema: z.ZodType<
  CreateSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: models.SessionData$inboundSchema.optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type CreateSessionResponse$Outbound = {
  data?: models.SessionData$Outbound | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const CreateSessionResponse$outboundSchema: z.ZodType<
  CreateSessionResponse$Outbound,
  z.ZodTypeDef,
  CreateSessionResponse
> = z.object({
  data: models.SessionData$outboundSchema.optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSessionResponse$ {
  /** @deprecated use `CreateSessionResponse$inboundSchema` instead. */
  export const inboundSchema = CreateSessionResponse$inboundSchema;
  /** @deprecated use `CreateSessionResponse$outboundSchema` instead. */
  export const outboundSchema = CreateSessionResponse$outboundSchema;
  /** @deprecated use `CreateSessionResponse$Outbound` instead. */
  export type Outbound = CreateSessionResponse$Outbound;
}

export function createSessionResponseToJSON(
  createSessionResponse: CreateSessionResponse,
): string {
  return JSON.stringify(
    CreateSessionResponse$outboundSchema.parse(createSessionResponse),
  );
}

export function createSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSessionResponse' from JSON`,
  );
}
