/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCredentialsRequest = {
  /**
   * Provider name (anthropic, openai, openrouter, gemini, brave)
   */
  provider: string;
};

/**
 * Credentials deletion status
 */
export type DeleteCredentialsResponse = {
  /**
   * Status message
   */
  message?: string | undefined;
  /**
   * Provider name
   */
  provider?: string | undefined;
  /**
   * Operation status
   */
  status?: string | undefined;
};

/** @internal */
export const DeleteCredentialsRequest$inboundSchema: z.ZodType<
  DeleteCredentialsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
});

/** @internal */
export type DeleteCredentialsRequest$Outbound = {
  provider: string;
};

/** @internal */
export const DeleteCredentialsRequest$outboundSchema: z.ZodType<
  DeleteCredentialsRequest$Outbound,
  z.ZodTypeDef,
  DeleteCredentialsRequest
> = z.object({
  provider: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCredentialsRequest$ {
  /** @deprecated use `DeleteCredentialsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCredentialsRequest$inboundSchema;
  /** @deprecated use `DeleteCredentialsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCredentialsRequest$outboundSchema;
  /** @deprecated use `DeleteCredentialsRequest$Outbound` instead. */
  export type Outbound = DeleteCredentialsRequest$Outbound;
}

export function deleteCredentialsRequestToJSON(
  deleteCredentialsRequest: DeleteCredentialsRequest,
): string {
  return JSON.stringify(
    DeleteCredentialsRequest$outboundSchema.parse(deleteCredentialsRequest),
  );
}

export function deleteCredentialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCredentialsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCredentialsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCredentialsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteCredentialsResponse$inboundSchema: z.ZodType<
  DeleteCredentialsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type DeleteCredentialsResponse$Outbound = {
  message?: string | undefined;
  provider?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const DeleteCredentialsResponse$outboundSchema: z.ZodType<
  DeleteCredentialsResponse$Outbound,
  z.ZodTypeDef,
  DeleteCredentialsResponse
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCredentialsResponse$ {
  /** @deprecated use `DeleteCredentialsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteCredentialsResponse$inboundSchema;
  /** @deprecated use `DeleteCredentialsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteCredentialsResponse$outboundSchema;
  /** @deprecated use `DeleteCredentialsResponse$Outbound` instead. */
  export type Outbound = DeleteCredentialsResponse$Outbound;
}

export function deleteCredentialsResponseToJSON(
  deleteCredentialsResponse: DeleteCredentialsResponse,
): string {
  return JSON.stringify(
    DeleteCredentialsResponse$outboundSchema.parse(deleteCredentialsResponse),
  );
}

export function deleteCredentialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCredentialsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCredentialsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCredentialsResponse' from JSON`,
  );
}
