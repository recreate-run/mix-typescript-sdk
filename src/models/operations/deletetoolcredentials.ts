/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteToolCredentialsRequest = {
  /**
   * Tool category type (web_search, multimodal_analyzer)
   */
  toolType: string;
  /**
   * Tool provider name (e.g., brave, gemini)
   */
  provider: string;
};

/**
 * Tool API key deleted successfully
 */
export type DeleteToolCredentialsResponse = {
  /**
   * Success message
   */
  message?: string | undefined;
  /**
   * Tool provider name
   */
  provider?: string | undefined;
  /**
   * Operation status (success)
   */
  status?: string | undefined;
  /**
   * Tool category type
   */
  toolType?: string | undefined;
};

/** @internal */
export const DeleteToolCredentialsRequest$inboundSchema: z.ZodType<
  DeleteToolCredentialsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_type: z.string(),
  provider: z.string(),
}).transform((v) => {
  return remap$(v, {
    "tool_type": "toolType",
  });
});

/** @internal */
export type DeleteToolCredentialsRequest$Outbound = {
  tool_type: string;
  provider: string;
};

/** @internal */
export const DeleteToolCredentialsRequest$outboundSchema: z.ZodType<
  DeleteToolCredentialsRequest$Outbound,
  z.ZodTypeDef,
  DeleteToolCredentialsRequest
> = z.object({
  toolType: z.string(),
  provider: z.string(),
}).transform((v) => {
  return remap$(v, {
    toolType: "tool_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteToolCredentialsRequest$ {
  /** @deprecated use `DeleteToolCredentialsRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteToolCredentialsRequest$inboundSchema;
  /** @deprecated use `DeleteToolCredentialsRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteToolCredentialsRequest$outboundSchema;
  /** @deprecated use `DeleteToolCredentialsRequest$Outbound` instead. */
  export type Outbound = DeleteToolCredentialsRequest$Outbound;
}

export function deleteToolCredentialsRequestToJSON(
  deleteToolCredentialsRequest: DeleteToolCredentialsRequest,
): string {
  return JSON.stringify(
    DeleteToolCredentialsRequest$outboundSchema.parse(
      deleteToolCredentialsRequest,
    ),
  );
}

export function deleteToolCredentialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteToolCredentialsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteToolCredentialsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteToolCredentialsRequest' from JSON`,
  );
}

/** @internal */
export const DeleteToolCredentialsResponse$inboundSchema: z.ZodType<
  DeleteToolCredentialsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
  tool_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_type": "toolType",
  });
});

/** @internal */
export type DeleteToolCredentialsResponse$Outbound = {
  message?: string | undefined;
  provider?: string | undefined;
  status?: string | undefined;
  tool_type?: string | undefined;
};

/** @internal */
export const DeleteToolCredentialsResponse$outboundSchema: z.ZodType<
  DeleteToolCredentialsResponse$Outbound,
  z.ZodTypeDef,
  DeleteToolCredentialsResponse
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
  toolType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolType: "tool_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteToolCredentialsResponse$ {
  /** @deprecated use `DeleteToolCredentialsResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteToolCredentialsResponse$inboundSchema;
  /** @deprecated use `DeleteToolCredentialsResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteToolCredentialsResponse$outboundSchema;
  /** @deprecated use `DeleteToolCredentialsResponse$Outbound` instead. */
  export type Outbound = DeleteToolCredentialsResponse$Outbound;
}

export function deleteToolCredentialsResponseToJSON(
  deleteToolCredentialsResponse: DeleteToolCredentialsResponse,
): string {
  return JSON.stringify(
    DeleteToolCredentialsResponse$outboundSchema.parse(
      deleteToolCredentialsResponse,
    ),
  );
}

export function deleteToolCredentialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteToolCredentialsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteToolCredentialsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteToolCredentialsResponse' from JSON`,
  );
}
