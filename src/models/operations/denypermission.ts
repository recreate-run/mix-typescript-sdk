/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type DenyPermissionRequest = {
  /**
   * Permission ID
   */
  id: string;
};

export type DenyPermissionData = {
  /**
   * Whether permission was denied
   */
  denied?: boolean | undefined;
};

/**
 * Permission deny status
 */
export type DenyPermissionResponse = {
  data?: DenyPermissionData | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const DenyPermissionRequest$inboundSchema: z.ZodType<
  DenyPermissionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DenyPermissionRequest$Outbound = {
  id: string;
};

/** @internal */
export const DenyPermissionRequest$outboundSchema: z.ZodType<
  DenyPermissionRequest$Outbound,
  z.ZodTypeDef,
  DenyPermissionRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DenyPermissionRequest$ {
  /** @deprecated use `DenyPermissionRequest$inboundSchema` instead. */
  export const inboundSchema = DenyPermissionRequest$inboundSchema;
  /** @deprecated use `DenyPermissionRequest$outboundSchema` instead. */
  export const outboundSchema = DenyPermissionRequest$outboundSchema;
  /** @deprecated use `DenyPermissionRequest$Outbound` instead. */
  export type Outbound = DenyPermissionRequest$Outbound;
}

export function denyPermissionRequestToJSON(
  denyPermissionRequest: DenyPermissionRequest,
): string {
  return JSON.stringify(
    DenyPermissionRequest$outboundSchema.parse(denyPermissionRequest),
  );
}

export function denyPermissionRequestFromJSON(
  jsonString: string,
): SafeParseResult<DenyPermissionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DenyPermissionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DenyPermissionRequest' from JSON`,
  );
}

/** @internal */
export const DenyPermissionData$inboundSchema: z.ZodType<
  DenyPermissionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  denied: z.boolean().optional(),
});

/** @internal */
export type DenyPermissionData$Outbound = {
  denied?: boolean | undefined;
};

/** @internal */
export const DenyPermissionData$outboundSchema: z.ZodType<
  DenyPermissionData$Outbound,
  z.ZodTypeDef,
  DenyPermissionData
> = z.object({
  denied: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DenyPermissionData$ {
  /** @deprecated use `DenyPermissionData$inboundSchema` instead. */
  export const inboundSchema = DenyPermissionData$inboundSchema;
  /** @deprecated use `DenyPermissionData$outboundSchema` instead. */
  export const outboundSchema = DenyPermissionData$outboundSchema;
  /** @deprecated use `DenyPermissionData$Outbound` instead. */
  export type Outbound = DenyPermissionData$Outbound;
}

export function denyPermissionDataToJSON(
  denyPermissionData: DenyPermissionData,
): string {
  return JSON.stringify(
    DenyPermissionData$outboundSchema.parse(denyPermissionData),
  );
}

export function denyPermissionDataFromJSON(
  jsonString: string,
): SafeParseResult<DenyPermissionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DenyPermissionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DenyPermissionData' from JSON`,
  );
}

/** @internal */
export const DenyPermissionResponse$inboundSchema: z.ZodType<
  DenyPermissionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => DenyPermissionData$inboundSchema).optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type DenyPermissionResponse$Outbound = {
  data?: DenyPermissionData$Outbound | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const DenyPermissionResponse$outboundSchema: z.ZodType<
  DenyPermissionResponse$Outbound,
  z.ZodTypeDef,
  DenyPermissionResponse
> = z.object({
  data: z.lazy(() => DenyPermissionData$outboundSchema).optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DenyPermissionResponse$ {
  /** @deprecated use `DenyPermissionResponse$inboundSchema` instead. */
  export const inboundSchema = DenyPermissionResponse$inboundSchema;
  /** @deprecated use `DenyPermissionResponse$outboundSchema` instead. */
  export const outboundSchema = DenyPermissionResponse$outboundSchema;
  /** @deprecated use `DenyPermissionResponse$Outbound` instead. */
  export type Outbound = DenyPermissionResponse$Outbound;
}

export function denyPermissionResponseToJSON(
  denyPermissionResponse: DenyPermissionResponse,
): string {
  return JSON.stringify(
    DenyPermissionResponse$outboundSchema.parse(denyPermissionResponse),
  );
}

export function denyPermissionResponseFromJSON(
  jsonString: string,
): SafeParseResult<DenyPermissionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DenyPermissionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DenyPermissionResponse' from JSON`,
  );
}
