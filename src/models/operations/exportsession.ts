/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ExportSessionRequest = {
  /**
   * Session ID to export
   */
  id: string;
};

export type ExportSessionResponse = {
  headers: { [k: string]: Array<string> };
  result: models.ExportSession;
};

/** @internal */
export const ExportSessionRequest$inboundSchema: z.ZodType<
  ExportSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ExportSessionRequest$Outbound = {
  id: string;
};

/** @internal */
export const ExportSessionRequest$outboundSchema: z.ZodType<
  ExportSessionRequest$Outbound,
  z.ZodTypeDef,
  ExportSessionRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportSessionRequest$ {
  /** @deprecated use `ExportSessionRequest$inboundSchema` instead. */
  export const inboundSchema = ExportSessionRequest$inboundSchema;
  /** @deprecated use `ExportSessionRequest$outboundSchema` instead. */
  export const outboundSchema = ExportSessionRequest$outboundSchema;
  /** @deprecated use `ExportSessionRequest$Outbound` instead. */
  export type Outbound = ExportSessionRequest$Outbound;
}

export function exportSessionRequestToJSON(
  exportSessionRequest: ExportSessionRequest,
): string {
  return JSON.stringify(
    ExportSessionRequest$outboundSchema.parse(exportSessionRequest),
  );
}

export function exportSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExportSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportSessionRequest' from JSON`,
  );
}

/** @internal */
export const ExportSessionResponse$inboundSchema: z.ZodType<
  ExportSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: models.ExportSession$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type ExportSessionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: models.ExportSession$Outbound;
};

/** @internal */
export const ExportSessionResponse$outboundSchema: z.ZodType<
  ExportSessionResponse$Outbound,
  z.ZodTypeDef,
  ExportSessionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: models.ExportSession$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExportSessionResponse$ {
  /** @deprecated use `ExportSessionResponse$inboundSchema` instead. */
  export const inboundSchema = ExportSessionResponse$inboundSchema;
  /** @deprecated use `ExportSessionResponse$outboundSchema` instead. */
  export const outboundSchema = ExportSessionResponse$outboundSchema;
  /** @deprecated use `ExportSessionResponse$Outbound` instead. */
  export type Outbound = ExportSessionResponse$Outbound;
}

export function exportSessionResponseToJSON(
  exportSessionResponse: ExportSessionResponse,
): string {
  return JSON.stringify(
    ExportSessionResponse$outboundSchema.parse(exportSessionResponse),
  );
}

export function exportSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExportSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExportSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExportSessionResponse' from JSON`,
  );
}
