/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ForkSessionRequest = {
  /**
   * Source session ID to fork from
   */
  id: string;
};

/**
 * Forked session
 */
export type ForkSessionResponse = {
  data?: models.SessionData | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const ForkSessionRequest$inboundSchema: z.ZodType<
  ForkSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ForkSessionRequest$Outbound = {
  id: string;
};

/** @internal */
export const ForkSessionRequest$outboundSchema: z.ZodType<
  ForkSessionRequest$Outbound,
  z.ZodTypeDef,
  ForkSessionRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForkSessionRequest$ {
  /** @deprecated use `ForkSessionRequest$inboundSchema` instead. */
  export const inboundSchema = ForkSessionRequest$inboundSchema;
  /** @deprecated use `ForkSessionRequest$outboundSchema` instead. */
  export const outboundSchema = ForkSessionRequest$outboundSchema;
  /** @deprecated use `ForkSessionRequest$Outbound` instead. */
  export type Outbound = ForkSessionRequest$Outbound;
}

export function forkSessionRequestToJSON(
  forkSessionRequest: ForkSessionRequest,
): string {
  return JSON.stringify(
    ForkSessionRequest$outboundSchema.parse(forkSessionRequest),
  );
}

export function forkSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ForkSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForkSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForkSessionRequest' from JSON`,
  );
}

/** @internal */
export const ForkSessionResponse$inboundSchema: z.ZodType<
  ForkSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: models.SessionData$inboundSchema.optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type ForkSessionResponse$Outbound = {
  data?: models.SessionData$Outbound | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const ForkSessionResponse$outboundSchema: z.ZodType<
  ForkSessionResponse$Outbound,
  z.ZodTypeDef,
  ForkSessionResponse
> = z.object({
  data: models.SessionData$outboundSchema.optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForkSessionResponse$ {
  /** @deprecated use `ForkSessionResponse$inboundSchema` instead. */
  export const inboundSchema = ForkSessionResponse$inboundSchema;
  /** @deprecated use `ForkSessionResponse$outboundSchema` instead. */
  export const outboundSchema = ForkSessionResponse$outboundSchema;
  /** @deprecated use `ForkSessionResponse$Outbound` instead. */
  export type Outbound = ForkSessionResponse$Outbound;
}

export function forkSessionResponseToJSON(
  forkSessionResponse: ForkSessionResponse,
): string {
  return JSON.stringify(
    ForkSessionResponse$outboundSchema.parse(forkSessionResponse),
  );
}

export function forkSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ForkSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForkSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForkSessionResponse' from JSON`,
  );
}
