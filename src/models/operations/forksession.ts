/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ForkSessionRequestBody = {
  /**
   * Index of the last message to include in the fork (0-based)
   */
  messageIndex: number;
  /**
   * Optional title for the forked session (defaults to 'Forked Session')
   */
  title?: string | undefined;
};

export type ForkSessionRequest = {
  /**
   * Source session ID to fork from
   */
  id: string;
  requestBody: ForkSessionRequestBody;
};

/** @internal */
export const ForkSessionRequestBody$inboundSchema: z.ZodType<
  ForkSessionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageIndex: z.number().int(),
  title: z.string().optional(),
});

/** @internal */
export type ForkSessionRequestBody$Outbound = {
  messageIndex: number;
  title?: string | undefined;
};

/** @internal */
export const ForkSessionRequestBody$outboundSchema: z.ZodType<
  ForkSessionRequestBody$Outbound,
  z.ZodTypeDef,
  ForkSessionRequestBody
> = z.object({
  messageIndex: z.number().int(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForkSessionRequestBody$ {
  /** @deprecated use `ForkSessionRequestBody$inboundSchema` instead. */
  export const inboundSchema = ForkSessionRequestBody$inboundSchema;
  /** @deprecated use `ForkSessionRequestBody$outboundSchema` instead. */
  export const outboundSchema = ForkSessionRequestBody$outboundSchema;
  /** @deprecated use `ForkSessionRequestBody$Outbound` instead. */
  export type Outbound = ForkSessionRequestBody$Outbound;
}

export function forkSessionRequestBodyToJSON(
  forkSessionRequestBody: ForkSessionRequestBody,
): string {
  return JSON.stringify(
    ForkSessionRequestBody$outboundSchema.parse(forkSessionRequestBody),
  );
}

export function forkSessionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ForkSessionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForkSessionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForkSessionRequestBody' from JSON`,
  );
}

/** @internal */
export const ForkSessionRequest$inboundSchema: z.ZodType<
  ForkSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => ForkSessionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ForkSessionRequest$Outbound = {
  id: string;
  RequestBody: ForkSessionRequestBody$Outbound;
};

/** @internal */
export const ForkSessionRequest$outboundSchema: z.ZodType<
  ForkSessionRequest$Outbound,
  z.ZodTypeDef,
  ForkSessionRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => ForkSessionRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ForkSessionRequest$ {
  /** @deprecated use `ForkSessionRequest$inboundSchema` instead. */
  export const inboundSchema = ForkSessionRequest$inboundSchema;
  /** @deprecated use `ForkSessionRequest$outboundSchema` instead. */
  export const outboundSchema = ForkSessionRequest$outboundSchema;
  /** @deprecated use `ForkSessionRequest$Outbound` instead. */
  export type Outbound = ForkSessionRequest$Outbound;
}

export function forkSessionRequestToJSON(
  forkSessionRequest: ForkSessionRequest,
): string {
  return JSON.stringify(
    ForkSessionRequest$outboundSchema.parse(forkSessionRequest),
  );
}

export function forkSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<ForkSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ForkSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ForkSessionRequest' from JSON`,
  );
}
