/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Authentication method (oauth, api_key, none)
 */
export const GetAuthStatusAuthMethod = {
  Oauth: "oauth",
  ApiKey: "api_key",
  None: "none",
} as const;
/**
 * Authentication method (oauth, api_key, none)
 */
export type GetAuthStatusAuthMethod = ClosedEnum<
  typeof GetAuthStatusAuthMethod
>;

export type Providers = {
  /**
   * Authentication method (oauth, api_key, none)
   */
  authMethod?: GetAuthStatusAuthMethod | undefined;
  /**
   * Whether provider is authenticated
   */
  authenticated?: boolean | undefined;
  /**
   * User-friendly provider name
   */
  displayName?: string | undefined;
};

/**
 * Authentication status for all providers
 */
export type GetAuthStatusResponse = {
  /**
   * Map of provider authentication status
   */
  providers?: { [k: string]: Providers } | undefined;
};

/** @internal */
export const GetAuthStatusAuthMethod$inboundSchema: z.ZodNativeEnum<
  typeof GetAuthStatusAuthMethod
> = z.nativeEnum(GetAuthStatusAuthMethod);

/** @internal */
export const GetAuthStatusAuthMethod$outboundSchema: z.ZodNativeEnum<
  typeof GetAuthStatusAuthMethod
> = GetAuthStatusAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthStatusAuthMethod$ {
  /** @deprecated use `GetAuthStatusAuthMethod$inboundSchema` instead. */
  export const inboundSchema = GetAuthStatusAuthMethod$inboundSchema;
  /** @deprecated use `GetAuthStatusAuthMethod$outboundSchema` instead. */
  export const outboundSchema = GetAuthStatusAuthMethod$outboundSchema;
}

/** @internal */
export const Providers$inboundSchema: z.ZodType<
  Providers,
  z.ZodTypeDef,
  unknown
> = z.object({
  auth_method: GetAuthStatusAuthMethod$inboundSchema.optional(),
  authenticated: z.boolean().optional(),
  display_name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "auth_method": "authMethod",
    "display_name": "displayName",
  });
});

/** @internal */
export type Providers$Outbound = {
  auth_method?: string | undefined;
  authenticated?: boolean | undefined;
  display_name?: string | undefined;
};

/** @internal */
export const Providers$outboundSchema: z.ZodType<
  Providers$Outbound,
  z.ZodTypeDef,
  Providers
> = z.object({
  authMethod: GetAuthStatusAuthMethod$outboundSchema.optional(),
  authenticated: z.boolean().optional(),
  displayName: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    authMethod: "auth_method",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Providers$ {
  /** @deprecated use `Providers$inboundSchema` instead. */
  export const inboundSchema = Providers$inboundSchema;
  /** @deprecated use `Providers$outboundSchema` instead. */
  export const outboundSchema = Providers$outboundSchema;
  /** @deprecated use `Providers$Outbound` instead. */
  export type Outbound = Providers$Outbound;
}

export function providersToJSON(providers: Providers): string {
  return JSON.stringify(Providers$outboundSchema.parse(providers));
}

export function providersFromJSON(
  jsonString: string,
): SafeParseResult<Providers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Providers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Providers' from JSON`,
  );
}

/** @internal */
export const GetAuthStatusResponse$inboundSchema: z.ZodType<
  GetAuthStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  providers: z.record(z.lazy(() => Providers$inboundSchema)).optional(),
});

/** @internal */
export type GetAuthStatusResponse$Outbound = {
  providers?: { [k: string]: Providers$Outbound } | undefined;
};

/** @internal */
export const GetAuthStatusResponse$outboundSchema: z.ZodType<
  GetAuthStatusResponse$Outbound,
  z.ZodTypeDef,
  GetAuthStatusResponse
> = z.object({
  providers: z.record(z.lazy(() => Providers$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAuthStatusResponse$ {
  /** @deprecated use `GetAuthStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetAuthStatusResponse$inboundSchema;
  /** @deprecated use `GetAuthStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetAuthStatusResponse$outboundSchema;
  /** @deprecated use `GetAuthStatusResponse$Outbound` instead. */
  export type Outbound = GetAuthStatusResponse$Outbound;
}

export function getAuthStatusResponseToJSON(
  getAuthStatusResponse: GetAuthStatusResponse,
): string {
  return JSON.stringify(
    GetAuthStatusResponse$outboundSchema.parse(getAuthStatusResponse),
  );
}

export function getAuthStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAuthStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAuthStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAuthStatusResponse' from JSON`,
  );
}
