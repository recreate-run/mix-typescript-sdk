/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCommandRequest = {
  /**
   * Command name
   */
  name: string;
};

/**
 * Command details
 */
export type GetCommandResponse = {
  /**
   * Command description
   */
  description?: string | undefined;
  /**
   * Command name
   */
  name?: string | undefined;
  /**
   * Command usage instructions
   */
  usage?: string | undefined;
};

/** @internal */
export const GetCommandRequest$inboundSchema: z.ZodType<
  GetCommandRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type GetCommandRequest$Outbound = {
  name: string;
};

/** @internal */
export const GetCommandRequest$outboundSchema: z.ZodType<
  GetCommandRequest$Outbound,
  z.ZodTypeDef,
  GetCommandRequest
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCommandRequest$ {
  /** @deprecated use `GetCommandRequest$inboundSchema` instead. */
  export const inboundSchema = GetCommandRequest$inboundSchema;
  /** @deprecated use `GetCommandRequest$outboundSchema` instead. */
  export const outboundSchema = GetCommandRequest$outboundSchema;
  /** @deprecated use `GetCommandRequest$Outbound` instead. */
  export type Outbound = GetCommandRequest$Outbound;
}

export function getCommandRequestToJSON(
  getCommandRequest: GetCommandRequest,
): string {
  return JSON.stringify(
    GetCommandRequest$outboundSchema.parse(getCommandRequest),
  );
}

export function getCommandRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCommandRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCommandRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCommandRequest' from JSON`,
  );
}

/** @internal */
export const GetCommandResponse$inboundSchema: z.ZodType<
  GetCommandResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  name: z.string().optional(),
  usage: z.string().optional(),
});

/** @internal */
export type GetCommandResponse$Outbound = {
  description?: string | undefined;
  name?: string | undefined;
  usage?: string | undefined;
};

/** @internal */
export const GetCommandResponse$outboundSchema: z.ZodType<
  GetCommandResponse$Outbound,
  z.ZodTypeDef,
  GetCommandResponse
> = z.object({
  description: z.string().optional(),
  name: z.string().optional(),
  usage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCommandResponse$ {
  /** @deprecated use `GetCommandResponse$inboundSchema` instead. */
  export const inboundSchema = GetCommandResponse$inboundSchema;
  /** @deprecated use `GetCommandResponse$outboundSchema` instead. */
  export const outboundSchema = GetCommandResponse$outboundSchema;
  /** @deprecated use `GetCommandResponse$Outbound` instead. */
  export type Outbound = GetCommandResponse$Outbound;
}

export function getCommandResponseToJSON(
  getCommandResponse: GetCommandResponse,
): string {
  return JSON.stringify(
    GetCommandResponse$outboundSchema.parse(getCommandResponse),
  );
}

export function getCommandResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCommandResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCommandResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCommandResponse' from JSON`,
  );
}
