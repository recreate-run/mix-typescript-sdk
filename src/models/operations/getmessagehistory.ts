/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetMessageHistoryRequest = {
  /**
   * Maximum number of messages to return
   */
  limit?: number | undefined;
  /**
   * Number of messages to skip
   */
  offset?: number | undefined;
};

/**
 * Message history
 */
export type GetMessageHistoryResponse = {
  data?: Array<models.MessageData> | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const GetMessageHistoryRequest$inboundSchema: z.ZodType<
  GetMessageHistoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
});

/** @internal */
export type GetMessageHistoryRequest$Outbound = {
  limit: number;
  offset: number;
};

/** @internal */
export const GetMessageHistoryRequest$outboundSchema: z.ZodType<
  GetMessageHistoryRequest$Outbound,
  z.ZodTypeDef,
  GetMessageHistoryRequest
> = z.object({
  limit: z.number().int().default(50),
  offset: z.number().int().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMessageHistoryRequest$ {
  /** @deprecated use `GetMessageHistoryRequest$inboundSchema` instead. */
  export const inboundSchema = GetMessageHistoryRequest$inboundSchema;
  /** @deprecated use `GetMessageHistoryRequest$outboundSchema` instead. */
  export const outboundSchema = GetMessageHistoryRequest$outboundSchema;
  /** @deprecated use `GetMessageHistoryRequest$Outbound` instead. */
  export type Outbound = GetMessageHistoryRequest$Outbound;
}

export function getMessageHistoryRequestToJSON(
  getMessageHistoryRequest: GetMessageHistoryRequest,
): string {
  return JSON.stringify(
    GetMessageHistoryRequest$outboundSchema.parse(getMessageHistoryRequest),
  );
}

export function getMessageHistoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMessageHistoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMessageHistoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMessageHistoryRequest' from JSON`,
  );
}

/** @internal */
export const GetMessageHistoryResponse$inboundSchema: z.ZodType<
  GetMessageHistoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(models.MessageData$inboundSchema).optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type GetMessageHistoryResponse$Outbound = {
  data?: Array<models.MessageData$Outbound> | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const GetMessageHistoryResponse$outboundSchema: z.ZodType<
  GetMessageHistoryResponse$Outbound,
  z.ZodTypeDef,
  GetMessageHistoryResponse
> = z.object({
  data: z.array(models.MessageData$outboundSchema).optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMessageHistoryResponse$ {
  /** @deprecated use `GetMessageHistoryResponse$inboundSchema` instead. */
  export const inboundSchema = GetMessageHistoryResponse$inboundSchema;
  /** @deprecated use `GetMessageHistoryResponse$outboundSchema` instead. */
  export const outboundSchema = GetMessageHistoryResponse$outboundSchema;
  /** @deprecated use `GetMessageHistoryResponse$Outbound` instead. */
  export type Outbound = GetMessageHistoryResponse$Outbound;
}

export function getMessageHistoryResponseToJSON(
  getMessageHistoryResponse: GetMessageHistoryResponse,
): string {
  return JSON.stringify(
    GetMessageHistoryResponse$outboundSchema.parse(getMessageHistoryResponse),
  );
}

export function getMessageHistoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetMessageHistoryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMessageHistoryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMessageHistoryResponse' from JSON`,
  );
}
