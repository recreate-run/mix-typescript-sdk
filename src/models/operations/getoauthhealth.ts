/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Token status
 */
export const ProvidersStatus = {
  Active: "active",
  Expired: "expired",
  ExpiredNoRefresh: "expired_no_refresh",
  Error: "error",
  NotFound: "not_found",
} as const;
/**
 * Token status
 */
export type ProvidersStatus = ClosedEnum<typeof ProvidersStatus>;

export type GetOAuthHealthProviders = {
  /**
   * Error message if status is 'error'
   */
  error?: string | undefined;
  /**
   * Token expiration time
   */
  expiresAt?: Date | undefined;
  /**
   * Human-readable time until expiration
   */
  expiresIn?: string | undefined;
  /**
   * Last time token was refreshed
   */
  lastRefresh?: Date | undefined;
  /**
   * Provider name
   */
  provider: string;
  /**
   * Token status
   */
  status: ProvidersStatus;
};

/**
 * Overall health status
 */
export const Status = {
  Healthy: "healthy",
  Degraded: "degraded",
  Unhealthy: "unhealthy",
} as const;
/**
 * Overall health status
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * OAuth health status
 */
export type GetOAuthHealthResponse = {
  /**
   * Map of provider OAuth health status
   */
  providers: { [k: string]: GetOAuthHealthProviders };
  /**
   * Overall health status
   */
  status: Status;
  /**
   * Health check timestamp
   */
  timestamp: Date;
};

/** @internal */
export const ProvidersStatus$inboundSchema: z.ZodNativeEnum<
  typeof ProvidersStatus
> = z.nativeEnum(ProvidersStatus);

/** @internal */
export const ProvidersStatus$outboundSchema: z.ZodNativeEnum<
  typeof ProvidersStatus
> = ProvidersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProvidersStatus$ {
  /** @deprecated use `ProvidersStatus$inboundSchema` instead. */
  export const inboundSchema = ProvidersStatus$inboundSchema;
  /** @deprecated use `ProvidersStatus$outboundSchema` instead. */
  export const outboundSchema = ProvidersStatus$outboundSchema;
}

/** @internal */
export const GetOAuthHealthProviders$inboundSchema: z.ZodType<
  GetOAuthHealthProviders,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.string().optional(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expires_in: z.string().optional(),
  last_refresh: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  provider: z.string(),
  status: ProvidersStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
    "expires_in": "expiresIn",
    "last_refresh": "lastRefresh",
  });
});

/** @internal */
export type GetOAuthHealthProviders$Outbound = {
  error?: string | undefined;
  expires_at?: string | undefined;
  expires_in?: string | undefined;
  last_refresh?: string | undefined;
  provider: string;
  status: string;
};

/** @internal */
export const GetOAuthHealthProviders$outboundSchema: z.ZodType<
  GetOAuthHealthProviders$Outbound,
  z.ZodTypeDef,
  GetOAuthHealthProviders
> = z.object({
  error: z.string().optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  expiresIn: z.string().optional(),
  lastRefresh: z.date().transform(v => v.toISOString()).optional(),
  provider: z.string(),
  status: ProvidersStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
    expiresIn: "expires_in",
    lastRefresh: "last_refresh",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOAuthHealthProviders$ {
  /** @deprecated use `GetOAuthHealthProviders$inboundSchema` instead. */
  export const inboundSchema = GetOAuthHealthProviders$inboundSchema;
  /** @deprecated use `GetOAuthHealthProviders$outboundSchema` instead. */
  export const outboundSchema = GetOAuthHealthProviders$outboundSchema;
  /** @deprecated use `GetOAuthHealthProviders$Outbound` instead. */
  export type Outbound = GetOAuthHealthProviders$Outbound;
}

export function getOAuthHealthProvidersToJSON(
  getOAuthHealthProviders: GetOAuthHealthProviders,
): string {
  return JSON.stringify(
    GetOAuthHealthProviders$outboundSchema.parse(getOAuthHealthProviders),
  );
}

export function getOAuthHealthProvidersFromJSON(
  jsonString: string,
): SafeParseResult<GetOAuthHealthProviders, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOAuthHealthProviders$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOAuthHealthProviders' from JSON`,
  );
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetOAuthHealthResponse$inboundSchema: z.ZodType<
  GetOAuthHealthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  providers: z.record(z.lazy(() => GetOAuthHealthProviders$inboundSchema)),
  status: Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type GetOAuthHealthResponse$Outbound = {
  providers: { [k: string]: GetOAuthHealthProviders$Outbound };
  status: string;
  timestamp: string;
};

/** @internal */
export const GetOAuthHealthResponse$outboundSchema: z.ZodType<
  GetOAuthHealthResponse$Outbound,
  z.ZodTypeDef,
  GetOAuthHealthResponse
> = z.object({
  providers: z.record(z.lazy(() => GetOAuthHealthProviders$outboundSchema)),
  status: Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOAuthHealthResponse$ {
  /** @deprecated use `GetOAuthHealthResponse$inboundSchema` instead. */
  export const inboundSchema = GetOAuthHealthResponse$inboundSchema;
  /** @deprecated use `GetOAuthHealthResponse$outboundSchema` instead. */
  export const outboundSchema = GetOAuthHealthResponse$outboundSchema;
  /** @deprecated use `GetOAuthHealthResponse$Outbound` instead. */
  export type Outbound = GetOAuthHealthResponse$Outbound;
}

export function getOAuthHealthResponseToJSON(
  getOAuthHealthResponse: GetOAuthHealthResponse,
): string {
  return JSON.stringify(
    GetOAuthHealthResponse$outboundSchema.parse(getOAuthHealthResponse),
  );
}

export function getOAuthHealthResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOAuthHealthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOAuthHealthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOAuthHealthResponse' from JSON`,
  );
}
