/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetSessionFileRequest = {
  /**
   * Session ID
   */
  id: string;
  /**
   * Filename to retrieve
   */
  filename: string;
  /**
   * Thumbnail specification: '100' (box), 'w100' (width), 'h100' (height)
   */
  thumb?: string | undefined;
  /**
   * Time offset in seconds for video thumbnails (default: 1.0)
   */
  time?: number | undefined;
};

export type GetSessionFileResponse =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetSessionFileRequest$inboundSchema: z.ZodType<
  GetSessionFileRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  filename: z.string(),
  thumb: z.string().optional(),
  time: z.number().optional(),
});

/** @internal */
export type GetSessionFileRequest$Outbound = {
  id: string;
  filename: string;
  thumb?: string | undefined;
  time?: number | undefined;
};

/** @internal */
export const GetSessionFileRequest$outboundSchema: z.ZodType<
  GetSessionFileRequest$Outbound,
  z.ZodTypeDef,
  GetSessionFileRequest
> = z.object({
  id: z.string(),
  filename: z.string(),
  thumb: z.string().optional(),
  time: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSessionFileRequest$ {
  /** @deprecated use `GetSessionFileRequest$inboundSchema` instead. */
  export const inboundSchema = GetSessionFileRequest$inboundSchema;
  /** @deprecated use `GetSessionFileRequest$outboundSchema` instead. */
  export const outboundSchema = GetSessionFileRequest$outboundSchema;
  /** @deprecated use `GetSessionFileRequest$Outbound` instead. */
  export type Outbound = GetSessionFileRequest$Outbound;
}

export function getSessionFileRequestToJSON(
  getSessionFileRequest: GetSessionFileRequest,
): string {
  return JSON.stringify(
    GetSessionFileRequest$outboundSchema.parse(getSessionFileRequest),
  );
}

export function getSessionFileRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSessionFileRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSessionFileRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSessionFileRequest' from JSON`,
  );
}

/** @internal */
export const GetSessionFileResponse$inboundSchema: z.ZodType<
  GetSessionFileResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/** @internal */
export type GetSessionFileResponse$Outbound =
  | ReadableStream<Uint8Array>
  | ReadableStream<Uint8Array>;

/** @internal */
export const GetSessionFileResponse$outboundSchema: z.ZodType<
  GetSessionFileResponse$Outbound,
  z.ZodTypeDef,
  GetSessionFileResponse
> = z.union([
  z.instanceof(ReadableStream<Uint8Array>),
  z.instanceof(ReadableStream<Uint8Array>),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSessionFileResponse$ {
  /** @deprecated use `GetSessionFileResponse$inboundSchema` instead. */
  export const inboundSchema = GetSessionFileResponse$inboundSchema;
  /** @deprecated use `GetSessionFileResponse$outboundSchema` instead. */
  export const outboundSchema = GetSessionFileResponse$outboundSchema;
  /** @deprecated use `GetSessionFileResponse$Outbound` instead. */
  export type Outbound = GetSessionFileResponse$Outbound;
}

export function getSessionFileResponseToJSON(
  getSessionFileResponse: GetSessionFileResponse,
): string {
  return JSON.stringify(
    GetSessionFileResponse$outboundSchema.parse(getSessionFileResponse),
  );
}

export function getSessionFileResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetSessionFileResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSessionFileResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSessionFileResponse' from JSON`,
  );
}
