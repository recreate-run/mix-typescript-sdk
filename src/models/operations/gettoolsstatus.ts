/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetToolsStatusTool = {
  /**
   * Whether tool requires API key authentication
   */
  apiKeyRequired?: boolean | undefined;
  /**
   * Whether tool is authenticated and ready to use
   */
  authenticated?: boolean | undefined;
  /**
   * Tool description
   */
  description?: string | undefined;
  /**
   * User-friendly tool name
   */
  displayName?: string | undefined;
  /**
   * Tool provider name
   */
  provider?: string | undefined;
};

export type GetToolsStatusCategories = {
  /**
   * User-friendly category name
   */
  displayName?: string | undefined;
  /**
   * Available tools in this category
   */
  tools?: Array<GetToolsStatusTool> | undefined;
};

/**
 * Tools status and authentication information
 */
export type GetToolsStatusResponse = {
  /**
   * Map of tool categories and their tools
   */
  categories?: { [k: string]: GetToolsStatusCategories } | undefined;
};

/** @internal */
export const GetToolsStatusTool$inboundSchema: z.ZodType<
  GetToolsStatusTool,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key_required: z.boolean().optional(),
  authenticated: z.boolean().optional(),
  description: z.string().optional(),
  display_name: z.string().optional(),
  provider: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "api_key_required": "apiKeyRequired",
    "display_name": "displayName",
  });
});

/** @internal */
export type GetToolsStatusTool$Outbound = {
  api_key_required?: boolean | undefined;
  authenticated?: boolean | undefined;
  description?: string | undefined;
  display_name?: string | undefined;
  provider?: string | undefined;
};

/** @internal */
export const GetToolsStatusTool$outboundSchema: z.ZodType<
  GetToolsStatusTool$Outbound,
  z.ZodTypeDef,
  GetToolsStatusTool
> = z.object({
  apiKeyRequired: z.boolean().optional(),
  authenticated: z.boolean().optional(),
  description: z.string().optional(),
  displayName: z.string().optional(),
  provider: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    apiKeyRequired: "api_key_required",
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetToolsStatusTool$ {
  /** @deprecated use `GetToolsStatusTool$inboundSchema` instead. */
  export const inboundSchema = GetToolsStatusTool$inboundSchema;
  /** @deprecated use `GetToolsStatusTool$outboundSchema` instead. */
  export const outboundSchema = GetToolsStatusTool$outboundSchema;
  /** @deprecated use `GetToolsStatusTool$Outbound` instead. */
  export type Outbound = GetToolsStatusTool$Outbound;
}

export function getToolsStatusToolToJSON(
  getToolsStatusTool: GetToolsStatusTool,
): string {
  return JSON.stringify(
    GetToolsStatusTool$outboundSchema.parse(getToolsStatusTool),
  );
}

export function getToolsStatusToolFromJSON(
  jsonString: string,
): SafeParseResult<GetToolsStatusTool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetToolsStatusTool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetToolsStatusTool' from JSON`,
  );
}

/** @internal */
export const GetToolsStatusCategories$inboundSchema: z.ZodType<
  GetToolsStatusCategories,
  z.ZodTypeDef,
  unknown
> = z.object({
  display_name: z.string().optional(),
  tools: z.array(z.lazy(() => GetToolsStatusTool$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "display_name": "displayName",
  });
});

/** @internal */
export type GetToolsStatusCategories$Outbound = {
  display_name?: string | undefined;
  tools?: Array<GetToolsStatusTool$Outbound> | undefined;
};

/** @internal */
export const GetToolsStatusCategories$outboundSchema: z.ZodType<
  GetToolsStatusCategories$Outbound,
  z.ZodTypeDef,
  GetToolsStatusCategories
> = z.object({
  displayName: z.string().optional(),
  tools: z.array(z.lazy(() => GetToolsStatusTool$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    displayName: "display_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetToolsStatusCategories$ {
  /** @deprecated use `GetToolsStatusCategories$inboundSchema` instead. */
  export const inboundSchema = GetToolsStatusCategories$inboundSchema;
  /** @deprecated use `GetToolsStatusCategories$outboundSchema` instead. */
  export const outboundSchema = GetToolsStatusCategories$outboundSchema;
  /** @deprecated use `GetToolsStatusCategories$Outbound` instead. */
  export type Outbound = GetToolsStatusCategories$Outbound;
}

export function getToolsStatusCategoriesToJSON(
  getToolsStatusCategories: GetToolsStatusCategories,
): string {
  return JSON.stringify(
    GetToolsStatusCategories$outboundSchema.parse(getToolsStatusCategories),
  );
}

export function getToolsStatusCategoriesFromJSON(
  jsonString: string,
): SafeParseResult<GetToolsStatusCategories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetToolsStatusCategories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetToolsStatusCategories' from JSON`,
  );
}

/** @internal */
export const GetToolsStatusResponse$inboundSchema: z.ZodType<
  GetToolsStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  categories: z.record(z.lazy(() => GetToolsStatusCategories$inboundSchema))
    .optional(),
});

/** @internal */
export type GetToolsStatusResponse$Outbound = {
  categories?: { [k: string]: GetToolsStatusCategories$Outbound } | undefined;
};

/** @internal */
export const GetToolsStatusResponse$outboundSchema: z.ZodType<
  GetToolsStatusResponse$Outbound,
  z.ZodTypeDef,
  GetToolsStatusResponse
> = z.object({
  categories: z.record(z.lazy(() => GetToolsStatusCategories$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetToolsStatusResponse$ {
  /** @deprecated use `GetToolsStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetToolsStatusResponse$inboundSchema;
  /** @deprecated use `GetToolsStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetToolsStatusResponse$outboundSchema;
  /** @deprecated use `GetToolsStatusResponse$Outbound` instead. */
  export type Outbound = GetToolsStatusResponse$Outbound;
}

export function getToolsStatusResponseToJSON(
  getToolsStatusResponse: GetToolsStatusResponse,
): string {
  return JSON.stringify(
    GetToolsStatusResponse$outboundSchema.parse(getToolsStatusResponse),
  );
}

export function getToolsStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetToolsStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetToolsStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetToolsStatusResponse' from JSON`,
  );
}
