/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GrantPermissionRequest = {
  /**
   * Permission ID
   */
  id: string;
};

export type GrantPermissionData = {
  /**
   * Whether permission was granted
   */
  granted?: boolean | undefined;
};

/**
 * Permission grant status
 */
export type GrantPermissionResponse = {
  data?: GrantPermissionData | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const GrantPermissionRequest$inboundSchema: z.ZodType<
  GrantPermissionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GrantPermissionRequest$Outbound = {
  id: string;
};

/** @internal */
export const GrantPermissionRequest$outboundSchema: z.ZodType<
  GrantPermissionRequest$Outbound,
  z.ZodTypeDef,
  GrantPermissionRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantPermissionRequest$ {
  /** @deprecated use `GrantPermissionRequest$inboundSchema` instead. */
  export const inboundSchema = GrantPermissionRequest$inboundSchema;
  /** @deprecated use `GrantPermissionRequest$outboundSchema` instead. */
  export const outboundSchema = GrantPermissionRequest$outboundSchema;
  /** @deprecated use `GrantPermissionRequest$Outbound` instead. */
  export type Outbound = GrantPermissionRequest$Outbound;
}

export function grantPermissionRequestToJSON(
  grantPermissionRequest: GrantPermissionRequest,
): string {
  return JSON.stringify(
    GrantPermissionRequest$outboundSchema.parse(grantPermissionRequest),
  );
}

export function grantPermissionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GrantPermissionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantPermissionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantPermissionRequest' from JSON`,
  );
}

/** @internal */
export const GrantPermissionData$inboundSchema: z.ZodType<
  GrantPermissionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  granted: z.boolean().optional(),
});

/** @internal */
export type GrantPermissionData$Outbound = {
  granted?: boolean | undefined;
};

/** @internal */
export const GrantPermissionData$outboundSchema: z.ZodType<
  GrantPermissionData$Outbound,
  z.ZodTypeDef,
  GrantPermissionData
> = z.object({
  granted: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantPermissionData$ {
  /** @deprecated use `GrantPermissionData$inboundSchema` instead. */
  export const inboundSchema = GrantPermissionData$inboundSchema;
  /** @deprecated use `GrantPermissionData$outboundSchema` instead. */
  export const outboundSchema = GrantPermissionData$outboundSchema;
  /** @deprecated use `GrantPermissionData$Outbound` instead. */
  export type Outbound = GrantPermissionData$Outbound;
}

export function grantPermissionDataToJSON(
  grantPermissionData: GrantPermissionData,
): string {
  return JSON.stringify(
    GrantPermissionData$outboundSchema.parse(grantPermissionData),
  );
}

export function grantPermissionDataFromJSON(
  jsonString: string,
): SafeParseResult<GrantPermissionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantPermissionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantPermissionData' from JSON`,
  );
}

/** @internal */
export const GrantPermissionResponse$inboundSchema: z.ZodType<
  GrantPermissionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => GrantPermissionData$inboundSchema).optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type GrantPermissionResponse$Outbound = {
  data?: GrantPermissionData$Outbound | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const GrantPermissionResponse$outboundSchema: z.ZodType<
  GrantPermissionResponse$Outbound,
  z.ZodTypeDef,
  GrantPermissionResponse
> = z.object({
  data: z.lazy(() => GrantPermissionData$outboundSchema).optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantPermissionResponse$ {
  /** @deprecated use `GrantPermissionResponse$inboundSchema` instead. */
  export const inboundSchema = GrantPermissionResponse$inboundSchema;
  /** @deprecated use `GrantPermissionResponse$outboundSchema` instead. */
  export const outboundSchema = GrantPermissionResponse$outboundSchema;
  /** @deprecated use `GrantPermissionResponse$Outbound` instead. */
  export type Outbound = GrantPermissionResponse$Outbound;
}

export function grantPermissionResponseToJSON(
  grantPermissionResponse: GrantPermissionResponse,
): string {
  return JSON.stringify(
    GrantPermissionResponse$outboundSchema.parse(grantPermissionResponse),
  );
}

export function grantPermissionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GrantPermissionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantPermissionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantPermissionResponse' from JSON`,
  );
}
