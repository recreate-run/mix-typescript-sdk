/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HandleOAuthCallbackRequest = {
  /**
   * Authorization code from OAuth provider
   */
  code: string;
  /**
   * Provider name (anthropic)
   */
  provider: string;
  /**
   * OAuth state for verification
   */
  state: string;
};

/**
 * OAuth completion status
 */
export type HandleOAuthCallbackResponse = {
  /**
   * Seconds until token expiration
   */
  expiresIn?: number | undefined;
  /**
   * Status message
   */
  message?: string | undefined;
  /**
   * Provider name
   */
  provider?: string | undefined;
  /**
   * Operation status
   */
  status?: string | undefined;
};

/** @internal */
export const HandleOAuthCallbackRequest$inboundSchema: z.ZodType<
  HandleOAuthCallbackRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  provider: z.string(),
  state: z.string(),
});

/** @internal */
export type HandleOAuthCallbackRequest$Outbound = {
  code: string;
  provider: string;
  state: string;
};

/** @internal */
export const HandleOAuthCallbackRequest$outboundSchema: z.ZodType<
  HandleOAuthCallbackRequest$Outbound,
  z.ZodTypeDef,
  HandleOAuthCallbackRequest
> = z.object({
  code: z.string(),
  provider: z.string(),
  state: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HandleOAuthCallbackRequest$ {
  /** @deprecated use `HandleOAuthCallbackRequest$inboundSchema` instead. */
  export const inboundSchema = HandleOAuthCallbackRequest$inboundSchema;
  /** @deprecated use `HandleOAuthCallbackRequest$outboundSchema` instead. */
  export const outboundSchema = HandleOAuthCallbackRequest$outboundSchema;
  /** @deprecated use `HandleOAuthCallbackRequest$Outbound` instead. */
  export type Outbound = HandleOAuthCallbackRequest$Outbound;
}

export function handleOAuthCallbackRequestToJSON(
  handleOAuthCallbackRequest: HandleOAuthCallbackRequest,
): string {
  return JSON.stringify(
    HandleOAuthCallbackRequest$outboundSchema.parse(handleOAuthCallbackRequest),
  );
}

export function handleOAuthCallbackRequestFromJSON(
  jsonString: string,
): SafeParseResult<HandleOAuthCallbackRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HandleOAuthCallbackRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HandleOAuthCallbackRequest' from JSON`,
  );
}

/** @internal */
export const HandleOAuthCallbackResponse$inboundSchema: z.ZodType<
  HandleOAuthCallbackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  expires_in: z.number().int().optional(),
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "expires_in": "expiresIn",
  });
});

/** @internal */
export type HandleOAuthCallbackResponse$Outbound = {
  expires_in?: number | undefined;
  message?: string | undefined;
  provider?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const HandleOAuthCallbackResponse$outboundSchema: z.ZodType<
  HandleOAuthCallbackResponse$Outbound,
  z.ZodTypeDef,
  HandleOAuthCallbackResponse
> = z.object({
  expiresIn: z.number().int().optional(),
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    expiresIn: "expires_in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HandleOAuthCallbackResponse$ {
  /** @deprecated use `HandleOAuthCallbackResponse$inboundSchema` instead. */
  export const inboundSchema = HandleOAuthCallbackResponse$inboundSchema;
  /** @deprecated use `HandleOAuthCallbackResponse$outboundSchema` instead. */
  export const outboundSchema = HandleOAuthCallbackResponse$outboundSchema;
  /** @deprecated use `HandleOAuthCallbackResponse$Outbound` instead. */
  export type Outbound = HandleOAuthCallbackResponse$Outbound;
}

export function handleOAuthCallbackResponseToJSON(
  handleOAuthCallbackResponse: HandleOAuthCallbackResponse,
): string {
  return JSON.stringify(
    HandleOAuthCallbackResponse$outboundSchema.parse(
      handleOAuthCallbackResponse,
    ),
  );
}

export function handleOAuthCallbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<HandleOAuthCallbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HandleOAuthCallbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HandleOAuthCallbackResponse' from JSON`,
  );
}
