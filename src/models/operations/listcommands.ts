/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCommandsResponse = {
  /**
   * Command description
   */
  description?: string | undefined;
  /**
   * Command name
   */
  name?: string | undefined;
};

/** @internal */
export const ListCommandsResponse$inboundSchema: z.ZodType<
  ListCommandsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type ListCommandsResponse$Outbound = {
  description?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const ListCommandsResponse$outboundSchema: z.ZodType<
  ListCommandsResponse$Outbound,
  z.ZodTypeDef,
  ListCommandsResponse
> = z.object({
  description: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCommandsResponse$ {
  /** @deprecated use `ListCommandsResponse$inboundSchema` instead. */
  export const inboundSchema = ListCommandsResponse$inboundSchema;
  /** @deprecated use `ListCommandsResponse$outboundSchema` instead. */
  export const outboundSchema = ListCommandsResponse$outboundSchema;
  /** @deprecated use `ListCommandsResponse$Outbound` instead. */
  export type Outbound = ListCommandsResponse$Outbound;
}

export function listCommandsResponseToJSON(
  listCommandsResponse: ListCommandsResponse,
): string {
  return JSON.stringify(
    ListCommandsResponse$outboundSchema.parse(listCommandsResponse),
  );
}

export function listCommandsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCommandsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCommandsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCommandsResponse' from JSON`,
  );
}
