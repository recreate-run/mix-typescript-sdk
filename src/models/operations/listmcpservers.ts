/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListMcpServersData = {
  /**
   * MCP server name
   */
  name?: string | undefined;
  /**
   * Server status
   */
  status?: string | undefined;
};

/**
 * List of MCP servers
 */
export type ListMcpServersResponse = {
  data?: Array<ListMcpServersData> | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const ListMcpServersData$inboundSchema: z.ZodType<
  ListMcpServersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type ListMcpServersData$Outbound = {
  name?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const ListMcpServersData$outboundSchema: z.ZodType<
  ListMcpServersData$Outbound,
  z.ZodTypeDef,
  ListMcpServersData
> = z.object({
  name: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMcpServersData$ {
  /** @deprecated use `ListMcpServersData$inboundSchema` instead. */
  export const inboundSchema = ListMcpServersData$inboundSchema;
  /** @deprecated use `ListMcpServersData$outboundSchema` instead. */
  export const outboundSchema = ListMcpServersData$outboundSchema;
  /** @deprecated use `ListMcpServersData$Outbound` instead. */
  export type Outbound = ListMcpServersData$Outbound;
}

export function listMcpServersDataToJSON(
  listMcpServersData: ListMcpServersData,
): string {
  return JSON.stringify(
    ListMcpServersData$outboundSchema.parse(listMcpServersData),
  );
}

export function listMcpServersDataFromJSON(
  jsonString: string,
): SafeParseResult<ListMcpServersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMcpServersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMcpServersData' from JSON`,
  );
}

/** @internal */
export const ListMcpServersResponse$inboundSchema: z.ZodType<
  ListMcpServersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => ListMcpServersData$inboundSchema)).optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type ListMcpServersResponse$Outbound = {
  data?: Array<ListMcpServersData$Outbound> | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const ListMcpServersResponse$outboundSchema: z.ZodType<
  ListMcpServersResponse$Outbound,
  z.ZodTypeDef,
  ListMcpServersResponse
> = z.object({
  data: z.array(z.lazy(() => ListMcpServersData$outboundSchema)).optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMcpServersResponse$ {
  /** @deprecated use `ListMcpServersResponse$inboundSchema` instead. */
  export const inboundSchema = ListMcpServersResponse$inboundSchema;
  /** @deprecated use `ListMcpServersResponse$outboundSchema` instead. */
  export const outboundSchema = ListMcpServersResponse$outboundSchema;
  /** @deprecated use `ListMcpServersResponse$Outbound` instead. */
  export type Outbound = ListMcpServersResponse$Outbound;
}

export function listMcpServersResponseToJSON(
  listMcpServersResponse: ListMcpServersResponse,
): string {
  return JSON.stringify(
    ListMcpServersResponse$outboundSchema.parse(listMcpServersResponse),
  );
}

export function listMcpServersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListMcpServersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListMcpServersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListMcpServersResponse' from JSON`,
  );
}
