/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * List of sessions
 */
export type ListSessionsResponse = {
  data?: Array<models.SessionData> | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const ListSessionsResponse$inboundSchema: z.ZodType<
  ListSessionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(models.SessionData$inboundSchema).optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type ListSessionsResponse$Outbound = {
  data?: Array<models.SessionData$Outbound> | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const ListSessionsResponse$outboundSchema: z.ZodType<
  ListSessionsResponse$Outbound,
  z.ZodTypeDef,
  ListSessionsResponse
> = z.object({
  data: z.array(models.SessionData$outboundSchema).optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSessionsResponse$ {
  /** @deprecated use `ListSessionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSessionsResponse$inboundSchema;
  /** @deprecated use `ListSessionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSessionsResponse$outboundSchema;
  /** @deprecated use `ListSessionsResponse$Outbound` instead. */
  export type Outbound = ListSessionsResponse$Outbound;
}

export function listSessionsResponseToJSON(
  listSessionsResponse: ListSessionsResponse,
): string {
  return JSON.stringify(
    ListSessionsResponse$outboundSchema.parse(listSessionsResponse),
  );
}

export function listSessionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListSessionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSessionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSessionsResponse' from JSON`,
  );
}
