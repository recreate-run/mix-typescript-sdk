/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Reset preferences
 */
export type ResetPreferencesResponse = {
  /**
   * Creation timestamp
   */
  createdAt?: number | undefined;
  /**
   * Reset main agent max tokens
   */
  mainAgentMaxTokens?: number | undefined;
  /**
   * Reset main agent model
   */
  mainAgentModel?: string | undefined;
  /**
   * Reset main agent reasoning effort
   */
  mainAgentReasoningEffort?: string | undefined;
  /**
   * Reset preferred provider
   */
  preferredProvider?: string | undefined;
  /**
   * Reset sub agent max tokens
   */
  subAgentMaxTokens?: number | undefined;
  /**
   * Reset sub agent model
   */
  subAgentModel?: string | undefined;
  /**
   * Reset sub agent reasoning effort
   */
  subAgentReasoningEffort?: string | undefined;
  /**
   * Reset timestamp
   */
  updatedAt?: number | undefined;
};

/** @internal */
export const ResetPreferencesResponse$inboundSchema: z.ZodType<
  ResetPreferencesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.number().int().optional(),
  main_agent_max_tokens: z.number().int().optional(),
  main_agent_model: z.string().optional(),
  main_agent_reasoning_effort: z.string().optional(),
  preferred_provider: z.string().optional(),
  sub_agent_max_tokens: z.number().int().optional(),
  sub_agent_model: z.string().optional(),
  sub_agent_reasoning_effort: z.string().optional(),
  updated_at: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "main_agent_max_tokens": "mainAgentMaxTokens",
    "main_agent_model": "mainAgentModel",
    "main_agent_reasoning_effort": "mainAgentReasoningEffort",
    "preferred_provider": "preferredProvider",
    "sub_agent_max_tokens": "subAgentMaxTokens",
    "sub_agent_model": "subAgentModel",
    "sub_agent_reasoning_effort": "subAgentReasoningEffort",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type ResetPreferencesResponse$Outbound = {
  created_at?: number | undefined;
  main_agent_max_tokens?: number | undefined;
  main_agent_model?: string | undefined;
  main_agent_reasoning_effort?: string | undefined;
  preferred_provider?: string | undefined;
  sub_agent_max_tokens?: number | undefined;
  sub_agent_model?: string | undefined;
  sub_agent_reasoning_effort?: string | undefined;
  updated_at?: number | undefined;
};

/** @internal */
export const ResetPreferencesResponse$outboundSchema: z.ZodType<
  ResetPreferencesResponse$Outbound,
  z.ZodTypeDef,
  ResetPreferencesResponse
> = z.object({
  createdAt: z.number().int().optional(),
  mainAgentMaxTokens: z.number().int().optional(),
  mainAgentModel: z.string().optional(),
  mainAgentReasoningEffort: z.string().optional(),
  preferredProvider: z.string().optional(),
  subAgentMaxTokens: z.number().int().optional(),
  subAgentModel: z.string().optional(),
  subAgentReasoningEffort: z.string().optional(),
  updatedAt: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    mainAgentMaxTokens: "main_agent_max_tokens",
    mainAgentModel: "main_agent_model",
    mainAgentReasoningEffort: "main_agent_reasoning_effort",
    preferredProvider: "preferred_provider",
    subAgentMaxTokens: "sub_agent_max_tokens",
    subAgentModel: "sub_agent_model",
    subAgentReasoningEffort: "sub_agent_reasoning_effort",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResetPreferencesResponse$ {
  /** @deprecated use `ResetPreferencesResponse$inboundSchema` instead. */
  export const inboundSchema = ResetPreferencesResponse$inboundSchema;
  /** @deprecated use `ResetPreferencesResponse$outboundSchema` instead. */
  export const outboundSchema = ResetPreferencesResponse$outboundSchema;
  /** @deprecated use `ResetPreferencesResponse$Outbound` instead. */
  export type Outbound = ResetPreferencesResponse$Outbound;
}

export function resetPreferencesResponseToJSON(
  resetPreferencesResponse: ResetPreferencesResponse,
): string {
  return JSON.stringify(
    ResetPreferencesResponse$outboundSchema.parse(resetPreferencesResponse),
  );
}

export function resetPreferencesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ResetPreferencesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResetPreferencesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResetPreferencesResponse' from JSON`,
  );
}
