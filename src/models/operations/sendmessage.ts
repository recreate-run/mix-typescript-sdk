/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SendMessageRequestBody = {
  /**
   * Whether the message is in planning mode
   */
  planMode?: boolean | undefined;
  /**
   * The text content of the message
   */
  text: string;
  /**
   * Thinking budget in tokens (0=disabled, 1024-31999=enabled). If not provided, determined by keywords in message.
   */
  thinkingBudget?: number | null | undefined;
};

export type SendMessageRequest = {
  /**
   * Session ID
   */
  id: string;
  requestBody: SendMessageRequestBody;
};

/**
 * Message accepted for processing. Agent runs asynchronously and streams results via SSE.
 */
export type SendMessageResponse = {
  /**
   * Session ID for the processing task
   */
  sessionId: string;
  /**
   * Processing status
   */
  status: string;
};

/** @internal */
export const SendMessageRequestBody$inboundSchema: z.ZodType<
  SendMessageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  plan_mode: z.boolean().default(false),
  text: z.string(),
  thinking_budget: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "plan_mode": "planMode",
    "thinking_budget": "thinkingBudget",
  });
});

/** @internal */
export type SendMessageRequestBody$Outbound = {
  plan_mode: boolean;
  text: string;
  thinking_budget?: number | null | undefined;
};

/** @internal */
export const SendMessageRequestBody$outboundSchema: z.ZodType<
  SendMessageRequestBody$Outbound,
  z.ZodTypeDef,
  SendMessageRequestBody
> = z.object({
  planMode: z.boolean().default(false),
  text: z.string(),
  thinkingBudget: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    planMode: "plan_mode",
    thinkingBudget: "thinking_budget",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendMessageRequestBody$ {
  /** @deprecated use `SendMessageRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendMessageRequestBody$inboundSchema;
  /** @deprecated use `SendMessageRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendMessageRequestBody$outboundSchema;
  /** @deprecated use `SendMessageRequestBody$Outbound` instead. */
  export type Outbound = SendMessageRequestBody$Outbound;
}

export function sendMessageRequestBodyToJSON(
  sendMessageRequestBody: SendMessageRequestBody,
): string {
  return JSON.stringify(
    SendMessageRequestBody$outboundSchema.parse(sendMessageRequestBody),
  );
}

export function sendMessageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SendMessageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendMessageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendMessageRequestBody' from JSON`,
  );
}

/** @internal */
export const SendMessageRequest$inboundSchema: z.ZodType<
  SendMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => SendMessageRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SendMessageRequest$Outbound = {
  id: string;
  RequestBody: SendMessageRequestBody$Outbound;
};

/** @internal */
export const SendMessageRequest$outboundSchema: z.ZodType<
  SendMessageRequest$Outbound,
  z.ZodTypeDef,
  SendMessageRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => SendMessageRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendMessageRequest$ {
  /** @deprecated use `SendMessageRequest$inboundSchema` instead. */
  export const inboundSchema = SendMessageRequest$inboundSchema;
  /** @deprecated use `SendMessageRequest$outboundSchema` instead. */
  export const outboundSchema = SendMessageRequest$outboundSchema;
  /** @deprecated use `SendMessageRequest$Outbound` instead. */
  export type Outbound = SendMessageRequest$Outbound;
}

export function sendMessageRequestToJSON(
  sendMessageRequest: SendMessageRequest,
): string {
  return JSON.stringify(
    SendMessageRequest$outboundSchema.parse(sendMessageRequest),
  );
}

export function sendMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<SendMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendMessageRequest' from JSON`,
  );
}

/** @internal */
export const SendMessageResponse$inboundSchema: z.ZodType<
  SendMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sessionId: z.string(),
  status: z.string(),
});

/** @internal */
export type SendMessageResponse$Outbound = {
  sessionId: string;
  status: string;
};

/** @internal */
export const SendMessageResponse$outboundSchema: z.ZodType<
  SendMessageResponse$Outbound,
  z.ZodTypeDef,
  SendMessageResponse
> = z.object({
  sessionId: z.string(),
  status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendMessageResponse$ {
  /** @deprecated use `SendMessageResponse$inboundSchema` instead. */
  export const inboundSchema = SendMessageResponse$inboundSchema;
  /** @deprecated use `SendMessageResponse$outboundSchema` instead. */
  export const outboundSchema = SendMessageResponse$outboundSchema;
  /** @deprecated use `SendMessageResponse$Outbound` instead. */
  export type Outbound = SendMessageResponse$Outbound;
}

export function sendMessageResponseToJSON(
  sendMessageResponse: SendMessageResponse,
): string {
  return JSON.stringify(
    SendMessageResponse$outboundSchema.parse(sendMessageResponse),
  );
}

export function sendMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<SendMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendMessageResponse' from JSON`,
  );
}
