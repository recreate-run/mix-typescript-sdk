/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SendStreamingMessageRequestBody = {
  /**
   * Message content to send for processing
   */
  content: string;
};

export type SendStreamingMessageRequest = {
  /**
   * Session ID to send message to
   */
  id: string;
  requestBody: SendStreamingMessageRequestBody;
};

/** @internal */
export const SendStreamingMessageRequestBody$inboundSchema: z.ZodType<
  SendStreamingMessageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
});

/** @internal */
export type SendStreamingMessageRequestBody$Outbound = {
  content: string;
};

/** @internal */
export const SendStreamingMessageRequestBody$outboundSchema: z.ZodType<
  SendStreamingMessageRequestBody$Outbound,
  z.ZodTypeDef,
  SendStreamingMessageRequestBody
> = z.object({
  content: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendStreamingMessageRequestBody$ {
  /** @deprecated use `SendStreamingMessageRequestBody$inboundSchema` instead. */
  export const inboundSchema = SendStreamingMessageRequestBody$inboundSchema;
  /** @deprecated use `SendStreamingMessageRequestBody$outboundSchema` instead. */
  export const outboundSchema = SendStreamingMessageRequestBody$outboundSchema;
  /** @deprecated use `SendStreamingMessageRequestBody$Outbound` instead. */
  export type Outbound = SendStreamingMessageRequestBody$Outbound;
}

export function sendStreamingMessageRequestBodyToJSON(
  sendStreamingMessageRequestBody: SendStreamingMessageRequestBody,
): string {
  return JSON.stringify(
    SendStreamingMessageRequestBody$outboundSchema.parse(
      sendStreamingMessageRequestBody,
    ),
  );
}

export function sendStreamingMessageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<SendStreamingMessageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendStreamingMessageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendStreamingMessageRequestBody' from JSON`,
  );
}

/** @internal */
export const SendStreamingMessageRequest$inboundSchema: z.ZodType<
  SendStreamingMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => SendStreamingMessageRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type SendStreamingMessageRequest$Outbound = {
  id: string;
  RequestBody: SendStreamingMessageRequestBody$Outbound;
};

/** @internal */
export const SendStreamingMessageRequest$outboundSchema: z.ZodType<
  SendStreamingMessageRequest$Outbound,
  z.ZodTypeDef,
  SendStreamingMessageRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => SendStreamingMessageRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendStreamingMessageRequest$ {
  /** @deprecated use `SendStreamingMessageRequest$inboundSchema` instead. */
  export const inboundSchema = SendStreamingMessageRequest$inboundSchema;
  /** @deprecated use `SendStreamingMessageRequest$outboundSchema` instead. */
  export const outboundSchema = SendStreamingMessageRequest$outboundSchema;
  /** @deprecated use `SendStreamingMessageRequest$Outbound` instead. */
  export type Outbound = SendStreamingMessageRequest$Outbound;
}

export function sendStreamingMessageRequestToJSON(
  sendStreamingMessageRequest: SendStreamingMessageRequest,
): string {
  return JSON.stringify(
    SendStreamingMessageRequest$outboundSchema.parse(
      sendStreamingMessageRequest,
    ),
  );
}

export function sendStreamingMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<SendStreamingMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendStreamingMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendStreamingMessageRequest' from JSON`,
  );
}
