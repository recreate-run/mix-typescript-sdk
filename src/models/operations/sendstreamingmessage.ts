/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SendStreamingMessageRequest = {
  /**
   * Session ID to send message to
   */
  id: string;
  messageData: models.MessageData;
};

/** @internal */
export const SendStreamingMessageRequest$inboundSchema: z.ZodType<
  SendStreamingMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  MessageData: models.MessageData$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "MessageData": "messageData",
  });
});

/** @internal */
export type SendStreamingMessageRequest$Outbound = {
  id: string;
  MessageData: models.MessageData$Outbound;
};

/** @internal */
export const SendStreamingMessageRequest$outboundSchema: z.ZodType<
  SendStreamingMessageRequest$Outbound,
  z.ZodTypeDef,
  SendStreamingMessageRequest
> = z.object({
  id: z.string(),
  messageData: models.MessageData$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    messageData: "MessageData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SendStreamingMessageRequest$ {
  /** @deprecated use `SendStreamingMessageRequest$inboundSchema` instead. */
  export const inboundSchema = SendStreamingMessageRequest$inboundSchema;
  /** @deprecated use `SendStreamingMessageRequest$outboundSchema` instead. */
  export const outboundSchema = SendStreamingMessageRequest$outboundSchema;
  /** @deprecated use `SendStreamingMessageRequest$Outbound` instead. */
  export type Outbound = SendStreamingMessageRequest$Outbound;
}

export function sendStreamingMessageRequestToJSON(
  sendStreamingMessageRequest: SendStreamingMessageRequest,
): string {
  return JSON.stringify(
    SendStreamingMessageRequest$outboundSchema.parse(
      sendStreamingMessageRequest,
    ),
  );
}

export function sendStreamingMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<SendStreamingMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SendStreamingMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SendStreamingMessageRequest' from JSON`,
  );
}
