/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type SetApiKeyRequest = {
  /**
   * API key for authentication
   */
  apiKey: string;
};

export type SetApiKeyData = {
  /**
   * Whether API key was set successfully
   */
  success?: boolean | undefined;
};

/**
 * API key set status
 */
export type SetApiKeyResponse = {
  data?: SetApiKeyData | undefined;
  error?: models.RESTError | undefined;
  /**
   * Optional message
   */
  message?: string | undefined;
};

/** @internal */
export const SetApiKeyRequest$inboundSchema: z.ZodType<
  SetApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  apiKey: z.string(),
});

/** @internal */
export type SetApiKeyRequest$Outbound = {
  apiKey: string;
};

/** @internal */
export const SetApiKeyRequest$outboundSchema: z.ZodType<
  SetApiKeyRequest$Outbound,
  z.ZodTypeDef,
  SetApiKeyRequest
> = z.object({
  apiKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetApiKeyRequest$ {
  /** @deprecated use `SetApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = SetApiKeyRequest$inboundSchema;
  /** @deprecated use `SetApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = SetApiKeyRequest$outboundSchema;
  /** @deprecated use `SetApiKeyRequest$Outbound` instead. */
  export type Outbound = SetApiKeyRequest$Outbound;
}

export function setApiKeyRequestToJSON(
  setApiKeyRequest: SetApiKeyRequest,
): string {
  return JSON.stringify(
    SetApiKeyRequest$outboundSchema.parse(setApiKeyRequest),
  );
}

export function setApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetApiKeyRequest' from JSON`,
  );
}

/** @internal */
export const SetApiKeyData$inboundSchema: z.ZodType<
  SetApiKeyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
});

/** @internal */
export type SetApiKeyData$Outbound = {
  success?: boolean | undefined;
};

/** @internal */
export const SetApiKeyData$outboundSchema: z.ZodType<
  SetApiKeyData$Outbound,
  z.ZodTypeDef,
  SetApiKeyData
> = z.object({
  success: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetApiKeyData$ {
  /** @deprecated use `SetApiKeyData$inboundSchema` instead. */
  export const inboundSchema = SetApiKeyData$inboundSchema;
  /** @deprecated use `SetApiKeyData$outboundSchema` instead. */
  export const outboundSchema = SetApiKeyData$outboundSchema;
  /** @deprecated use `SetApiKeyData$Outbound` instead. */
  export type Outbound = SetApiKeyData$Outbound;
}

export function setApiKeyDataToJSON(setApiKeyData: SetApiKeyData): string {
  return JSON.stringify(SetApiKeyData$outboundSchema.parse(setApiKeyData));
}

export function setApiKeyDataFromJSON(
  jsonString: string,
): SafeParseResult<SetApiKeyData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetApiKeyData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetApiKeyData' from JSON`,
  );
}

/** @internal */
export const SetApiKeyResponse$inboundSchema: z.ZodType<
  SetApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => SetApiKeyData$inboundSchema).optional(),
  error: models.RESTError$inboundSchema.optional(),
  message: z.string().optional(),
});

/** @internal */
export type SetApiKeyResponse$Outbound = {
  data?: SetApiKeyData$Outbound | undefined;
  error?: models.RESTError$Outbound | undefined;
  message?: string | undefined;
};

/** @internal */
export const SetApiKeyResponse$outboundSchema: z.ZodType<
  SetApiKeyResponse$Outbound,
  z.ZodTypeDef,
  SetApiKeyResponse
> = z.object({
  data: z.lazy(() => SetApiKeyData$outboundSchema).optional(),
  error: models.RESTError$outboundSchema.optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetApiKeyResponse$ {
  /** @deprecated use `SetApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = SetApiKeyResponse$inboundSchema;
  /** @deprecated use `SetApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = SetApiKeyResponse$outboundSchema;
  /** @deprecated use `SetApiKeyResponse$Outbound` instead. */
  export type Outbound = SetApiKeyResponse$Outbound;
}

export function setApiKeyResponseToJSON(
  setApiKeyResponse: SetApiKeyResponse,
): string {
  return JSON.stringify(
    SetApiKeyResponse$outboundSchema.parse(setApiKeyResponse),
  );
}

export function setApiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<SetApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetApiKeyResponse' from JSON`,
  );
}
