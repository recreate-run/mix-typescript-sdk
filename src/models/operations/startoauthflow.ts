/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StartOAuthFlowRequest = {
  /**
   * Provider name (currently only 'anthropic')
   */
  provider: string;
};

/**
 * OAuth authorization information
 */
export type StartOAuthFlowResponse = {
  /**
   * OAuth authorization URL to redirect to
   */
  authUrl?: string | undefined;
  /**
   * Instructions for completing OAuth flow
   */
  message?: string | undefined;
  /**
   * OAuth state token for verification
   */
  state?: string | undefined;
};

/** @internal */
export const StartOAuthFlowRequest$inboundSchema: z.ZodType<
  StartOAuthFlowRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: z.string(),
});

/** @internal */
export type StartOAuthFlowRequest$Outbound = {
  provider: string;
};

/** @internal */
export const StartOAuthFlowRequest$outboundSchema: z.ZodType<
  StartOAuthFlowRequest$Outbound,
  z.ZodTypeDef,
  StartOAuthFlowRequest
> = z.object({
  provider: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartOAuthFlowRequest$ {
  /** @deprecated use `StartOAuthFlowRequest$inboundSchema` instead. */
  export const inboundSchema = StartOAuthFlowRequest$inboundSchema;
  /** @deprecated use `StartOAuthFlowRequest$outboundSchema` instead. */
  export const outboundSchema = StartOAuthFlowRequest$outboundSchema;
  /** @deprecated use `StartOAuthFlowRequest$Outbound` instead. */
  export type Outbound = StartOAuthFlowRequest$Outbound;
}

export function startOAuthFlowRequestToJSON(
  startOAuthFlowRequest: StartOAuthFlowRequest,
): string {
  return JSON.stringify(
    StartOAuthFlowRequest$outboundSchema.parse(startOAuthFlowRequest),
  );
}

export function startOAuthFlowRequestFromJSON(
  jsonString: string,
): SafeParseResult<StartOAuthFlowRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartOAuthFlowRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartOAuthFlowRequest' from JSON`,
  );
}

/** @internal */
export const StartOAuthFlowResponse$inboundSchema: z.ZodType<
  StartOAuthFlowResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  auth_url: z.string().optional(),
  message: z.string().optional(),
  state: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "auth_url": "authUrl",
  });
});

/** @internal */
export type StartOAuthFlowResponse$Outbound = {
  auth_url?: string | undefined;
  message?: string | undefined;
  state?: string | undefined;
};

/** @internal */
export const StartOAuthFlowResponse$outboundSchema: z.ZodType<
  StartOAuthFlowResponse$Outbound,
  z.ZodTypeDef,
  StartOAuthFlowResponse
> = z.object({
  authUrl: z.string().optional(),
  message: z.string().optional(),
  state: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    authUrl: "auth_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartOAuthFlowResponse$ {
  /** @deprecated use `StartOAuthFlowResponse$inboundSchema` instead. */
  export const inboundSchema = StartOAuthFlowResponse$inboundSchema;
  /** @deprecated use `StartOAuthFlowResponse$outboundSchema` instead. */
  export const outboundSchema = StartOAuthFlowResponse$outboundSchema;
  /** @deprecated use `StartOAuthFlowResponse$Outbound` instead. */
  export type Outbound = StartOAuthFlowResponse$Outbound;
}

export function startOAuthFlowResponseToJSON(
  startOAuthFlowResponse: StartOAuthFlowResponse,
): string {
  return JSON.stringify(
    StartOAuthFlowResponse$outboundSchema.parse(startOAuthFlowResponse),
  );
}

export function startOAuthFlowResponseFromJSON(
  jsonString: string,
): SafeParseResult<StartOAuthFlowResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartOAuthFlowResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartOAuthFlowResponse' from JSON`,
  );
}
