/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Provider name (anthropic, openai, openrouter, gemini, brave)
 */
export const Provider = {
  Anthropic: "anthropic",
  Openai: "openai",
  Openrouter: "openrouter",
  Gemini: "gemini",
  Brave: "brave",
} as const;
/**
 * Provider name (anthropic, openai, openrouter, gemini, brave)
 */
export type Provider = ClosedEnum<typeof Provider>;

export type StoreApiKeyRequest = {
  /**
   * API key for authentication
   */
  apiKey: string;
  /**
   * Provider name (anthropic, openai, openrouter, gemini, brave)
   */
  provider: Provider;
};

/**
 * API key stored status
 */
export type StoreApiKeyResponse = {
  /**
   * Success message
   */
  message?: string | undefined;
  /**
   * Provider name
   */
  provider?: string | undefined;
  /**
   * Operation status (success)
   */
  status?: string | undefined;
};

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const StoreApiKeyRequest$inboundSchema: z.ZodType<
  StoreApiKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string(),
  provider: Provider$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
  });
});

/** @internal */
export type StoreApiKeyRequest$Outbound = {
  api_key: string;
  provider: string;
};

/** @internal */
export const StoreApiKeyRequest$outboundSchema: z.ZodType<
  StoreApiKeyRequest$Outbound,
  z.ZodTypeDef,
  StoreApiKeyRequest
> = z.object({
  apiKey: z.string(),
  provider: Provider$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StoreApiKeyRequest$ {
  /** @deprecated use `StoreApiKeyRequest$inboundSchema` instead. */
  export const inboundSchema = StoreApiKeyRequest$inboundSchema;
  /** @deprecated use `StoreApiKeyRequest$outboundSchema` instead. */
  export const outboundSchema = StoreApiKeyRequest$outboundSchema;
  /** @deprecated use `StoreApiKeyRequest$Outbound` instead. */
  export type Outbound = StoreApiKeyRequest$Outbound;
}

export function storeApiKeyRequestToJSON(
  storeApiKeyRequest: StoreApiKeyRequest,
): string {
  return JSON.stringify(
    StoreApiKeyRequest$outboundSchema.parse(storeApiKeyRequest),
  );
}

export function storeApiKeyRequestFromJSON(
  jsonString: string,
): SafeParseResult<StoreApiKeyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StoreApiKeyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StoreApiKeyRequest' from JSON`,
  );
}

/** @internal */
export const StoreApiKeyResponse$inboundSchema: z.ZodType<
  StoreApiKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type StoreApiKeyResponse$Outbound = {
  message?: string | undefined;
  provider?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const StoreApiKeyResponse$outboundSchema: z.ZodType<
  StoreApiKeyResponse$Outbound,
  z.ZodTypeDef,
  StoreApiKeyResponse
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StoreApiKeyResponse$ {
  /** @deprecated use `StoreApiKeyResponse$inboundSchema` instead. */
  export const inboundSchema = StoreApiKeyResponse$inboundSchema;
  /** @deprecated use `StoreApiKeyResponse$outboundSchema` instead. */
  export const outboundSchema = StoreApiKeyResponse$outboundSchema;
  /** @deprecated use `StoreApiKeyResponse$Outbound` instead. */
  export type Outbound = StoreApiKeyResponse$Outbound;
}

export function storeApiKeyResponseToJSON(
  storeApiKeyResponse: StoreApiKeyResponse,
): string {
  return JSON.stringify(
    StoreApiKeyResponse$outboundSchema.parse(storeApiKeyResponse),
  );
}

export function storeApiKeyResponseFromJSON(
  jsonString: string,
): SafeParseResult<StoreApiKeyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StoreApiKeyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StoreApiKeyResponse' from JSON`,
  );
}
