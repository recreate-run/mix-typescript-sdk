/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tool category type
 */
export const ToolType = {
  WebSearch: "web_search",
  MultimodalAnalyzer: "multimodal_analyzer",
} as const;
/**
 * Tool category type
 */
export type ToolType = ClosedEnum<typeof ToolType>;

export type StoreToolCredentialsRequest = {
  /**
   * API key for authentication
   */
  apiKey: string;
  /**
   * Tool provider name (e.g., brave, gemini)
   */
  provider: string;
  /**
   * Tool category type
   */
  toolType: ToolType;
};

/**
 * Tool API key stored successfully
 */
export type StoreToolCredentialsResponse = {
  /**
   * Success message
   */
  message?: string | undefined;
  /**
   * Tool provider name
   */
  provider?: string | undefined;
  /**
   * Operation status (success)
   */
  status?: string | undefined;
  /**
   * Tool category type
   */
  toolType?: string | undefined;
};

/** @internal */
export const ToolType$inboundSchema: z.ZodNativeEnum<typeof ToolType> = z
  .nativeEnum(ToolType);

/** @internal */
export const ToolType$outboundSchema: z.ZodNativeEnum<typeof ToolType> =
  ToolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolType$ {
  /** @deprecated use `ToolType$inboundSchema` instead. */
  export const inboundSchema = ToolType$inboundSchema;
  /** @deprecated use `ToolType$outboundSchema` instead. */
  export const outboundSchema = ToolType$outboundSchema;
}

/** @internal */
export const StoreToolCredentialsRequest$inboundSchema: z.ZodType<
  StoreToolCredentialsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string(),
  provider: z.string(),
  tool_type: ToolType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
    "tool_type": "toolType",
  });
});

/** @internal */
export type StoreToolCredentialsRequest$Outbound = {
  api_key: string;
  provider: string;
  tool_type: string;
};

/** @internal */
export const StoreToolCredentialsRequest$outboundSchema: z.ZodType<
  StoreToolCredentialsRequest$Outbound,
  z.ZodTypeDef,
  StoreToolCredentialsRequest
> = z.object({
  apiKey: z.string(),
  provider: z.string(),
  toolType: ToolType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
    toolType: "tool_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StoreToolCredentialsRequest$ {
  /** @deprecated use `StoreToolCredentialsRequest$inboundSchema` instead. */
  export const inboundSchema = StoreToolCredentialsRequest$inboundSchema;
  /** @deprecated use `StoreToolCredentialsRequest$outboundSchema` instead. */
  export const outboundSchema = StoreToolCredentialsRequest$outboundSchema;
  /** @deprecated use `StoreToolCredentialsRequest$Outbound` instead. */
  export type Outbound = StoreToolCredentialsRequest$Outbound;
}

export function storeToolCredentialsRequestToJSON(
  storeToolCredentialsRequest: StoreToolCredentialsRequest,
): string {
  return JSON.stringify(
    StoreToolCredentialsRequest$outboundSchema.parse(
      storeToolCredentialsRequest,
    ),
  );
}

export function storeToolCredentialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<StoreToolCredentialsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StoreToolCredentialsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StoreToolCredentialsRequest' from JSON`,
  );
}

/** @internal */
export const StoreToolCredentialsResponse$inboundSchema: z.ZodType<
  StoreToolCredentialsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
  tool_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_type": "toolType",
  });
});

/** @internal */
export type StoreToolCredentialsResponse$Outbound = {
  message?: string | undefined;
  provider?: string | undefined;
  status?: string | undefined;
  tool_type?: string | undefined;
};

/** @internal */
export const StoreToolCredentialsResponse$outboundSchema: z.ZodType<
  StoreToolCredentialsResponse$Outbound,
  z.ZodTypeDef,
  StoreToolCredentialsResponse
> = z.object({
  message: z.string().optional(),
  provider: z.string().optional(),
  status: z.string().optional(),
  toolType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolType: "tool_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StoreToolCredentialsResponse$ {
  /** @deprecated use `StoreToolCredentialsResponse$inboundSchema` instead. */
  export const inboundSchema = StoreToolCredentialsResponse$inboundSchema;
  /** @deprecated use `StoreToolCredentialsResponse$outboundSchema` instead. */
  export const outboundSchema = StoreToolCredentialsResponse$outboundSchema;
  /** @deprecated use `StoreToolCredentialsResponse$Outbound` instead. */
  export type Outbound = StoreToolCredentialsResponse$Outbound;
}

export function storeToolCredentialsResponseToJSON(
  storeToolCredentialsResponse: StoreToolCredentialsResponse,
): string {
  return JSON.stringify(
    StoreToolCredentialsResponse$outboundSchema.parse(
      storeToolCredentialsResponse,
    ),
  );
}

export function storeToolCredentialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<StoreToolCredentialsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StoreToolCredentialsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StoreToolCredentialsResponse' from JSON`,
  );
}
