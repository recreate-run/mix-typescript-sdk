/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type StreamEventsRequest = {
  /**
   * Session ID to stream events for
   */
  sessionId: string;
  /**
   * Last received event ID for reconnection and event replay
   */
  lastEventID?: string | undefined;
};

export type StreamEventsResponse = {
  headers: { [k: string]: Array<string> };
  result: EventStream<models.SSEEventStream>;
};

/** @internal */
export const StreamEventsRequest$inboundSchema: z.ZodType<
  StreamEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sessionId: z.string(),
  "Last-Event-ID": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "Last-Event-ID": "lastEventID",
  });
});

/** @internal */
export type StreamEventsRequest$Outbound = {
  sessionId: string;
  "Last-Event-ID"?: string | undefined;
};

/** @internal */
export const StreamEventsRequest$outboundSchema: z.ZodType<
  StreamEventsRequest$Outbound,
  z.ZodTypeDef,
  StreamEventsRequest
> = z.object({
  sessionId: z.string(),
  lastEventID: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    lastEventID: "Last-Event-ID",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamEventsRequest$ {
  /** @deprecated use `StreamEventsRequest$inboundSchema` instead. */
  export const inboundSchema = StreamEventsRequest$inboundSchema;
  /** @deprecated use `StreamEventsRequest$outboundSchema` instead. */
  export const outboundSchema = StreamEventsRequest$outboundSchema;
  /** @deprecated use `StreamEventsRequest$Outbound` instead. */
  export type Outbound = StreamEventsRequest$Outbound;
}

export function streamEventsRequestToJSON(
  streamEventsRequest: StreamEventsRequest,
): string {
  return JSON.stringify(
    StreamEventsRequest$outboundSchema.parse(streamEventsRequest),
  );
}

export function streamEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<StreamEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamEventsRequest' from JSON`,
  );
}

/** @internal */
export const StreamEventsResponse$inboundSchema: z.ZodType<
  StreamEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
  Result: z.instanceof(ReadableStream<Uint8Array>)
    .transform(stream => {
      return new EventStream(stream, rawEvent => {
        return { value: models.SSEEventStream$inboundSchema.parse(rawEvent) };
      });
    }),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type StreamEventsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: never;
};

/** @internal */
export const StreamEventsResponse$outboundSchema: z.ZodType<
  StreamEventsResponse$Outbound,
  z.ZodTypeDef,
  StreamEventsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.never(),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamEventsResponse$ {
  /** @deprecated use `StreamEventsResponse$inboundSchema` instead. */
  export const inboundSchema = StreamEventsResponse$inboundSchema;
  /** @deprecated use `StreamEventsResponse$outboundSchema` instead. */
  export const outboundSchema = StreamEventsResponse$outboundSchema;
  /** @deprecated use `StreamEventsResponse$Outbound` instead. */
  export type Outbound = StreamEventsResponse$Outbound;
}

export function streamEventsResponseToJSON(
  streamEventsResponse: StreamEventsResponse,
): string {
  return JSON.stringify(
    StreamEventsResponse$outboundSchema.parse(streamEventsResponse),
  );
}

export function streamEventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<StreamEventsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamEventsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamEventsResponse' from JSON`,
  );
}
