/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateSessionCallbacksRequestBody = {
  /**
   * Session-level callbacks that execute after tool completion. Environment variables available: CALLBACK_TOOL_RESULT, CALLBACK_TOOL_NAME, CALLBACK_TOOL_ID, CALLBACK_SESSION_ID
   */
  callbacks: Array<models.Callback>;
};

export type UpdateSessionCallbacksRequest = {
  /**
   * Session ID to update
   */
  id: string;
  requestBody: UpdateSessionCallbacksRequestBody;
};

/** @internal */
export const UpdateSessionCallbacksRequestBody$inboundSchema: z.ZodType<
  UpdateSessionCallbacksRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  callbacks: z.array(models.Callback$inboundSchema),
});

/** @internal */
export type UpdateSessionCallbacksRequestBody$Outbound = {
  callbacks: Array<models.Callback$Outbound>;
};

/** @internal */
export const UpdateSessionCallbacksRequestBody$outboundSchema: z.ZodType<
  UpdateSessionCallbacksRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSessionCallbacksRequestBody
> = z.object({
  callbacks: z.array(models.Callback$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionCallbacksRequestBody$ {
  /** @deprecated use `UpdateSessionCallbacksRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionCallbacksRequestBody$inboundSchema;
  /** @deprecated use `UpdateSessionCallbacksRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSessionCallbacksRequestBody$outboundSchema;
  /** @deprecated use `UpdateSessionCallbacksRequestBody$Outbound` instead. */
  export type Outbound = UpdateSessionCallbacksRequestBody$Outbound;
}

export function updateSessionCallbacksRequestBodyToJSON(
  updateSessionCallbacksRequestBody: UpdateSessionCallbacksRequestBody,
): string {
  return JSON.stringify(
    UpdateSessionCallbacksRequestBody$outboundSchema.parse(
      updateSessionCallbacksRequestBody,
    ),
  );
}

export function updateSessionCallbacksRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionCallbacksRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionCallbacksRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionCallbacksRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSessionCallbacksRequest$inboundSchema: z.ZodType<
  UpdateSessionCallbacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateSessionCallbacksRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSessionCallbacksRequest$Outbound = {
  id: string;
  RequestBody: UpdateSessionCallbacksRequestBody$Outbound;
};

/** @internal */
export const UpdateSessionCallbacksRequest$outboundSchema: z.ZodType<
  UpdateSessionCallbacksRequest$Outbound,
  z.ZodTypeDef,
  UpdateSessionCallbacksRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdateSessionCallbacksRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSessionCallbacksRequest$ {
  /** @deprecated use `UpdateSessionCallbacksRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSessionCallbacksRequest$inboundSchema;
  /** @deprecated use `UpdateSessionCallbacksRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSessionCallbacksRequest$outboundSchema;
  /** @deprecated use `UpdateSessionCallbacksRequest$Outbound` instead. */
  export type Outbound = UpdateSessionCallbacksRequest$Outbound;
}

export function updateSessionCallbacksRequestToJSON(
  updateSessionCallbacksRequest: UpdateSessionCallbacksRequest,
): string {
  return JSON.stringify(
    UpdateSessionCallbacksRequest$outboundSchema.parse(
      updateSessionCallbacksRequest,
    ),
  );
}

export function updateSessionCallbacksRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSessionCallbacksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSessionCallbacksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSessionCallbacksRequest' from JSON`,
  );
}
