/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Authentication method used
 */
export const ValidatePreferredProviderAuthMethod = {
  Oauth: "oauth",
  ApiKey: "api_key",
  None: "none",
} as const;
/**
 * Authentication method used
 */
export type ValidatePreferredProviderAuthMethod = ClosedEnum<
  typeof ValidatePreferredProviderAuthMethod
>;

/**
 * Preferred provider validation status
 */
export type ValidatePreferredProviderResponse = {
  /**
   * Authentication method used
   */
  authMethod?: ValidatePreferredProviderAuthMethod | undefined;
  /**
   * Status message
   */
  message?: string | undefined;
  /**
   * Preferred provider name
   */
  provider?: string | undefined;
  /**
   * Whether preferred provider is authenticated
   */
  valid?: boolean | undefined;
};

/** @internal */
export const ValidatePreferredProviderAuthMethod$inboundSchema: z.ZodNativeEnum<
  typeof ValidatePreferredProviderAuthMethod
> = z.nativeEnum(ValidatePreferredProviderAuthMethod);

/** @internal */
export const ValidatePreferredProviderAuthMethod$outboundSchema:
  z.ZodNativeEnum<typeof ValidatePreferredProviderAuthMethod> =
    ValidatePreferredProviderAuthMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatePreferredProviderAuthMethod$ {
  /** @deprecated use `ValidatePreferredProviderAuthMethod$inboundSchema` instead. */
  export const inboundSchema =
    ValidatePreferredProviderAuthMethod$inboundSchema;
  /** @deprecated use `ValidatePreferredProviderAuthMethod$outboundSchema` instead. */
  export const outboundSchema =
    ValidatePreferredProviderAuthMethod$outboundSchema;
}

/** @internal */
export const ValidatePreferredProviderResponse$inboundSchema: z.ZodType<
  ValidatePreferredProviderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  auth_method: ValidatePreferredProviderAuthMethod$inboundSchema.optional(),
  message: z.string().optional(),
  provider: z.string().optional(),
  valid: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "auth_method": "authMethod",
  });
});

/** @internal */
export type ValidatePreferredProviderResponse$Outbound = {
  auth_method?: string | undefined;
  message?: string | undefined;
  provider?: string | undefined;
  valid?: boolean | undefined;
};

/** @internal */
export const ValidatePreferredProviderResponse$outboundSchema: z.ZodType<
  ValidatePreferredProviderResponse$Outbound,
  z.ZodTypeDef,
  ValidatePreferredProviderResponse
> = z.object({
  authMethod: ValidatePreferredProviderAuthMethod$outboundSchema.optional(),
  message: z.string().optional(),
  provider: z.string().optional(),
  valid: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    authMethod: "auth_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatePreferredProviderResponse$ {
  /** @deprecated use `ValidatePreferredProviderResponse$inboundSchema` instead. */
  export const inboundSchema = ValidatePreferredProviderResponse$inboundSchema;
  /** @deprecated use `ValidatePreferredProviderResponse$outboundSchema` instead. */
  export const outboundSchema =
    ValidatePreferredProviderResponse$outboundSchema;
  /** @deprecated use `ValidatePreferredProviderResponse$Outbound` instead. */
  export type Outbound = ValidatePreferredProviderResponse$Outbound;
}

export function validatePreferredProviderResponseToJSON(
  validatePreferredProviderResponse: ValidatePreferredProviderResponse,
): string {
  return JSON.stringify(
    ValidatePreferredProviderResponse$outboundSchema.parse(
      validatePreferredProviderResponse,
    ),
  );
}

export function validatePreferredProviderResponseFromJSON(
  jsonString: string,
): SafeParseResult<ValidatePreferredProviderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidatePreferredProviderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidatePreferredProviderResponse' from JSON`,
  );
}
