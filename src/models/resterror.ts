/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Error type
 */
export const RESTErrorType = {
  BadRequest: "bad_request",
  NotFound: "not_found",
  InternalError: "internal_error",
  Unauthorized: "unauthorized",
  ValidationError: "validation_error",
} as const;
/**
 * Error type
 */
export type RESTErrorType = ClosedEnum<typeof RESTErrorType>;

export type RESTError = {
  /**
   * HTTP status code
   */
  code: number;
  /**
   * Error message
   */
  message: string;
  /**
   * Error type
   */
  type: RESTErrorType;
};

/** @internal */
export const RESTErrorType$inboundSchema: z.ZodNativeEnum<
  typeof RESTErrorType
> = z.nativeEnum(RESTErrorType);

/** @internal */
export const RESTErrorType$outboundSchema: z.ZodNativeEnum<
  typeof RESTErrorType
> = RESTErrorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RESTErrorType$ {
  /** @deprecated use `RESTErrorType$inboundSchema` instead. */
  export const inboundSchema = RESTErrorType$inboundSchema;
  /** @deprecated use `RESTErrorType$outboundSchema` instead. */
  export const outboundSchema = RESTErrorType$outboundSchema;
}

/** @internal */
export const RESTError$inboundSchema: z.ZodType<
  RESTError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.number().int(),
  message: z.string(),
  type: RESTErrorType$inboundSchema,
});

/** @internal */
export type RESTError$Outbound = {
  code: number;
  message: string;
  type: string;
};

/** @internal */
export const RESTError$outboundSchema: z.ZodType<
  RESTError$Outbound,
  z.ZodTypeDef,
  RESTError
> = z.object({
  code: z.number().int(),
  message: z.string(),
  type: RESTErrorType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RESTError$ {
  /** @deprecated use `RESTError$inboundSchema` instead. */
  export const inboundSchema = RESTError$inboundSchema;
  /** @deprecated use `RESTError$outboundSchema` instead. */
  export const outboundSchema = RESTError$outboundSchema;
  /** @deprecated use `RESTError$Outbound` instead. */
  export type Outbound = RESTError$Outbound;
}

export function restErrorToJSON(restError: RESTError): string {
  return JSON.stringify(RESTError$outboundSchema.parse(restError));
}

export function restErrorFromJSON(
  jsonString: string,
): SafeParseResult<RESTError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RESTError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RESTError' from JSON`,
  );
}
