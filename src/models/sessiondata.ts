/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SessionData = {
  /**
   * Number of assistant messages in session
   */
  assistantMessageCount: number;
  /**
   * Total completion tokens used
   */
  completionTokens: number;
  /**
   * Total cost of session
   */
  cost: number;
  /**
   * Session creation timestamp
   */
  createdAt: Date;
  /**
   * First user message (optional)
   */
  firstUserMessage?: string | undefined;
  /**
   * Unique session identifier
   */
  id: string;
  /**
   * Total prompt tokens used
   */
  promptTokens: number;
  /**
   * Session title
   */
  title: string;
  /**
   * Number of tool calls made in session
   */
  toolCallCount: number;
  /**
   * Number of user messages in session
   */
  userMessageCount: number;
  /**
   * Working directory path (optional)
   */
  workingDirectory?: string | undefined;
};

/** @internal */
export const SessionData$inboundSchema: z.ZodType<
  SessionData,
  z.ZodTypeDef,
  unknown
> = z.object({
  assistantMessageCount: z.number().int(),
  completionTokens: z.number().int(),
  cost: z.number(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  firstUserMessage: z.string().optional(),
  id: z.string(),
  promptTokens: z.number().int(),
  title: z.string(),
  toolCallCount: z.number().int(),
  userMessageCount: z.number().int(),
  workingDirectory: z.string().optional(),
});

/** @internal */
export type SessionData$Outbound = {
  assistantMessageCount: number;
  completionTokens: number;
  cost: number;
  createdAt: string;
  firstUserMessage?: string | undefined;
  id: string;
  promptTokens: number;
  title: string;
  toolCallCount: number;
  userMessageCount: number;
  workingDirectory?: string | undefined;
};

/** @internal */
export const SessionData$outboundSchema: z.ZodType<
  SessionData$Outbound,
  z.ZodTypeDef,
  SessionData
> = z.object({
  assistantMessageCount: z.number().int(),
  completionTokens: z.number().int(),
  cost: z.number(),
  createdAt: z.date().transform(v => v.toISOString()),
  firstUserMessage: z.string().optional(),
  id: z.string(),
  promptTokens: z.number().int(),
  title: z.string(),
  toolCallCount: z.number().int(),
  userMessageCount: z.number().int(),
  workingDirectory: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SessionData$ {
  /** @deprecated use `SessionData$inboundSchema` instead. */
  export const inboundSchema = SessionData$inboundSchema;
  /** @deprecated use `SessionData$outboundSchema` instead. */
  export const outboundSchema = SessionData$outboundSchema;
  /** @deprecated use `SessionData$Outbound` instead. */
  export type Outbound = SessionData$Outbound;
}

export function sessionDataToJSON(sessionData: SessionData): string {
  return JSON.stringify(SessionData$outboundSchema.parse(sessionData));
}

export function sessionDataFromJSON(
  jsonString: string,
): SafeParseResult<SessionData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SessionData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SessionData' from JSON`,
  );
}
