/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Event type identifier
 */
export const SSESummarizeEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSESummarizeEventEvent = ClosedEnum<typeof SSESummarizeEventEvent>;

export type SSESummarizeEventData = {
  /**
   * Indicates if summarization is complete
   */
  done: boolean;
  /**
   * Summarization progress description
   */
  progress: string;
  /**
   * Summarization event type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSESummarizeEvent = {
  /**
   * Event type identifier
   */
  event: SSESummarizeEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSESummarizeEventData;
};

/**
 * Event type identifier
 */
export const SSEPermissionEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEPermissionEventEvent = ClosedEnum<
  typeof SSEPermissionEventEvent
>;

/**
 * Additional parameters for the permission request
 */
export type Params = {};

export type SSEPermissionEventData = {
  /**
   * Requested action description
   */
  action: string;
  /**
   * Human-readable permission description
   */
  description: string;
  /**
   * Permission request identifier
   */
  id: string;
  /**
   * Additional parameters for the permission request
   */
  params?: Params | undefined;
  /**
   * File path for permission request
   */
  path?: string | undefined;
  /**
   * Session identifier for the permission request
   */
  sessionId: string;
  /**
   * Tool requiring permission
   */
  toolName: string;
  /**
   * Permission event type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEPermissionEvent = {
  /**
   * Event type identifier
   */
  event: SSEPermissionEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEPermissionEventData;
};

/**
 * Event type identifier
 */
export const SSEToolExecutionCompleteEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEToolExecutionCompleteEventEvent = ClosedEnum<
  typeof SSEToolExecutionCompleteEventEvent
>;

export type SSEToolExecutionCompleteEventData = {
  /**
   * Final execution progress description
   */
  progress: string;
  /**
   * Indicates if tool execution succeeded
   */
  success: boolean;
  /**
   * Tool call identifier
   */
  toolCallId: string;
  /**
   * Name of the completed tool
   */
  toolName: string;
  /**
   * Tool execution complete event type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEToolExecutionCompleteEvent = {
  /**
   * Event type identifier
   */
  event: SSEToolExecutionCompleteEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEToolExecutionCompleteEventData;
};

/**
 * Event type identifier
 */
export const SSEToolExecutionStartEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEToolExecutionStartEventEvent = ClosedEnum<
  typeof SSEToolExecutionStartEventEvent
>;

export type SSEToolExecutionStartEventData = {
  /**
   * Execution progress description
   */
  progress: string;
  /**
   * Tool call identifier
   */
  toolCallId: string;
  /**
   * Name of the tool being executed
   */
  toolName: string;
  /**
   * Tool execution start event type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEToolExecutionStartEvent = {
  /**
   * Event type identifier
   */
  event: SSEToolExecutionStartEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEToolExecutionStartEventData;
};

/**
 * Event type identifier
 */
export const SSEToolEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEToolEventEvent = ClosedEnum<typeof SSEToolEventEvent>;

export type SSEToolEventData = {
  /**
   * Tool execution identifier
   */
  id: string;
  /**
   * Tool input parameters
   */
  input: string;
  /**
   * Tool name being executed
   */
  name: string;
  /**
   * Tool execution status
   */
  status: string;
  /**
   * Tool event type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEToolEvent = {
  /**
   * Event type identifier
   */
  event: SSEToolEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEToolEventData;
};

/**
 * Event type identifier
 */
export const SSEContentEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEContentEventEvent = ClosedEnum<typeof SSEContentEventEvent>;

export type SSEContentEventData = {
  /**
   * Streaming content delta
   */
  content: string;
  /**
   * Content event type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEContentEvent = {
  /**
   * Event type identifier
   */
  event: SSEContentEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEContentEventData;
};

/**
 * Event type identifier
 */
export const SSEThinkingEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEThinkingEventEvent = ClosedEnum<typeof SSEThinkingEventEvent>;

export type SSEThinkingEventData = {
  /**
   * Thinking or reasoning content
   */
  content: string;
  /**
   * Thinking event type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEThinkingEvent = {
  /**
   * Event type identifier
   */
  event: SSEThinkingEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEThinkingEventData;
};

/**
 * Event type identifier
 */
export const SSECompleteEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSECompleteEventEvent = ClosedEnum<typeof SSECompleteEventEvent>;

export type SSECompleteEventData = {
  /**
   * Final response content
   */
  content?: string | undefined;
  /**
   * Indicates message processing completion
   */
  done: boolean;
  /**
   * Completed message identifier
   */
  messageId?: string | undefined;
  /**
   * Optional reasoning content
   */
  reasoning?: string | undefined;
  /**
   * Duration of reasoning process in milliseconds
   */
  reasoningDuration?: number | undefined;
  /**
   * Completion type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSECompleteEvent = {
  /**
   * Event type identifier
   */
  event: SSECompleteEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSECompleteEventData;
};

/**
 * Event type identifier
 */
export const SSEErrorEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEErrorEventEvent = ClosedEnum<typeof SSEErrorEventEvent>;

export type SSEErrorEventData = {
  /**
   * Current retry attempt number
   */
  attempt?: number | undefined;
  /**
   * Error message description
   */
  error: string;
  /**
   * Maximum number of retry attempts
   */
  maxAttempts?: number | undefined;
  /**
   * Milliseconds to wait before retry
   */
  retryAfter?: number | undefined;
  /**
   * Error type classification
   */
  type?: string | undefined;
};

/**
 * Base SSE event with standard fields
 */
export type SSEErrorEvent = {
  /**
   * Event type identifier
   */
  event: SSEErrorEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEErrorEventData;
};

/**
 * Event type identifier
 */
export const SSEHeartbeatEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEHeartbeatEventEvent = ClosedEnum<typeof SSEHeartbeatEventEvent>;

export type SSEHeartbeatEventData = {
  /**
   * Heartbeat type
   */
  type: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEHeartbeatEvent = {
  /**
   * Event type identifier
   */
  event: SSEHeartbeatEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEHeartbeatEventData;
};

/**
 * Event type identifier
 */
export const SSEConnectedEventEvent = {
  Connected: "connected",
  Heartbeat: "heartbeat",
  Error: "error",
  Complete: "complete",
  Thinking: "thinking",
  Content: "content",
  Tool: "tool",
  ToolExecutionStart: "tool_execution_start",
  ToolExecutionComplete: "tool_execution_complete",
  Permission: "permission",
  Summarize: "summarize",
} as const;
/**
 * Event type identifier
 */
export type SSEConnectedEventEvent = ClosedEnum<typeof SSEConnectedEventEvent>;

export type SSEConnectedEventData = {
  /**
   * Session identifier for the connected stream
   */
  sessionId: string;
};

/**
 * Base SSE event with standard fields
 */
export type SSEConnectedEvent = {
  /**
   * Event type identifier
   */
  event: SSEConnectedEventEvent;
  /**
   * Unique sequential event identifier for ordering and reconnection
   */
  id: string;
  /**
   * Client retry interval in milliseconds
   */
  retry?: number | undefined;
  data: SSEConnectedEventData;
};

/**
 * Server-Sent Event stream with discriminated event types
 */
export type SSEEventStream =
  | (SSECompleteEvent & { event: "complete" })
  | (SSEConnectedEvent & { event: "connected" })
  | (SSEContentEvent & { event: "content" })
  | (SSEErrorEvent & { event: "error" })
  | (SSEHeartbeatEvent & { event: "heartbeat" })
  | (SSEPermissionEvent & { event: "permission" })
  | (SSESummarizeEvent & { event: "summarize" })
  | (SSEThinkingEvent & { event: "thinking" })
  | (SSEToolEvent & { event: "tool" })
  | (SSEToolExecutionCompleteEvent & { event: "tool_execution_complete" })
  | (SSEToolExecutionStartEvent & { event: "tool_execution_start" });

/** @internal */
export const SSESummarizeEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSESummarizeEventEvent
> = z.nativeEnum(SSESummarizeEventEvent);

/** @internal */
export const SSESummarizeEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSESummarizeEventEvent
> = SSESummarizeEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSESummarizeEventEvent$ {
  /** @deprecated use `SSESummarizeEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSESummarizeEventEvent$inboundSchema;
  /** @deprecated use `SSESummarizeEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSESummarizeEventEvent$outboundSchema;
}

/** @internal */
export const SSESummarizeEventData$inboundSchema: z.ZodType<
  SSESummarizeEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  done: z.boolean(),
  progress: z.string(),
  type: z.string(),
});

/** @internal */
export type SSESummarizeEventData$Outbound = {
  done: boolean;
  progress: string;
  type: string;
};

/** @internal */
export const SSESummarizeEventData$outboundSchema: z.ZodType<
  SSESummarizeEventData$Outbound,
  z.ZodTypeDef,
  SSESummarizeEventData
> = z.object({
  done: z.boolean(),
  progress: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSESummarizeEventData$ {
  /** @deprecated use `SSESummarizeEventData$inboundSchema` instead. */
  export const inboundSchema = SSESummarizeEventData$inboundSchema;
  /** @deprecated use `SSESummarizeEventData$outboundSchema` instead. */
  export const outboundSchema = SSESummarizeEventData$outboundSchema;
  /** @deprecated use `SSESummarizeEventData$Outbound` instead. */
  export type Outbound = SSESummarizeEventData$Outbound;
}

export function sseSummarizeEventDataToJSON(
  sseSummarizeEventData: SSESummarizeEventData,
): string {
  return JSON.stringify(
    SSESummarizeEventData$outboundSchema.parse(sseSummarizeEventData),
  );
}

export function sseSummarizeEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSESummarizeEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSESummarizeEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSESummarizeEventData' from JSON`,
  );
}

/** @internal */
export const SSESummarizeEvent$inboundSchema: z.ZodType<
  SSESummarizeEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSESummarizeEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSESummarizeEventData$inboundSchema)),
});

/** @internal */
export type SSESummarizeEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSESummarizeEventData$Outbound;
};

/** @internal */
export const SSESummarizeEvent$outboundSchema: z.ZodType<
  SSESummarizeEvent$Outbound,
  z.ZodTypeDef,
  SSESummarizeEvent
> = z.object({
  event: SSESummarizeEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSESummarizeEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSESummarizeEvent$ {
  /** @deprecated use `SSESummarizeEvent$inboundSchema` instead. */
  export const inboundSchema = SSESummarizeEvent$inboundSchema;
  /** @deprecated use `SSESummarizeEvent$outboundSchema` instead. */
  export const outboundSchema = SSESummarizeEvent$outboundSchema;
  /** @deprecated use `SSESummarizeEvent$Outbound` instead. */
  export type Outbound = SSESummarizeEvent$Outbound;
}

export function sseSummarizeEventToJSON(
  sseSummarizeEvent: SSESummarizeEvent,
): string {
  return JSON.stringify(
    SSESummarizeEvent$outboundSchema.parse(sseSummarizeEvent),
  );
}

export function sseSummarizeEventFromJSON(
  jsonString: string,
): SafeParseResult<SSESummarizeEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSESummarizeEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSESummarizeEvent' from JSON`,
  );
}

/** @internal */
export const SSEPermissionEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEPermissionEventEvent
> = z.nativeEnum(SSEPermissionEventEvent);

/** @internal */
export const SSEPermissionEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEPermissionEventEvent
> = SSEPermissionEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEPermissionEventEvent$ {
  /** @deprecated use `SSEPermissionEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEPermissionEventEvent$inboundSchema;
  /** @deprecated use `SSEPermissionEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEPermissionEventEvent$outboundSchema;
}

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Params$Outbound = {};

/** @internal */
export const Params$outboundSchema: z.ZodType<
  Params$Outbound,
  z.ZodTypeDef,
  Params
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
  /** @deprecated use `Params$inboundSchema` instead. */
  export const inboundSchema = Params$inboundSchema;
  /** @deprecated use `Params$outboundSchema` instead. */
  export const outboundSchema = Params$outboundSchema;
  /** @deprecated use `Params$Outbound` instead. */
  export type Outbound = Params$Outbound;
}

export function paramsToJSON(params: Params): string {
  return JSON.stringify(Params$outboundSchema.parse(params));
}

export function paramsFromJSON(
  jsonString: string,
): SafeParseResult<Params, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Params$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Params' from JSON`,
  );
}

/** @internal */
export const SSEPermissionEventData$inboundSchema: z.ZodType<
  SSEPermissionEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string(),
  description: z.string(),
  id: z.string(),
  params: z.lazy(() => Params$inboundSchema).optional(),
  path: z.string().optional(),
  sessionId: z.string(),
  toolName: z.string(),
  type: z.string(),
});

/** @internal */
export type SSEPermissionEventData$Outbound = {
  action: string;
  description: string;
  id: string;
  params?: Params$Outbound | undefined;
  path?: string | undefined;
  sessionId: string;
  toolName: string;
  type: string;
};

/** @internal */
export const SSEPermissionEventData$outboundSchema: z.ZodType<
  SSEPermissionEventData$Outbound,
  z.ZodTypeDef,
  SSEPermissionEventData
> = z.object({
  action: z.string(),
  description: z.string(),
  id: z.string(),
  params: z.lazy(() => Params$outboundSchema).optional(),
  path: z.string().optional(),
  sessionId: z.string(),
  toolName: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEPermissionEventData$ {
  /** @deprecated use `SSEPermissionEventData$inboundSchema` instead. */
  export const inboundSchema = SSEPermissionEventData$inboundSchema;
  /** @deprecated use `SSEPermissionEventData$outboundSchema` instead. */
  export const outboundSchema = SSEPermissionEventData$outboundSchema;
  /** @deprecated use `SSEPermissionEventData$Outbound` instead. */
  export type Outbound = SSEPermissionEventData$Outbound;
}

export function ssePermissionEventDataToJSON(
  ssePermissionEventData: SSEPermissionEventData,
): string {
  return JSON.stringify(
    SSEPermissionEventData$outboundSchema.parse(ssePermissionEventData),
  );
}

export function ssePermissionEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEPermissionEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEPermissionEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEPermissionEventData' from JSON`,
  );
}

/** @internal */
export const SSEPermissionEvent$inboundSchema: z.ZodType<
  SSEPermissionEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEPermissionEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEPermissionEventData$inboundSchema)),
});

/** @internal */
export type SSEPermissionEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEPermissionEventData$Outbound;
};

/** @internal */
export const SSEPermissionEvent$outboundSchema: z.ZodType<
  SSEPermissionEvent$Outbound,
  z.ZodTypeDef,
  SSEPermissionEvent
> = z.object({
  event: SSEPermissionEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEPermissionEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEPermissionEvent$ {
  /** @deprecated use `SSEPermissionEvent$inboundSchema` instead. */
  export const inboundSchema = SSEPermissionEvent$inboundSchema;
  /** @deprecated use `SSEPermissionEvent$outboundSchema` instead. */
  export const outboundSchema = SSEPermissionEvent$outboundSchema;
  /** @deprecated use `SSEPermissionEvent$Outbound` instead. */
  export type Outbound = SSEPermissionEvent$Outbound;
}

export function ssePermissionEventToJSON(
  ssePermissionEvent: SSEPermissionEvent,
): string {
  return JSON.stringify(
    SSEPermissionEvent$outboundSchema.parse(ssePermissionEvent),
  );
}

export function ssePermissionEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEPermissionEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEPermissionEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEPermissionEvent' from JSON`,
  );
}

/** @internal */
export const SSEToolExecutionCompleteEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEToolExecutionCompleteEventEvent
> = z.nativeEnum(SSEToolExecutionCompleteEventEvent);

/** @internal */
export const SSEToolExecutionCompleteEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEToolExecutionCompleteEventEvent
> = SSEToolExecutionCompleteEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolExecutionCompleteEventEvent$ {
  /** @deprecated use `SSEToolExecutionCompleteEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEToolExecutionCompleteEventEvent$inboundSchema;
  /** @deprecated use `SSEToolExecutionCompleteEventEvent$outboundSchema` instead. */
  export const outboundSchema =
    SSEToolExecutionCompleteEventEvent$outboundSchema;
}

/** @internal */
export const SSEToolExecutionCompleteEventData$inboundSchema: z.ZodType<
  SSEToolExecutionCompleteEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  progress: z.string(),
  success: z.boolean(),
  toolCallId: z.string(),
  toolName: z.string(),
  type: z.string(),
});

/** @internal */
export type SSEToolExecutionCompleteEventData$Outbound = {
  progress: string;
  success: boolean;
  toolCallId: string;
  toolName: string;
  type: string;
};

/** @internal */
export const SSEToolExecutionCompleteEventData$outboundSchema: z.ZodType<
  SSEToolExecutionCompleteEventData$Outbound,
  z.ZodTypeDef,
  SSEToolExecutionCompleteEventData
> = z.object({
  progress: z.string(),
  success: z.boolean(),
  toolCallId: z.string(),
  toolName: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolExecutionCompleteEventData$ {
  /** @deprecated use `SSEToolExecutionCompleteEventData$inboundSchema` instead. */
  export const inboundSchema = SSEToolExecutionCompleteEventData$inboundSchema;
  /** @deprecated use `SSEToolExecutionCompleteEventData$outboundSchema` instead. */
  export const outboundSchema =
    SSEToolExecutionCompleteEventData$outboundSchema;
  /** @deprecated use `SSEToolExecutionCompleteEventData$Outbound` instead. */
  export type Outbound = SSEToolExecutionCompleteEventData$Outbound;
}

export function sseToolExecutionCompleteEventDataToJSON(
  sseToolExecutionCompleteEventData: SSEToolExecutionCompleteEventData,
): string {
  return JSON.stringify(
    SSEToolExecutionCompleteEventData$outboundSchema.parse(
      sseToolExecutionCompleteEventData,
    ),
  );
}

export function sseToolExecutionCompleteEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEToolExecutionCompleteEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEToolExecutionCompleteEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEToolExecutionCompleteEventData' from JSON`,
  );
}

/** @internal */
export const SSEToolExecutionCompleteEvent$inboundSchema: z.ZodType<
  SSEToolExecutionCompleteEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEToolExecutionCompleteEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEToolExecutionCompleteEventData$inboundSchema)),
});

/** @internal */
export type SSEToolExecutionCompleteEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEToolExecutionCompleteEventData$Outbound;
};

/** @internal */
export const SSEToolExecutionCompleteEvent$outboundSchema: z.ZodType<
  SSEToolExecutionCompleteEvent$Outbound,
  z.ZodTypeDef,
  SSEToolExecutionCompleteEvent
> = z.object({
  event: SSEToolExecutionCompleteEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEToolExecutionCompleteEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolExecutionCompleteEvent$ {
  /** @deprecated use `SSEToolExecutionCompleteEvent$inboundSchema` instead. */
  export const inboundSchema = SSEToolExecutionCompleteEvent$inboundSchema;
  /** @deprecated use `SSEToolExecutionCompleteEvent$outboundSchema` instead. */
  export const outboundSchema = SSEToolExecutionCompleteEvent$outboundSchema;
  /** @deprecated use `SSEToolExecutionCompleteEvent$Outbound` instead. */
  export type Outbound = SSEToolExecutionCompleteEvent$Outbound;
}

export function sseToolExecutionCompleteEventToJSON(
  sseToolExecutionCompleteEvent: SSEToolExecutionCompleteEvent,
): string {
  return JSON.stringify(
    SSEToolExecutionCompleteEvent$outboundSchema.parse(
      sseToolExecutionCompleteEvent,
    ),
  );
}

export function sseToolExecutionCompleteEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEToolExecutionCompleteEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEToolExecutionCompleteEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEToolExecutionCompleteEvent' from JSON`,
  );
}

/** @internal */
export const SSEToolExecutionStartEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEToolExecutionStartEventEvent
> = z.nativeEnum(SSEToolExecutionStartEventEvent);

/** @internal */
export const SSEToolExecutionStartEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEToolExecutionStartEventEvent
> = SSEToolExecutionStartEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolExecutionStartEventEvent$ {
  /** @deprecated use `SSEToolExecutionStartEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEToolExecutionStartEventEvent$inboundSchema;
  /** @deprecated use `SSEToolExecutionStartEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEToolExecutionStartEventEvent$outboundSchema;
}

/** @internal */
export const SSEToolExecutionStartEventData$inboundSchema: z.ZodType<
  SSEToolExecutionStartEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  progress: z.string(),
  toolCallId: z.string(),
  toolName: z.string(),
  type: z.string(),
});

/** @internal */
export type SSEToolExecutionStartEventData$Outbound = {
  progress: string;
  toolCallId: string;
  toolName: string;
  type: string;
};

/** @internal */
export const SSEToolExecutionStartEventData$outboundSchema: z.ZodType<
  SSEToolExecutionStartEventData$Outbound,
  z.ZodTypeDef,
  SSEToolExecutionStartEventData
> = z.object({
  progress: z.string(),
  toolCallId: z.string(),
  toolName: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolExecutionStartEventData$ {
  /** @deprecated use `SSEToolExecutionStartEventData$inboundSchema` instead. */
  export const inboundSchema = SSEToolExecutionStartEventData$inboundSchema;
  /** @deprecated use `SSEToolExecutionStartEventData$outboundSchema` instead. */
  export const outboundSchema = SSEToolExecutionStartEventData$outboundSchema;
  /** @deprecated use `SSEToolExecutionStartEventData$Outbound` instead. */
  export type Outbound = SSEToolExecutionStartEventData$Outbound;
}

export function sseToolExecutionStartEventDataToJSON(
  sseToolExecutionStartEventData: SSEToolExecutionStartEventData,
): string {
  return JSON.stringify(
    SSEToolExecutionStartEventData$outboundSchema.parse(
      sseToolExecutionStartEventData,
    ),
  );
}

export function sseToolExecutionStartEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEToolExecutionStartEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEToolExecutionStartEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEToolExecutionStartEventData' from JSON`,
  );
}

/** @internal */
export const SSEToolExecutionStartEvent$inboundSchema: z.ZodType<
  SSEToolExecutionStartEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEToolExecutionStartEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEToolExecutionStartEventData$inboundSchema)),
});

/** @internal */
export type SSEToolExecutionStartEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEToolExecutionStartEventData$Outbound;
};

/** @internal */
export const SSEToolExecutionStartEvent$outboundSchema: z.ZodType<
  SSEToolExecutionStartEvent$Outbound,
  z.ZodTypeDef,
  SSEToolExecutionStartEvent
> = z.object({
  event: SSEToolExecutionStartEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEToolExecutionStartEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolExecutionStartEvent$ {
  /** @deprecated use `SSEToolExecutionStartEvent$inboundSchema` instead. */
  export const inboundSchema = SSEToolExecutionStartEvent$inboundSchema;
  /** @deprecated use `SSEToolExecutionStartEvent$outboundSchema` instead. */
  export const outboundSchema = SSEToolExecutionStartEvent$outboundSchema;
  /** @deprecated use `SSEToolExecutionStartEvent$Outbound` instead. */
  export type Outbound = SSEToolExecutionStartEvent$Outbound;
}

export function sseToolExecutionStartEventToJSON(
  sseToolExecutionStartEvent: SSEToolExecutionStartEvent,
): string {
  return JSON.stringify(
    SSEToolExecutionStartEvent$outboundSchema.parse(sseToolExecutionStartEvent),
  );
}

export function sseToolExecutionStartEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEToolExecutionStartEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEToolExecutionStartEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEToolExecutionStartEvent' from JSON`,
  );
}

/** @internal */
export const SSEToolEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEToolEventEvent
> = z.nativeEnum(SSEToolEventEvent);

/** @internal */
export const SSEToolEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEToolEventEvent
> = SSEToolEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolEventEvent$ {
  /** @deprecated use `SSEToolEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEToolEventEvent$inboundSchema;
  /** @deprecated use `SSEToolEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEToolEventEvent$outboundSchema;
}

/** @internal */
export const SSEToolEventData$inboundSchema: z.ZodType<
  SSEToolEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  input: z.string(),
  name: z.string(),
  status: z.string(),
  type: z.string(),
});

/** @internal */
export type SSEToolEventData$Outbound = {
  id: string;
  input: string;
  name: string;
  status: string;
  type: string;
};

/** @internal */
export const SSEToolEventData$outboundSchema: z.ZodType<
  SSEToolEventData$Outbound,
  z.ZodTypeDef,
  SSEToolEventData
> = z.object({
  id: z.string(),
  input: z.string(),
  name: z.string(),
  status: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolEventData$ {
  /** @deprecated use `SSEToolEventData$inboundSchema` instead. */
  export const inboundSchema = SSEToolEventData$inboundSchema;
  /** @deprecated use `SSEToolEventData$outboundSchema` instead. */
  export const outboundSchema = SSEToolEventData$outboundSchema;
  /** @deprecated use `SSEToolEventData$Outbound` instead. */
  export type Outbound = SSEToolEventData$Outbound;
}

export function sseToolEventDataToJSON(
  sseToolEventData: SSEToolEventData,
): string {
  return JSON.stringify(
    SSEToolEventData$outboundSchema.parse(sseToolEventData),
  );
}

export function sseToolEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEToolEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEToolEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEToolEventData' from JSON`,
  );
}

/** @internal */
export const SSEToolEvent$inboundSchema: z.ZodType<
  SSEToolEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEToolEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEToolEventData$inboundSchema)),
});

/** @internal */
export type SSEToolEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEToolEventData$Outbound;
};

/** @internal */
export const SSEToolEvent$outboundSchema: z.ZodType<
  SSEToolEvent$Outbound,
  z.ZodTypeDef,
  SSEToolEvent
> = z.object({
  event: SSEToolEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEToolEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEToolEvent$ {
  /** @deprecated use `SSEToolEvent$inboundSchema` instead. */
  export const inboundSchema = SSEToolEvent$inboundSchema;
  /** @deprecated use `SSEToolEvent$outboundSchema` instead. */
  export const outboundSchema = SSEToolEvent$outboundSchema;
  /** @deprecated use `SSEToolEvent$Outbound` instead. */
  export type Outbound = SSEToolEvent$Outbound;
}

export function sseToolEventToJSON(sseToolEvent: SSEToolEvent): string {
  return JSON.stringify(SSEToolEvent$outboundSchema.parse(sseToolEvent));
}

export function sseToolEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEToolEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEToolEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEToolEvent' from JSON`,
  );
}

/** @internal */
export const SSEContentEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEContentEventEvent
> = z.nativeEnum(SSEContentEventEvent);

/** @internal */
export const SSEContentEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEContentEventEvent
> = SSEContentEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEContentEventEvent$ {
  /** @deprecated use `SSEContentEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEContentEventEvent$inboundSchema;
  /** @deprecated use `SSEContentEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEContentEventEvent$outboundSchema;
}

/** @internal */
export const SSEContentEventData$inboundSchema: z.ZodType<
  SSEContentEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  type: z.string(),
});

/** @internal */
export type SSEContentEventData$Outbound = {
  content: string;
  type: string;
};

/** @internal */
export const SSEContentEventData$outboundSchema: z.ZodType<
  SSEContentEventData$Outbound,
  z.ZodTypeDef,
  SSEContentEventData
> = z.object({
  content: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEContentEventData$ {
  /** @deprecated use `SSEContentEventData$inboundSchema` instead. */
  export const inboundSchema = SSEContentEventData$inboundSchema;
  /** @deprecated use `SSEContentEventData$outboundSchema` instead. */
  export const outboundSchema = SSEContentEventData$outboundSchema;
  /** @deprecated use `SSEContentEventData$Outbound` instead. */
  export type Outbound = SSEContentEventData$Outbound;
}

export function sseContentEventDataToJSON(
  sseContentEventData: SSEContentEventData,
): string {
  return JSON.stringify(
    SSEContentEventData$outboundSchema.parse(sseContentEventData),
  );
}

export function sseContentEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEContentEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEContentEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEContentEventData' from JSON`,
  );
}

/** @internal */
export const SSEContentEvent$inboundSchema: z.ZodType<
  SSEContentEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEContentEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEContentEventData$inboundSchema)),
});

/** @internal */
export type SSEContentEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEContentEventData$Outbound;
};

/** @internal */
export const SSEContentEvent$outboundSchema: z.ZodType<
  SSEContentEvent$Outbound,
  z.ZodTypeDef,
  SSEContentEvent
> = z.object({
  event: SSEContentEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEContentEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEContentEvent$ {
  /** @deprecated use `SSEContentEvent$inboundSchema` instead. */
  export const inboundSchema = SSEContentEvent$inboundSchema;
  /** @deprecated use `SSEContentEvent$outboundSchema` instead. */
  export const outboundSchema = SSEContentEvent$outboundSchema;
  /** @deprecated use `SSEContentEvent$Outbound` instead. */
  export type Outbound = SSEContentEvent$Outbound;
}

export function sseContentEventToJSON(
  sseContentEvent: SSEContentEvent,
): string {
  return JSON.stringify(SSEContentEvent$outboundSchema.parse(sseContentEvent));
}

export function sseContentEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEContentEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEContentEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEContentEvent' from JSON`,
  );
}

/** @internal */
export const SSEThinkingEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEThinkingEventEvent
> = z.nativeEnum(SSEThinkingEventEvent);

/** @internal */
export const SSEThinkingEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEThinkingEventEvent
> = SSEThinkingEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEThinkingEventEvent$ {
  /** @deprecated use `SSEThinkingEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEThinkingEventEvent$inboundSchema;
  /** @deprecated use `SSEThinkingEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEThinkingEventEvent$outboundSchema;
}

/** @internal */
export const SSEThinkingEventData$inboundSchema: z.ZodType<
  SSEThinkingEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  type: z.string(),
});

/** @internal */
export type SSEThinkingEventData$Outbound = {
  content: string;
  type: string;
};

/** @internal */
export const SSEThinkingEventData$outboundSchema: z.ZodType<
  SSEThinkingEventData$Outbound,
  z.ZodTypeDef,
  SSEThinkingEventData
> = z.object({
  content: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEThinkingEventData$ {
  /** @deprecated use `SSEThinkingEventData$inboundSchema` instead. */
  export const inboundSchema = SSEThinkingEventData$inboundSchema;
  /** @deprecated use `SSEThinkingEventData$outboundSchema` instead. */
  export const outboundSchema = SSEThinkingEventData$outboundSchema;
  /** @deprecated use `SSEThinkingEventData$Outbound` instead. */
  export type Outbound = SSEThinkingEventData$Outbound;
}

export function sseThinkingEventDataToJSON(
  sseThinkingEventData: SSEThinkingEventData,
): string {
  return JSON.stringify(
    SSEThinkingEventData$outboundSchema.parse(sseThinkingEventData),
  );
}

export function sseThinkingEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEThinkingEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEThinkingEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEThinkingEventData' from JSON`,
  );
}

/** @internal */
export const SSEThinkingEvent$inboundSchema: z.ZodType<
  SSEThinkingEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEThinkingEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEThinkingEventData$inboundSchema)),
});

/** @internal */
export type SSEThinkingEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEThinkingEventData$Outbound;
};

/** @internal */
export const SSEThinkingEvent$outboundSchema: z.ZodType<
  SSEThinkingEvent$Outbound,
  z.ZodTypeDef,
  SSEThinkingEvent
> = z.object({
  event: SSEThinkingEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEThinkingEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEThinkingEvent$ {
  /** @deprecated use `SSEThinkingEvent$inboundSchema` instead. */
  export const inboundSchema = SSEThinkingEvent$inboundSchema;
  /** @deprecated use `SSEThinkingEvent$outboundSchema` instead. */
  export const outboundSchema = SSEThinkingEvent$outboundSchema;
  /** @deprecated use `SSEThinkingEvent$Outbound` instead. */
  export type Outbound = SSEThinkingEvent$Outbound;
}

export function sseThinkingEventToJSON(
  sseThinkingEvent: SSEThinkingEvent,
): string {
  return JSON.stringify(
    SSEThinkingEvent$outboundSchema.parse(sseThinkingEvent),
  );
}

export function sseThinkingEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEThinkingEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEThinkingEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEThinkingEvent' from JSON`,
  );
}

/** @internal */
export const SSECompleteEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSECompleteEventEvent
> = z.nativeEnum(SSECompleteEventEvent);

/** @internal */
export const SSECompleteEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSECompleteEventEvent
> = SSECompleteEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSECompleteEventEvent$ {
  /** @deprecated use `SSECompleteEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSECompleteEventEvent$inboundSchema;
  /** @deprecated use `SSECompleteEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSECompleteEventEvent$outboundSchema;
}

/** @internal */
export const SSECompleteEventData$inboundSchema: z.ZodType<
  SSECompleteEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string().optional(),
  done: z.boolean(),
  messageId: z.string().optional(),
  reasoning: z.string().optional(),
  reasoningDuration: z.number().int().optional(),
  type: z.string(),
});

/** @internal */
export type SSECompleteEventData$Outbound = {
  content?: string | undefined;
  done: boolean;
  messageId?: string | undefined;
  reasoning?: string | undefined;
  reasoningDuration?: number | undefined;
  type: string;
};

/** @internal */
export const SSECompleteEventData$outboundSchema: z.ZodType<
  SSECompleteEventData$Outbound,
  z.ZodTypeDef,
  SSECompleteEventData
> = z.object({
  content: z.string().optional(),
  done: z.boolean(),
  messageId: z.string().optional(),
  reasoning: z.string().optional(),
  reasoningDuration: z.number().int().optional(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSECompleteEventData$ {
  /** @deprecated use `SSECompleteEventData$inboundSchema` instead. */
  export const inboundSchema = SSECompleteEventData$inboundSchema;
  /** @deprecated use `SSECompleteEventData$outboundSchema` instead. */
  export const outboundSchema = SSECompleteEventData$outboundSchema;
  /** @deprecated use `SSECompleteEventData$Outbound` instead. */
  export type Outbound = SSECompleteEventData$Outbound;
}

export function sseCompleteEventDataToJSON(
  sseCompleteEventData: SSECompleteEventData,
): string {
  return JSON.stringify(
    SSECompleteEventData$outboundSchema.parse(sseCompleteEventData),
  );
}

export function sseCompleteEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSECompleteEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSECompleteEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSECompleteEventData' from JSON`,
  );
}

/** @internal */
export const SSECompleteEvent$inboundSchema: z.ZodType<
  SSECompleteEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSECompleteEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSECompleteEventData$inboundSchema)),
});

/** @internal */
export type SSECompleteEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSECompleteEventData$Outbound;
};

/** @internal */
export const SSECompleteEvent$outboundSchema: z.ZodType<
  SSECompleteEvent$Outbound,
  z.ZodTypeDef,
  SSECompleteEvent
> = z.object({
  event: SSECompleteEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSECompleteEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSECompleteEvent$ {
  /** @deprecated use `SSECompleteEvent$inboundSchema` instead. */
  export const inboundSchema = SSECompleteEvent$inboundSchema;
  /** @deprecated use `SSECompleteEvent$outboundSchema` instead. */
  export const outboundSchema = SSECompleteEvent$outboundSchema;
  /** @deprecated use `SSECompleteEvent$Outbound` instead. */
  export type Outbound = SSECompleteEvent$Outbound;
}

export function sseCompleteEventToJSON(
  sseCompleteEvent: SSECompleteEvent,
): string {
  return JSON.stringify(
    SSECompleteEvent$outboundSchema.parse(sseCompleteEvent),
  );
}

export function sseCompleteEventFromJSON(
  jsonString: string,
): SafeParseResult<SSECompleteEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSECompleteEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSECompleteEvent' from JSON`,
  );
}

/** @internal */
export const SSEErrorEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEErrorEventEvent
> = z.nativeEnum(SSEErrorEventEvent);

/** @internal */
export const SSEErrorEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEErrorEventEvent
> = SSEErrorEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEErrorEventEvent$ {
  /** @deprecated use `SSEErrorEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEErrorEventEvent$inboundSchema;
  /** @deprecated use `SSEErrorEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEErrorEventEvent$outboundSchema;
}

/** @internal */
export const SSEErrorEventData$inboundSchema: z.ZodType<
  SSEErrorEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attempt: z.number().int().optional(),
  error: z.string(),
  maxAttempts: z.number().int().optional(),
  retryAfter: z.number().int().optional(),
  type: z.string().optional(),
});

/** @internal */
export type SSEErrorEventData$Outbound = {
  attempt?: number | undefined;
  error: string;
  maxAttempts?: number | undefined;
  retryAfter?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const SSEErrorEventData$outboundSchema: z.ZodType<
  SSEErrorEventData$Outbound,
  z.ZodTypeDef,
  SSEErrorEventData
> = z.object({
  attempt: z.number().int().optional(),
  error: z.string(),
  maxAttempts: z.number().int().optional(),
  retryAfter: z.number().int().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEErrorEventData$ {
  /** @deprecated use `SSEErrorEventData$inboundSchema` instead. */
  export const inboundSchema = SSEErrorEventData$inboundSchema;
  /** @deprecated use `SSEErrorEventData$outboundSchema` instead. */
  export const outboundSchema = SSEErrorEventData$outboundSchema;
  /** @deprecated use `SSEErrorEventData$Outbound` instead. */
  export type Outbound = SSEErrorEventData$Outbound;
}

export function sseErrorEventDataToJSON(
  sseErrorEventData: SSEErrorEventData,
): string {
  return JSON.stringify(
    SSEErrorEventData$outboundSchema.parse(sseErrorEventData),
  );
}

export function sseErrorEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEErrorEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEErrorEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEErrorEventData' from JSON`,
  );
}

/** @internal */
export const SSEErrorEvent$inboundSchema: z.ZodType<
  SSEErrorEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEErrorEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEErrorEventData$inboundSchema)),
});

/** @internal */
export type SSEErrorEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEErrorEventData$Outbound;
};

/** @internal */
export const SSEErrorEvent$outboundSchema: z.ZodType<
  SSEErrorEvent$Outbound,
  z.ZodTypeDef,
  SSEErrorEvent
> = z.object({
  event: SSEErrorEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEErrorEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEErrorEvent$ {
  /** @deprecated use `SSEErrorEvent$inboundSchema` instead. */
  export const inboundSchema = SSEErrorEvent$inboundSchema;
  /** @deprecated use `SSEErrorEvent$outboundSchema` instead. */
  export const outboundSchema = SSEErrorEvent$outboundSchema;
  /** @deprecated use `SSEErrorEvent$Outbound` instead. */
  export type Outbound = SSEErrorEvent$Outbound;
}

export function sseErrorEventToJSON(sseErrorEvent: SSEErrorEvent): string {
  return JSON.stringify(SSEErrorEvent$outboundSchema.parse(sseErrorEvent));
}

export function sseErrorEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEErrorEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEErrorEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEErrorEvent' from JSON`,
  );
}

/** @internal */
export const SSEHeartbeatEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEHeartbeatEventEvent
> = z.nativeEnum(SSEHeartbeatEventEvent);

/** @internal */
export const SSEHeartbeatEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEHeartbeatEventEvent
> = SSEHeartbeatEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEHeartbeatEventEvent$ {
  /** @deprecated use `SSEHeartbeatEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEHeartbeatEventEvent$inboundSchema;
  /** @deprecated use `SSEHeartbeatEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEHeartbeatEventEvent$outboundSchema;
}

/** @internal */
export const SSEHeartbeatEventData$inboundSchema: z.ZodType<
  SSEHeartbeatEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
});

/** @internal */
export type SSEHeartbeatEventData$Outbound = {
  type: string;
};

/** @internal */
export const SSEHeartbeatEventData$outboundSchema: z.ZodType<
  SSEHeartbeatEventData$Outbound,
  z.ZodTypeDef,
  SSEHeartbeatEventData
> = z.object({
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEHeartbeatEventData$ {
  /** @deprecated use `SSEHeartbeatEventData$inboundSchema` instead. */
  export const inboundSchema = SSEHeartbeatEventData$inboundSchema;
  /** @deprecated use `SSEHeartbeatEventData$outboundSchema` instead. */
  export const outboundSchema = SSEHeartbeatEventData$outboundSchema;
  /** @deprecated use `SSEHeartbeatEventData$Outbound` instead. */
  export type Outbound = SSEHeartbeatEventData$Outbound;
}

export function sseHeartbeatEventDataToJSON(
  sseHeartbeatEventData: SSEHeartbeatEventData,
): string {
  return JSON.stringify(
    SSEHeartbeatEventData$outboundSchema.parse(sseHeartbeatEventData),
  );
}

export function sseHeartbeatEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEHeartbeatEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEHeartbeatEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEHeartbeatEventData' from JSON`,
  );
}

/** @internal */
export const SSEHeartbeatEvent$inboundSchema: z.ZodType<
  SSEHeartbeatEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEHeartbeatEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEHeartbeatEventData$inboundSchema)),
});

/** @internal */
export type SSEHeartbeatEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEHeartbeatEventData$Outbound;
};

/** @internal */
export const SSEHeartbeatEvent$outboundSchema: z.ZodType<
  SSEHeartbeatEvent$Outbound,
  z.ZodTypeDef,
  SSEHeartbeatEvent
> = z.object({
  event: SSEHeartbeatEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEHeartbeatEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEHeartbeatEvent$ {
  /** @deprecated use `SSEHeartbeatEvent$inboundSchema` instead. */
  export const inboundSchema = SSEHeartbeatEvent$inboundSchema;
  /** @deprecated use `SSEHeartbeatEvent$outboundSchema` instead. */
  export const outboundSchema = SSEHeartbeatEvent$outboundSchema;
  /** @deprecated use `SSEHeartbeatEvent$Outbound` instead. */
  export type Outbound = SSEHeartbeatEvent$Outbound;
}

export function sseHeartbeatEventToJSON(
  sseHeartbeatEvent: SSEHeartbeatEvent,
): string {
  return JSON.stringify(
    SSEHeartbeatEvent$outboundSchema.parse(sseHeartbeatEvent),
  );
}

export function sseHeartbeatEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEHeartbeatEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEHeartbeatEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEHeartbeatEvent' from JSON`,
  );
}

/** @internal */
export const SSEConnectedEventEvent$inboundSchema: z.ZodNativeEnum<
  typeof SSEConnectedEventEvent
> = z.nativeEnum(SSEConnectedEventEvent);

/** @internal */
export const SSEConnectedEventEvent$outboundSchema: z.ZodNativeEnum<
  typeof SSEConnectedEventEvent
> = SSEConnectedEventEvent$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEConnectedEventEvent$ {
  /** @deprecated use `SSEConnectedEventEvent$inboundSchema` instead. */
  export const inboundSchema = SSEConnectedEventEvent$inboundSchema;
  /** @deprecated use `SSEConnectedEventEvent$outboundSchema` instead. */
  export const outboundSchema = SSEConnectedEventEvent$outboundSchema;
}

/** @internal */
export const SSEConnectedEventData$inboundSchema: z.ZodType<
  SSEConnectedEventData,
  z.ZodTypeDef,
  unknown
> = z.object({
  sessionId: z.string(),
});

/** @internal */
export type SSEConnectedEventData$Outbound = {
  sessionId: string;
};

/** @internal */
export const SSEConnectedEventData$outboundSchema: z.ZodType<
  SSEConnectedEventData$Outbound,
  z.ZodTypeDef,
  SSEConnectedEventData
> = z.object({
  sessionId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEConnectedEventData$ {
  /** @deprecated use `SSEConnectedEventData$inboundSchema` instead. */
  export const inboundSchema = SSEConnectedEventData$inboundSchema;
  /** @deprecated use `SSEConnectedEventData$outboundSchema` instead. */
  export const outboundSchema = SSEConnectedEventData$outboundSchema;
  /** @deprecated use `SSEConnectedEventData$Outbound` instead. */
  export type Outbound = SSEConnectedEventData$Outbound;
}

export function sseConnectedEventDataToJSON(
  sseConnectedEventData: SSEConnectedEventData,
): string {
  return JSON.stringify(
    SSEConnectedEventData$outboundSchema.parse(sseConnectedEventData),
  );
}

export function sseConnectedEventDataFromJSON(
  jsonString: string,
): SafeParseResult<SSEConnectedEventData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEConnectedEventData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEConnectedEventData' from JSON`,
  );
}

/** @internal */
export const SSEConnectedEvent$inboundSchema: z.ZodType<
  SSEConnectedEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: SSEConnectedEventEvent$inboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.string().transform((v, ctx) => {
    try {
      return JSON.parse(v);
    } catch (err) {
      ctx.addIssue({
        code: z.ZodIssueCode.custom,
        message: `malformed json: ${err}`,
      });
      return z.NEVER;
    }
  }).pipe(z.lazy(() => SSEConnectedEventData$inboundSchema)),
});

/** @internal */
export type SSEConnectedEvent$Outbound = {
  event: string;
  id: string;
  retry?: number | undefined;
  data: SSEConnectedEventData$Outbound;
};

/** @internal */
export const SSEConnectedEvent$outboundSchema: z.ZodType<
  SSEConnectedEvent$Outbound,
  z.ZodTypeDef,
  SSEConnectedEvent
> = z.object({
  event: SSEConnectedEventEvent$outboundSchema,
  id: z.string(),
  retry: z.number().int().optional(),
  data: z.lazy(() => SSEConnectedEventData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEConnectedEvent$ {
  /** @deprecated use `SSEConnectedEvent$inboundSchema` instead. */
  export const inboundSchema = SSEConnectedEvent$inboundSchema;
  /** @deprecated use `SSEConnectedEvent$outboundSchema` instead. */
  export const outboundSchema = SSEConnectedEvent$outboundSchema;
  /** @deprecated use `SSEConnectedEvent$Outbound` instead. */
  export type Outbound = SSEConnectedEvent$Outbound;
}

export function sseConnectedEventToJSON(
  sseConnectedEvent: SSEConnectedEvent,
): string {
  return JSON.stringify(
    SSEConnectedEvent$outboundSchema.parse(sseConnectedEvent),
  );
}

export function sseConnectedEventFromJSON(
  jsonString: string,
): SafeParseResult<SSEConnectedEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEConnectedEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEConnectedEvent' from JSON`,
  );
}

/** @internal */
export const SSEEventStream$inboundSchema: z.ZodType<
  SSEEventStream,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => SSECompleteEvent$inboundSchema).and(
    z.object({ event: z.literal("complete") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEConnectedEvent$inboundSchema).and(
    z.object({ event: z.literal("connected") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEContentEvent$inboundSchema).and(
    z.object({ event: z.literal("content") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEErrorEvent$inboundSchema).and(
    z.object({ event: z.literal("error") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEHeartbeatEvent$inboundSchema).and(
    z.object({ event: z.literal("heartbeat") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEPermissionEvent$inboundSchema).and(
    z.object({ event: z.literal("permission") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSESummarizeEvent$inboundSchema).and(
    z.object({ event: z.literal("summarize") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEThinkingEvent$inboundSchema).and(
    z.object({ event: z.literal("thinking") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEToolEvent$inboundSchema).and(
    z.object({ event: z.literal("tool") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEToolExecutionCompleteEvent$inboundSchema).and(
    z.object({ event: z.literal("tool_execution_complete") }).transform((
      v,
    ) => ({ event: v.event })),
  ),
  z.lazy(() => SSEToolExecutionStartEvent$inboundSchema).and(
    z.object({ event: z.literal("tool_execution_start") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/** @internal */
export type SSEEventStream$Outbound =
  | (SSECompleteEvent$Outbound & { event: "complete" })
  | (SSEConnectedEvent$Outbound & { event: "connected" })
  | (SSEContentEvent$Outbound & { event: "content" })
  | (SSEErrorEvent$Outbound & { event: "error" })
  | (SSEHeartbeatEvent$Outbound & { event: "heartbeat" })
  | (SSEPermissionEvent$Outbound & { event: "permission" })
  | (SSESummarizeEvent$Outbound & { event: "summarize" })
  | (SSEThinkingEvent$Outbound & { event: "thinking" })
  | (SSEToolEvent$Outbound & { event: "tool" })
  | (SSEToolExecutionCompleteEvent$Outbound & {
    event: "tool_execution_complete";
  })
  | (SSEToolExecutionStartEvent$Outbound & { event: "tool_execution_start" });

/** @internal */
export const SSEEventStream$outboundSchema: z.ZodType<
  SSEEventStream$Outbound,
  z.ZodTypeDef,
  SSEEventStream
> = z.union([
  z.lazy(() => SSECompleteEvent$outboundSchema).and(
    z.object({ event: z.literal("complete") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEConnectedEvent$outboundSchema).and(
    z.object({ event: z.literal("connected") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEContentEvent$outboundSchema).and(
    z.object({ event: z.literal("content") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEErrorEvent$outboundSchema).and(
    z.object({ event: z.literal("error") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEHeartbeatEvent$outboundSchema).and(
    z.object({ event: z.literal("heartbeat") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEPermissionEvent$outboundSchema).and(
    z.object({ event: z.literal("permission") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSESummarizeEvent$outboundSchema).and(
    z.object({ event: z.literal("summarize") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEThinkingEvent$outboundSchema).and(
    z.object({ event: z.literal("thinking") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEToolEvent$outboundSchema).and(
    z.object({ event: z.literal("tool") }).transform((v) => ({
      event: v.event,
    })),
  ),
  z.lazy(() => SSEToolExecutionCompleteEvent$outboundSchema).and(
    z.object({ event: z.literal("tool_execution_complete") }).transform((
      v,
    ) => ({ event: v.event })),
  ),
  z.lazy(() => SSEToolExecutionStartEvent$outboundSchema).and(
    z.object({ event: z.literal("tool_execution_start") }).transform((v) => ({
      event: v.event,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SSEEventStream$ {
  /** @deprecated use `SSEEventStream$inboundSchema` instead. */
  export const inboundSchema = SSEEventStream$inboundSchema;
  /** @deprecated use `SSEEventStream$outboundSchema` instead. */
  export const outboundSchema = SSEEventStream$outboundSchema;
  /** @deprecated use `SSEEventStream$Outbound` instead. */
  export type Outbound = SSEEventStream$Outbound;
}

export function sseEventStreamToJSON(sseEventStream: SSEEventStream): string {
  return JSON.stringify(SSEEventStream$outboundSchema.parse(sseEventStream));
}

export function sseEventStreamFromJSON(
  jsonString: string,
): SafeParseResult<SSEEventStream, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SSEEventStream$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SSEEventStream' from JSON`,
  );
}
