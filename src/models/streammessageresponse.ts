/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Broadcast status
 */
export const Status = {
  Broadcasted: "broadcasted",
} as const;
/**
 * Broadcast status
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * Response from streaming message endpoint indicating broadcast status
 */
export type StreamMessageResponse = {
  /**
   * Session identifier
   */
  sessionId: string;
  /**
   * Broadcast status
   */
  status: Status;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const StreamMessageResponse$inboundSchema: z.ZodType<
  StreamMessageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sessionId: z.string(),
  status: Status$inboundSchema,
});

/** @internal */
export type StreamMessageResponse$Outbound = {
  sessionId: string;
  status: string;
};

/** @internal */
export const StreamMessageResponse$outboundSchema: z.ZodType<
  StreamMessageResponse$Outbound,
  z.ZodTypeDef,
  StreamMessageResponse
> = z.object({
  sessionId: z.string(),
  status: Status$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StreamMessageResponse$ {
  /** @deprecated use `StreamMessageResponse$inboundSchema` instead. */
  export const inboundSchema = StreamMessageResponse$inboundSchema;
  /** @deprecated use `StreamMessageResponse$outboundSchema` instead. */
  export const outboundSchema = StreamMessageResponse$outboundSchema;
  /** @deprecated use `StreamMessageResponse$Outbound` instead. */
  export type Outbound = StreamMessageResponse$Outbound;
}

export function streamMessageResponseToJSON(
  streamMessageResponse: StreamMessageResponse,
): string {
  return JSON.stringify(
    StreamMessageResponse$outboundSchema.parse(streamMessageResponse),
  );
}

export function streamMessageResponseFromJSON(
  jsonString: string,
): SafeParseResult<StreamMessageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StreamMessageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StreamMessageResponse' from JSON`,
  );
}
