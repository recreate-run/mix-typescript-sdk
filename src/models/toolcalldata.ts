/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ToolName,
  ToolName$inboundSchema,
  ToolName$Outbound,
  ToolName$outboundSchema,
} from "./toolname.js";

export type ToolCallData = {
  /**
   * Whether tool call has finished
   */
  finished: boolean;
  /**
   * Unique tool call identifier
   */
  id: string;
  /**
   * Tool input parameters
   */
  input: string;
  /**
   * Whether tool call resulted in error (optional)
   */
  isError?: boolean | undefined;
  /**
   * Tool name - either a core tool or MCP tool following {serverName}_{toolName} pattern
   */
  name: ToolName;
  /**
   * Tool execution result (optional)
   */
  result?: string | undefined;
  /**
   * Tool type
   */
  type: string;
};

/** @internal */
export const ToolCallData$inboundSchema: z.ZodType<
  ToolCallData,
  z.ZodTypeDef,
  unknown
> = z.object({
  finished: z.boolean(),
  id: z.string(),
  input: z.string(),
  isError: z.boolean().optional(),
  name: ToolName$inboundSchema,
  result: z.string().optional(),
  type: z.string(),
});

/** @internal */
export type ToolCallData$Outbound = {
  finished: boolean;
  id: string;
  input: string;
  isError?: boolean | undefined;
  name: ToolName$Outbound;
  result?: string | undefined;
  type: string;
};

/** @internal */
export const ToolCallData$outboundSchema: z.ZodType<
  ToolCallData$Outbound,
  z.ZodTypeDef,
  ToolCallData
> = z.object({
  finished: z.boolean(),
  id: z.string(),
  input: z.string(),
  isError: z.boolean().optional(),
  name: ToolName$outboundSchema,
  result: z.string().optional(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolCallData$ {
  /** @deprecated use `ToolCallData$inboundSchema` instead. */
  export const inboundSchema = ToolCallData$inboundSchema;
  /** @deprecated use `ToolCallData$outboundSchema` instead. */
  export const outboundSchema = ToolCallData$outboundSchema;
  /** @deprecated use `ToolCallData$Outbound` instead. */
  export type Outbound = ToolCallData$Outbound;
}

export function toolCallDataToJSON(toolCallData: ToolCallData): string {
  return JSON.stringify(ToolCallData$outboundSchema.parse(toolCallData));
}

export function toolCallDataFromJSON(
  jsonString: string,
): SafeParseResult<ToolCallData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolCallData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolCallData' from JSON`,
  );
}
