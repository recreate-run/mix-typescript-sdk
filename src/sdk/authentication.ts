/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authenticationDeleteCredentials } from "../funcs/authenticationDeleteCredentials.js";
import { authenticationGetAuthStatus } from "../funcs/authenticationGetAuthStatus.js";
import { authenticationGetOAuthHealth } from "../funcs/authenticationGetOAuthHealth.js";
import { authenticationHandleOAuthCallback } from "../funcs/authenticationHandleOAuthCallback.js";
import { authenticationRefreshOAuthTokens } from "../funcs/authenticationRefreshOAuthTokens.js";
import { authenticationStartOAuthFlow } from "../funcs/authenticationStartOAuthFlow.js";
import { authenticationStoreApiKey } from "../funcs/authenticationStoreApiKey.js";
import { authenticationValidatePreferredProvider } from "../funcs/authenticationValidatePreferredProvider.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Authentication extends ClientSDK {
  /**
   * Store API key
   *
   * @remarks
   * Store API key for direct authentication with a specific provider
   */
  async storeApiKey(
    request: operations.StoreApiKeyRequest,
    options?: RequestOptions,
  ): Promise<operations.StoreApiKeyResponse> {
    return unwrapAsync(authenticationStoreApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Handle OAuth callback
   *
   * @remarks
   * Process OAuth callback and exchange code for access token
   */
  async handleOAuthCallback(
    request: operations.HandleOAuthCallbackRequest,
    options?: RequestOptions,
  ): Promise<operations.HandleOAuthCallbackResponse> {
    return unwrapAsync(authenticationHandleOAuthCallback(
      this,
      request,
      options,
    ));
  }

  /**
   * Start OAuth authentication
   *
   * @remarks
   * Initiate OAuth authentication flow for a specific provider
   */
  async startOAuthFlow(
    request: operations.StartOAuthFlowRequest,
    options?: RequestOptions,
  ): Promise<operations.StartOAuthFlowResponse> {
    return unwrapAsync(authenticationStartOAuthFlow(
      this,
      request,
      options,
    ));
  }

  /**
   * Get authentication status
   *
   * @remarks
   * Get authentication status for all supported providers
   */
  async getAuthStatus(
    options?: RequestOptions,
  ): Promise<operations.GetAuthStatusResponse> {
    return unwrapAsync(authenticationGetAuthStatus(
      this,
      options,
    ));
  }

  /**
   * Validate preferred provider
   *
   * @remarks
   * Check if the user's preferred provider is authenticated
   */
  async validatePreferredProvider(
    options?: RequestOptions,
  ): Promise<operations.ValidatePreferredProviderResponse> {
    return unwrapAsync(authenticationValidatePreferredProvider(
      this,
      options,
    ));
  }

  /**
   * Delete provider credentials
   *
   * @remarks
   * Delete stored API key and/or OAuth credentials for a provider
   */
  async deleteCredentials(
    request: operations.DeleteCredentialsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteCredentialsResponse> {
    return unwrapAsync(authenticationDeleteCredentials(
      this,
      request,
      options,
    ));
  }

  /**
   * Get OAuth authentication health
   *
   * @remarks
   * Get health status of all OAuth credentials including expiry information. Health statuses: 'healthy' (all tokens valid), 'degraded' (some tokens expired but refreshable), 'unhealthy' (tokens expired without refresh capability)
   */
  async getOAuthHealth(
    options?: RequestOptions,
  ): Promise<operations.GetOAuthHealthResponse> {
    return unwrapAsync(authenticationGetOAuthHealth(
      this,
      options,
    ));
  }

  /**
   * Manually refresh OAuth tokens
   *
   * @remarks
   * Manually trigger OAuth token refresh for all expired tokens. Normally tokens are refreshed automatically by the background service every 30 minutes.
   */
  async refreshOAuthTokens(
    options?: RequestOptions,
  ): Promise<operations.RefreshOAuthTokensResponse> {
    return unwrapAsync(authenticationRefreshOAuthTokens(
      this,
      options,
    ));
  }
}
