/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { filesDelete } from "../funcs/filesDelete.js";
import { filesGet, GetAcceptEnum } from "../funcs/filesGet.js";
import { filesList } from "../funcs/filesList.js";
import { filesUpload } from "../funcs/filesUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetAcceptEnum } from "../funcs/filesGet.js";

export class Files extends ClientSDK {
  /**
   * List session files
   *
   * @remarks
   * List all files in session storage directory
   */
  async list(
    request: operations.ListSessionFilesRequest,
    options?: RequestOptions,
  ): Promise<Array<models.FileInfo>> {
    return unwrapAsync(filesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload file to session
   *
   * @remarks
   * Upload a file to session-specific storage directory
   */
  async upload(
    request: operations.UploadSessionFileRequest,
    options?: RequestOptions,
  ): Promise<models.FileInfo> {
    return unwrapAsync(filesUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete session file
   *
   * @remarks
   * Delete a specific file from session storage
   */
  async delete(
    request: operations.DeleteSessionFileRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(filesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get session file
   *
   * @remarks
   * Download or serve a specific file from session storage. Supports thumbnail generation with ?thumb parameter.
   */
  async get(
    request: operations.GetSessionFileRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetAcceptEnum },
  ): Promise<operations.GetSessionFileResponse> {
    return unwrapAsync(filesGet(
      this,
      request,
      options,
    ));
  }
}
