/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagesCancelProcessing } from "../funcs/messagesCancelProcessing.js";
import { messagesGetHistory } from "../funcs/messagesGetHistory.js";
import { messagesGetSession } from "../funcs/messagesGetSession.js";
import { messagesSend } from "../funcs/messagesSend.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Messages extends ClientSDK {
  /**
   * Get global message history
   *
   * @remarks
   * Retrieve message history across all sessions with optional pagination
   */
  async getHistory(
    request?: operations.GetMessageHistoryRequest | undefined,
    options?: RequestOptions,
  ): Promise<Array<models.MessageData>> {
    return unwrapAsync(messagesGetHistory(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel agent processing
   *
   * @remarks
   * Cancel any ongoing agent processing in the specified session
   */
  async cancelProcessing(
    request: operations.CancelSessionProcessingRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelSessionProcessingResponse> {
    return unwrapAsync(messagesCancelProcessing(
      this,
      request,
      options,
    ));
  }

  /**
   * List session messages
   *
   * @remarks
   * Retrieve all messages from a specific session
   */
  async getSession(
    request: operations.GetSessionMessagesRequest,
    options?: RequestOptions,
  ): Promise<Array<models.MessageData>> {
    return unwrapAsync(messagesGetSession(
      this,
      request,
      options,
    ));
  }

  /**
   * Send a message to session
   *
   * @remarks
   * Send a user message to a specific session for AI processing
   */
  async send(
    request: operations.SendMessageRequest,
    options?: RequestOptions,
  ): Promise<models.MessageData> {
    return unwrapAsync(messagesSend(
      this,
      request,
      options,
    ));
  }
}
