/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { sessionsCreate } from "../funcs/sessionsCreate.js";
import { sessionsDelete } from "../funcs/sessionsDelete.js";
import { sessionsFork } from "../funcs/sessionsFork.js";
import { sessionsGet } from "../funcs/sessionsGet.js";
import { sessionsList } from "../funcs/sessionsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Sessions extends ClientSDK {
  /**
   * List all sessions
   *
   * @remarks
   * Retrieve a list of all available sessions with their metadata
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListSessionsResponse> {
    return unwrapAsync(sessionsList(
      this,
      options,
    ));
  }

  /**
   * Create a new session
   *
   * @remarks
   * Create a new session with optional title and working directory
   */
  async create(
    request: operations.CreateSessionRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateSessionResponse> {
    return unwrapAsync(sessionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a session
   *
   * @remarks
   * Permanently delete a session and all its data
   */
  async delete(
    request: operations.DeleteSessionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(sessionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific session
   *
   * @remarks
   * Retrieve detailed information about a specific session
   */
  async get(
    request: operations.GetSessionRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSessionResponse> {
    return unwrapAsync(sessionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Fork a session
   *
   * @remarks
   * Create a new session based on an existing session
   */
  async fork(
    request: operations.ForkSessionRequest,
    options?: RequestOptions,
  ): Promise<operations.ForkSessionResponse> {
    return unwrapAsync(sessionsFork(
      this,
      request,
      options,
    ));
  }
}
