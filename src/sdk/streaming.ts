/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { streamingSendStreamingMessage } from "../funcs/streamingSendStreamingMessage.js";
import { streamingStreamEvents } from "../funcs/streamingStreamEvents.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Streaming extends ClientSDK {
  /**
   * Server-Sent Events stream for real-time updates
   *
   * @remarks
   * Establishes a persistent SSE connection for receiving real-time updates during message processing. Connection remains open for multiple messages and includes proper reconnection support with Last-Event-ID header.
   */
  async streamEvents(
    request: operations.StreamEventsRequest,
    options?: RequestOptions,
  ): Promise<operations.StreamEventsResponse> {
    return unwrapAsync(streamingStreamEvents(
      this,
      request,
      options,
    ));
  }

  /**
   * Send message via streaming pipeline
   *
   * @remarks
   * Send a message to a session via the streaming pipeline. This endpoint integrates with active SSE connections to broadcast real-time processing events including thinking, content, tool execution, and completion events.
   */
  async sendStreamingMessage(
    request: operations.SendStreamingMessageRequest,
    options?: RequestOptions,
  ): Promise<models.StreamMessageResponse> {
    return unwrapAsync(streamingSendStreamingMessage(
      this,
      request,
      options,
    ));
  }
}
