/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { systemGetCommand } from "../funcs/systemGetCommand.js";
import { systemGetSystemInfo } from "../funcs/systemGetSystemInfo.js";
import { systemHealthCheck } from "../funcs/systemHealthCheck.js";
import { systemListCommands } from "../funcs/systemListCommands.js";
import { systemListMcpServers } from "../funcs/systemListMcpServers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class System extends ClientSDK {
  /**
   * List available commands
   *
   * @remarks
   * Retrieve list of all available commands
   */
  async listCommands(
    options?: RequestOptions,
  ): Promise<Array<operations.ListCommandsResponse>> {
    return unwrapAsync(systemListCommands(
      this,
      options,
    ));
  }

  /**
   * Get specific command
   *
   * @remarks
   * Retrieve details about a specific command
   */
  async getCommand(
    request: operations.GetCommandRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCommandResponse> {
    return unwrapAsync(systemGetCommand(
      this,
      request,
      options,
    ));
  }

  /**
   * List MCP servers
   *
   * @remarks
   * Retrieve list of available Model Context Protocol (MCP) servers
   */
  async listMcpServers(
    options?: RequestOptions,
  ): Promise<Array<operations.ListMcpServersResponse>> {
    return unwrapAsync(systemListMcpServers(
      this,
      options,
    ));
  }

  /**
   * Get system information
   *
   * @remarks
   * Retrieve system information including storage configuration
   */
  async getSystemInfo(
    options?: RequestOptions,
  ): Promise<operations.GetSystemInfoResponse> {
    return unwrapAsync(systemGetSystemInfo(
      this,
      options,
    ));
  }

  /**
   * Health check
   *
   * @remarks
   * Check server health and status
   */
  async healthCheck(
    options?: RequestOptions,
  ): Promise<operations.HealthCheckResponse> {
    return unwrapAsync(systemHealthCheck(
      this,
      options,
    ));
  }
}
