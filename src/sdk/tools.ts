/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { toolsDeleteToolCredentials } from "../funcs/toolsDeleteToolCredentials.js";
import { toolsGetToolsStatus } from "../funcs/toolsGetToolsStatus.js";
import { toolsStoreToolCredentials } from "../funcs/toolsStoreToolCredentials.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Tools extends ClientSDK {
  /**
   * Store tool API key
   *
   * @remarks
   * Store API key for a specific tool provider
   */
  async storeToolCredentials(
    request: operations.StoreToolCredentialsRequest,
    options?: RequestOptions,
  ): Promise<operations.StoreToolCredentialsResponse> {
    return unwrapAsync(toolsStoreToolCredentials(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete tool API key
   *
   * @remarks
   * Delete stored API key for a specific tool provider
   */
  async deleteToolCredentials(
    request: operations.DeleteToolCredentialsRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteToolCredentialsResponse> {
    return unwrapAsync(toolsDeleteToolCredentials(
      this,
      request,
      options,
    ));
  }

  /**
   * Get tools status
   *
   * @remarks
   * Get status and authentication information for all available tools and categories
   */
  async getToolsStatus(
    options?: RequestOptions,
  ): Promise<operations.GetToolsStatusResponse> {
    return unwrapAsync(toolsGetToolsStatus(
      this,
      options,
    ));
  }
}
